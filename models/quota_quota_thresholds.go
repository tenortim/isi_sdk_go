// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaQuotaThresholds quota quota thresholds
// swagger:model QuotaQuotaThresholds
type QuotaQuotaThresholds struct {

	// Usage bytes at which notifications will be sent but writes will not be denied.
	// Minimum: 1
	Advisory int64 `json:"advisory,omitempty"`

	// Usage bytes at which further writes will be denied.
	// Minimum: 1
	Hard int64 `json:"hard,omitempty"`

	// Usage bytes at which notifications will be sent and soft grace time will be started.
	// Minimum: 1
	Soft int64 `json:"soft,omitempty"`

	// Time in seconds after which the soft threshold has been hit before writes will be denied.
	// Minimum: 1
	SoftGrace int64 `json:"soft_grace,omitempty"`
}

// Validate validates this quota quota thresholds
func (m *QuotaQuotaThresholds) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvisory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHard(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoft(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSoftGrace(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaQuotaThresholds) validateAdvisory(formats strfmt.Registry) error {

	if swag.IsZero(m.Advisory) { // not required
		return nil
	}

	if err := validate.MinimumInt("advisory", "body", int64(m.Advisory), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaThresholds) validateHard(formats strfmt.Registry) error {

	if swag.IsZero(m.Hard) { // not required
		return nil
	}

	if err := validate.MinimumInt("hard", "body", int64(m.Hard), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaThresholds) validateSoft(formats strfmt.Registry) error {

	if swag.IsZero(m.Soft) { // not required
		return nil
	}

	if err := validate.MinimumInt("soft", "body", int64(m.Soft), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaThresholds) validateSoftGrace(formats strfmt.Registry) error {

	if swag.IsZero(m.SoftGrace) { // not required
		return nil
	}

	if err := validate.MinimumInt("soft_grace", "body", int64(m.SoftGrace), 1, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaQuotaThresholds) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaQuotaThresholds) UnmarshalBinary(b []byte) error {
	var res QuotaQuotaThresholds
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
