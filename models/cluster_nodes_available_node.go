// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterNodesAvailableNode cluster nodes available node
// swagger:model ClusterNodesAvailableNode
type ClusterNodesAvailableNode struct {

	// Node configuration ID.
	ConfigurationID string `json:"configuration_id,omitempty"`

	// Human-readable description giving further detail on status (may be empty)
	Description string `json:"description,omitempty"`

	// Isilon product name.
	Product string `json:"product,omitempty"`

	// Serial number of this node.
	SerialNumber string `json:"serial_number,omitempty"`

	// Availability of the node.
	// Enum: [available waiting error error_permanent working rebooting exiting]
	Status string `json:"status,omitempty"`

	// OneFS build version running on the node.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster nodes available node
func (m *ClusterNodesAvailableNode) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterNodesAvailableNodeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["available","waiting","error","error_permanent","working","rebooting","exiting"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterNodesAvailableNodeTypeStatusPropEnum = append(clusterNodesAvailableNodeTypeStatusPropEnum, v)
	}
}

const (

	// ClusterNodesAvailableNodeStatusAvailable captures enum value "available"
	ClusterNodesAvailableNodeStatusAvailable string = "available"

	// ClusterNodesAvailableNodeStatusWaiting captures enum value "waiting"
	ClusterNodesAvailableNodeStatusWaiting string = "waiting"

	// ClusterNodesAvailableNodeStatusError captures enum value "error"
	ClusterNodesAvailableNodeStatusError string = "error"

	// ClusterNodesAvailableNodeStatusErrorPermanent captures enum value "error_permanent"
	ClusterNodesAvailableNodeStatusErrorPermanent string = "error_permanent"

	// ClusterNodesAvailableNodeStatusWorking captures enum value "working"
	ClusterNodesAvailableNodeStatusWorking string = "working"

	// ClusterNodesAvailableNodeStatusRebooting captures enum value "rebooting"
	ClusterNodesAvailableNodeStatusRebooting string = "rebooting"

	// ClusterNodesAvailableNodeStatusExiting captures enum value "exiting"
	ClusterNodesAvailableNodeStatusExiting string = "exiting"
)

// prop value enum
func (m *ClusterNodesAvailableNode) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterNodesAvailableNodeTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterNodesAvailableNode) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodesAvailableNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodesAvailableNode) UnmarshalBinary(b []byte) error {
	var res ClusterNodesAvailableNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
