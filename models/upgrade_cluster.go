// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// UpgradeCluster Cluster wide upgrade status info.
// swagger:model UpgradeCluster
type UpgradeCluster struct {

	// The cluster overview of an upgrade process.
	ClusterOverview *UpgradeClusterClusterOverview `json:"cluster_overview,omitempty"`

	// The different states of an upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'partially upgraded', 'upgrading', 'rolling back', 'assessing', 'error'
	ClusterState string `json:"cluster_state,omitempty"`

	// The time when a rollback, assessment or upgrade has finished completely. Use ISO 8601 standard. Null if the cluster_state is not 'upgraded'.
	FinishTime string `json:"finish_time,omitempty"`

	// The location (path) of the upgrade image which must be within /ifs.
	// Null if the cluster_state is 'committed' or 'upgraded.'
	InstallImagePath string `json:"install_image_path,omitempty"`

	// The current OneFS version before upgrade.
	OnefsVersionCurrent *ClusterNodesOnefsVersion `json:"onefs_version_current,omitempty"`

	// The OneFS version the user is attempting to upgrade to. Null if the cluster_state is 'committed' or 'assessing.'
	OnefsVersionUpgrade *ClusterNodesOnefsVersion `json:"onefs_version_upgrade,omitempty"`

	// The most recent patch action performed.
	PatchAction string `json:"patch_action,omitempty"`

	// The patch with the most recent patch action.
	PatchName string `json:"patch_name,omitempty"`

	// The time when an upgrade, rollback, or assessment was started. Use ISO 8601 standard. Null if the cluster_state is 'committed' or 'partially upgraded.'
	StartTime string `json:"start_time,omitempty"`

	// The settings neccessary when starting an upgrade. Null if the cluster_state is not 'upgrading' or 'partially upgraded.' or 'error'.
	UpgradeSettings *UpgradeClusterUpgradeSettings `json:"upgrade_settings,omitempty"`
}

// Validate validates this upgrade cluster
func (m *UpgradeCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterOverview(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnefsVersionCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnefsVersionUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgradeSettings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpgradeCluster) validateClusterOverview(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterOverview) { // not required
		return nil
	}

	if m.ClusterOverview != nil {
		if err := m.ClusterOverview.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster_overview")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeCluster) validateOnefsVersionCurrent(formats strfmt.Registry) error {

	if swag.IsZero(m.OnefsVersionCurrent) { // not required
		return nil
	}

	if m.OnefsVersionCurrent != nil {
		if err := m.OnefsVersionCurrent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onefs_version_current")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeCluster) validateOnefsVersionUpgrade(formats strfmt.Registry) error {

	if swag.IsZero(m.OnefsVersionUpgrade) { // not required
		return nil
	}

	if m.OnefsVersionUpgrade != nil {
		if err := m.OnefsVersionUpgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onefs_version_upgrade")
			}
			return err
		}
	}

	return nil
}

func (m *UpgradeCluster) validateUpgradeSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.UpgradeSettings) { // not required
		return nil
	}

	if m.UpgradeSettings != nil {
		if err := m.UpgradeSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade_settings")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpgradeCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradeCluster) UnmarshalBinary(b []byte) error {
	var res UpgradeCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
