// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbLogLevel smb log level
// swagger:model SmbLogLevel
type SmbLogLevel struct {

	// Valid SMB logging levels
	// Enum: [always error warning info verbose debug trace]
	Level string `json:"level,omitempty"`
}

// Validate validates this smb log level
func (m *SmbLogLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbLogLevelTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","error","warning","info","verbose","debug","trace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbLogLevelTypeLevelPropEnum = append(smbLogLevelTypeLevelPropEnum, v)
	}
}

const (

	// SmbLogLevelLevelAlways captures enum value "always"
	SmbLogLevelLevelAlways string = "always"

	// SmbLogLevelLevelError captures enum value "error"
	SmbLogLevelLevelError string = "error"

	// SmbLogLevelLevelWarning captures enum value "warning"
	SmbLogLevelLevelWarning string = "warning"

	// SmbLogLevelLevelInfo captures enum value "info"
	SmbLogLevelLevelInfo string = "info"

	// SmbLogLevelLevelVerbose captures enum value "verbose"
	SmbLogLevelLevelVerbose string = "verbose"

	// SmbLogLevelLevelDebug captures enum value "debug"
	SmbLogLevelLevelDebug string = "debug"

	// SmbLogLevelLevelTrace captures enum value "trace"
	SmbLogLevelLevelTrace string = "trace"
)

// prop value enum
func (m *SmbLogLevel) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbLogLevelTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbLogLevel) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbLogLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbLogLevel) UnmarshalBinary(b []byte) error {
	var res SmbLogLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
