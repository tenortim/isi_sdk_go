// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncRuleExtendedExtended sync rule extended extended
// swagger:model SyncRuleExtendedExtended
type SyncRuleExtendedExtended struct {

	// User-entered description of this performance rule.
	Description string `json:"description,omitempty"`

	// Whether this performance rule is currently in effect during its specified intervals.
	Enabled bool `json:"enabled,omitempty"`

	// The system ID given to this performance rule.
	ID string `json:"id,omitempty"`

	// Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.
	Limit int64 `json:"limit,omitempty"`

	// A schedule defining when during a week this performance rule is in effect.  If unspecified or null, the schedule will always be in effect.
	Schedule *SyncRuleSchedule `json:"schedule,omitempty"`

	// The type of system resource this rule limits.
	// Enum: [bandwidth file_count cpu worker]
	Type string `json:"type,omitempty"`
}

// Validate validates this sync rule extended extended
func (m *SyncRuleExtendedExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncRuleExtendedExtended) validateSchedule(formats strfmt.Registry) error {

	if swag.IsZero(m.Schedule) { // not required
		return nil
	}

	if m.Schedule != nil {
		if err := m.Schedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("schedule")
			}
			return err
		}
	}

	return nil
}

var syncRuleExtendedExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bandwidth","file_count","cpu","worker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncRuleExtendedExtendedTypeTypePropEnum = append(syncRuleExtendedExtendedTypeTypePropEnum, v)
	}
}

const (

	// SyncRuleExtendedExtendedTypeBandwidth captures enum value "bandwidth"
	SyncRuleExtendedExtendedTypeBandwidth string = "bandwidth"

	// SyncRuleExtendedExtendedTypeFileCount captures enum value "file_count"
	SyncRuleExtendedExtendedTypeFileCount string = "file_count"

	// SyncRuleExtendedExtendedTypeCPU captures enum value "cpu"
	SyncRuleExtendedExtendedTypeCPU string = "cpu"

	// SyncRuleExtendedExtendedTypeWorker captures enum value "worker"
	SyncRuleExtendedExtendedTypeWorker string = "worker"
)

// prop value enum
func (m *SyncRuleExtendedExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncRuleExtendedExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncRuleExtendedExtended) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncRuleExtendedExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncRuleExtendedExtended) UnmarshalBinary(b []byte) error {
	var res SyncRuleExtendedExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
