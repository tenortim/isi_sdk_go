// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DebugStatsHandler debug stats handler
// swagger:model DebugStatsHandler
type DebugStatsHandler struct {

	// Per-method statistics.
	DELETE *DebugStatsUnknown `json:"DELETE,omitempty"`

	// Per-method statistics.
	GET *DebugStatsUnknown `json:"GET,omitempty"`

	// Per-method statistics.
	HEAD *DebugStatsUnknown `json:"HEAD,omitempty"`

	// Per-method statistics.
	POST *DebugStatsUnknown `json:"POST,omitempty"`

	// Per-method statistics.
	PUT *DebugStatsUnknown `json:"PUT,omitempty"`

	// Per-method statistics.
	UNSUPPORTED *DebugStatsUnknown `json:"UNSUPPORTED,omitempty"`

	// The URI.
	Name string `json:"name,omitempty"`
}

// Validate validates this debug stats handler
func (m *DebugStatsHandler) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDELETE(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGET(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHEAD(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePOST(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePUT(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUNSUPPORTED(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DebugStatsHandler) validateDELETE(formats strfmt.Registry) error {

	if swag.IsZero(m.DELETE) { // not required
		return nil
	}

	if m.DELETE != nil {
		if err := m.DELETE.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("DELETE")
			}
			return err
		}
	}

	return nil
}

func (m *DebugStatsHandler) validateGET(formats strfmt.Registry) error {

	if swag.IsZero(m.GET) { // not required
		return nil
	}

	if m.GET != nil {
		if err := m.GET.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("GET")
			}
			return err
		}
	}

	return nil
}

func (m *DebugStatsHandler) validateHEAD(formats strfmt.Registry) error {

	if swag.IsZero(m.HEAD) { // not required
		return nil
	}

	if m.HEAD != nil {
		if err := m.HEAD.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("HEAD")
			}
			return err
		}
	}

	return nil
}

func (m *DebugStatsHandler) validatePOST(formats strfmt.Registry) error {

	if swag.IsZero(m.POST) { // not required
		return nil
	}

	if m.POST != nil {
		if err := m.POST.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("POST")
			}
			return err
		}
	}

	return nil
}

func (m *DebugStatsHandler) validatePUT(formats strfmt.Registry) error {

	if swag.IsZero(m.PUT) { // not required
		return nil
	}

	if m.PUT != nil {
		if err := m.PUT.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("PUT")
			}
			return err
		}
	}

	return nil
}

func (m *DebugStatsHandler) validateUNSUPPORTED(formats strfmt.Registry) error {

	if swag.IsZero(m.UNSUPPORTED) { // not required
		return nil
	}

	if m.UNSUPPORTED != nil {
		if err := m.UNSUPPORTED.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("UNSUPPORTED")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DebugStatsHandler) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DebugStatsHandler) UnmarshalBinary(b []byte) error {
	var res DebugStatsHandler
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
