// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FilepoolPolicyExtendedExtended filepool policy extended extended
// swagger:model FilepoolPolicyExtendedExtended
type FilepoolPolicyExtendedExtended struct {

	// A list of actions to be taken for matching files
	Actions []*FilepoolPolicyActionExtended `json:"actions"`

	// The order in which this policy should be applied (relative to other policies)
	ApplyOrder int64 `json:"apply_order,omitempty"`

	// The guid assigned to the cluster on which the account was created
	BirthClusterID string `json:"birth_cluster_id,omitempty"`

	// A description for this policy
	Description string `json:"description,omitempty"`

	// The file matching rules for this policy
	FileMatchingPattern *FilepoolPolicyFileMatchingPattern `json:"file_matching_pattern,omitempty"`

	// A unique identifier for this policy
	ID int64 `json:"id,omitempty"`

	// A unique name for this policy
	Name string `json:"name,omitempty"`

	// Indicates whether this policy is in a good state ("OK") or disabled ("disabled")
	// Enum: [OK disabled]
	State string `json:"state,omitempty"`

	// Gives further information to describe the state of this policy
	StateDetails string `json:"state_details,omitempty"`
}

// Validate validates this filepool policy extended extended
func (m *FilepoolPolicyExtendedExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileMatchingPattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FilepoolPolicyExtendedExtended) validateActions(formats strfmt.Registry) error {

	if swag.IsZero(m.Actions) { // not required
		return nil
	}

	for i := 0; i < len(m.Actions); i++ {
		if swag.IsZero(m.Actions[i]) { // not required
			continue
		}

		if m.Actions[i] != nil {
			if err := m.Actions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("actions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *FilepoolPolicyExtendedExtended) validateFileMatchingPattern(formats strfmt.Registry) error {

	if swag.IsZero(m.FileMatchingPattern) { // not required
		return nil
	}

	if m.FileMatchingPattern != nil {
		if err := m.FileMatchingPattern.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file_matching_pattern")
			}
			return err
		}
	}

	return nil
}

var filepoolPolicyExtendedExtendedTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		filepoolPolicyExtendedExtendedTypeStatePropEnum = append(filepoolPolicyExtendedExtendedTypeStatePropEnum, v)
	}
}

const (

	// FilepoolPolicyExtendedExtendedStateOK captures enum value "OK"
	FilepoolPolicyExtendedExtendedStateOK string = "OK"

	// FilepoolPolicyExtendedExtendedStateDisabled captures enum value "disabled"
	FilepoolPolicyExtendedExtendedStateDisabled string = "disabled"
)

// prop value enum
func (m *FilepoolPolicyExtendedExtended) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, filepoolPolicyExtendedExtendedTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FilepoolPolicyExtendedExtended) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FilepoolPolicyExtendedExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FilepoolPolicyExtendedExtended) UnmarshalBinary(b []byte) error {
	var res FilepoolPolicyExtendedExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
