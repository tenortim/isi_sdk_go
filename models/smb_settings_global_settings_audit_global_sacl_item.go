// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbSettingsGlobalSettingsAuditGlobalSaclItem smb settings global settings audit global sacl item
// swagger:model SmbSettingsGlobalSettingsAuditGlobalSaclItem
type SmbSettingsGlobalSettingsAuditGlobalSaclItem struct {

	// Determines if audit is performed on success or failure.
	// Required: true
	// Enum: [successful failed]
	Flags *string `json:"flags"`

	// Specifies the array of filesystem rights that are governed.
	// Required: true
	Permission []string `json:"permission"`
}

// Validate validates this smb settings global settings audit global sacl item
func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbSettingsGlobalSettingsAuditGlobalSaclItemTypeFlagsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["successful","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsGlobalSettingsAuditGlobalSaclItemTypeFlagsPropEnum = append(smbSettingsGlobalSettingsAuditGlobalSaclItemTypeFlagsPropEnum, v)
	}
}

const (

	// SmbSettingsGlobalSettingsAuditGlobalSaclItemFlagsSuccessful captures enum value "successful"
	SmbSettingsGlobalSettingsAuditGlobalSaclItemFlagsSuccessful string = "successful"

	// SmbSettingsGlobalSettingsAuditGlobalSaclItemFlagsFailed captures enum value "failed"
	SmbSettingsGlobalSettingsAuditGlobalSaclItemFlagsFailed string = "failed"
)

// prop value enum
func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) validateFlagsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsGlobalSettingsAuditGlobalSaclItemTypeFlagsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) validateFlags(formats strfmt.Registry) error {

	if err := validate.Required("flags", "body", m.Flags); err != nil {
		return err
	}

	// value enum
	if err := m.validateFlagsEnum("flags", "body", *m.Flags); err != nil {
		return err
	}

	return nil
}

var smbSettingsGlobalSettingsAuditGlobalSaclItemPermissionItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["generic_all","generic_read","generic_write","generic_exec","std_delete","std_read_dac","std_write_dac","std_write_owner","std_synchronize","std_required","list","add_file","add_subdir","delete_child","traverse","dir_read_attr","dir_write_attr","dir_read_ext_attr","dir_write_ext_attr","dir_gen_read","dir_gen_write","dir_gen_execute","dir_gen_all","file_read","file_write","append","execute","file_read_attr","file_write_attr","file_read_ext_attr","file_write_ext_attr","file_gen_read","file_gen_write","file_gen_execute","file_gen_all","modify","object_inherit","container_inherit","no_prop_inherit","inherit_only","inherited_ace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsGlobalSettingsAuditGlobalSaclItemPermissionItemsEnum = append(smbSettingsGlobalSettingsAuditGlobalSaclItemPermissionItemsEnum, v)
	}
}

func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) validatePermissionItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsGlobalSettingsAuditGlobalSaclItemPermissionItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) validatePermission(formats strfmt.Registry) error {

	if err := validate.Required("permission", "body", m.Permission); err != nil {
		return err
	}

	for i := 0; i < len(m.Permission); i++ {

		// value enum
		if err := m.validatePermissionItemsEnum("permission"+"."+strconv.Itoa(i), "body", m.Permission[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbSettingsGlobalSettingsAuditGlobalSaclItem) UnmarshalBinary(b []byte) error {
	var res SmbSettingsGlobalSettingsAuditGlobalSaclItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
