// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodePartitionsNodePartition node partitions node partition
// swagger:model NodePartitionsNodePartition
type NodePartitionsNodePartition struct {

	// The block size used for the reported partition information.
	BlockSize int64 `json:"block_size,omitempty"`

	// Total blocks on this file system partition.
	Capacity int64 `json:"capacity,omitempty"`

	// Comma separated list of devices used for this file system partition.
	ComponentDevices string `json:"component_devices,omitempty"`

	// Directory on which this partition is mounted.
	MountPoint string `json:"mount_point,omitempty"`

	// Used blocks on this file system partition, expressed as a percentage.
	PercentUsed string `json:"percent_used,omitempty"`

	// System partition details as provided by statfs(2).
	Statfs *NodePartitionsNodePartitionStatfs `json:"statfs,omitempty"`

	// Used blocks on this file system partition.
	Used int64 `json:"used,omitempty"`
}

// Validate validates this node partitions node partition
func (m *NodePartitionsNodePartition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatfs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodePartitionsNodePartition) validateStatfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Statfs) { // not required
		return nil
	}

	if m.Statfs != nil {
		if err := m.Statfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("statfs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodePartitionsNodePartition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodePartitionsNodePartition) UnmarshalBinary(b []byte) error {
	var res NodePartitionsNodePartition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
