// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultDirectoriesUsageDataItem result directories usage data item
// swagger:model ResultDirectoriesUsageDataItem
type ResultDirectoriesUsageDataItem struct {

	// Number of alternate data streams.
	// Required: true
	AdsCnt *int64 `json:"ads_cnt"`

	// Number of directories.
	// Required: true
	DirCnt *int64 `json:"dir_cnt"`

	// Number of files.
	// Required: true
	FileCnt *int64 `json:"file_cnt"`

	// Defines if directory has subdirectories.
	// Required: true
	HasSubdirs *bool `json:"has_subdirs"`

	// Logical inode number.
	// Required: true
	Lin *int64 `json:"lin"`

	// Logical size directory in bytes.
	// Required: true
	LogSizeSum *int64 `json:"log_size_sum"`

	// Logical size sum of overflow in bytes.
	// Required: true
	LogSizeSumOverflow *int64 `json:"log_size_sum_overflow"`

	// Name of directory.
	// Required: true
	Name *string `json:"name"`

	// Other count.
	// Required: true
	OtherCnt *int64 `json:"other_cnt"`

	// Parent directory inode.
	// Required: true
	Parent *int64 `json:"parent"`

	// Physical size directory in bytes.
	// Required: true
	PhysSizeSum *int64 `json:"phys_size_sum"`
}

// Validate validates this result directories usage data item
func (m *ResultDirectoriesUsageDataItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdsCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasSubdirs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogSizeSum(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogSizeSumOverflow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherCnt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysSizeSum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateAdsCnt(formats strfmt.Registry) error {

	if err := validate.Required("ads_cnt", "body", m.AdsCnt); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateDirCnt(formats strfmt.Registry) error {

	if err := validate.Required("dir_cnt", "body", m.DirCnt); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateFileCnt(formats strfmt.Registry) error {

	if err := validate.Required("file_cnt", "body", m.FileCnt); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateHasSubdirs(formats strfmt.Registry) error {

	if err := validate.Required("has_subdirs", "body", m.HasSubdirs); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateLin(formats strfmt.Registry) error {

	if err := validate.Required("lin", "body", m.Lin); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateLogSizeSum(formats strfmt.Registry) error {

	if err := validate.Required("log_size_sum", "body", m.LogSizeSum); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateLogSizeSumOverflow(formats strfmt.Registry) error {

	if err := validate.Required("log_size_sum_overflow", "body", m.LogSizeSumOverflow); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateOtherCnt(formats strfmt.Registry) error {

	if err := validate.Required("other_cnt", "body", m.OtherCnt); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validateParent(formats strfmt.Registry) error {

	if err := validate.Required("parent", "body", m.Parent); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectoriesUsageDataItem) validatePhysSizeSum(formats strfmt.Registry) error {

	if err := validate.Required("phys_size_sum", "body", m.PhysSizeSum); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultDirectoriesUsageDataItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultDirectoriesUsageDataItem) UnmarshalBinary(b []byte) error {
	var res ResultDirectoriesUsageDataItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
