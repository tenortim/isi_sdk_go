// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileFilterSettings file filter settings
// swagger:model FileFilterSettings
type FileFilterSettings struct {

	// List of file extensions to be filtered.
	FileFilterExtensions []string `json:"file_filter_extensions"`

	// Specifies if filter list is for deny or allow. Default is deny.
	// Enum: [deny allow]
	FileFilterType string `json:"file_filter_type,omitempty"`

	// Indicates whether file filtering is enabled on this zone.
	FileFilteringEnabled bool `json:"file_filtering_enabled,omitempty"`
}

// Validate validates this file filter settings
func (m *FileFilterSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFileFilterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileFilterSettingsTypeFileFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileFilterSettingsTypeFileFilterTypePropEnum = append(fileFilterSettingsTypeFileFilterTypePropEnum, v)
	}
}

const (

	// FileFilterSettingsFileFilterTypeDeny captures enum value "deny"
	FileFilterSettingsFileFilterTypeDeny string = "deny"

	// FileFilterSettingsFileFilterTypeAllow captures enum value "allow"
	FileFilterSettingsFileFilterTypeAllow string = "allow"
)

// prop value enum
func (m *FileFilterSettings) validateFileFilterTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fileFilterSettingsTypeFileFilterTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FileFilterSettings) validateFileFilterType(formats strfmt.Registry) error {

	if swag.IsZero(m.FileFilterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileFilterTypeEnum("file_filter_type", "body", m.FileFilterType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileFilterSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileFilterSettings) UnmarshalBinary(b []byte) error {
	var res FileFilterSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
