// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AuthUser Specifies the configuration properties for a user.
// swagger:model AuthUser
type AuthUser struct {

	// Specifies an email address for the user.
	Email string `json:"email,omitempty"`

	// If true, the authenticated user is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Specifies the Unix Epoch time when the auth user will expire.
	Expiry int64 `json:"expiry,omitempty"`

	// Specifies the GECOS value, which is usually the full name.
	Gecos string `json:"gecos,omitempty"`

	// Specifies a home directory for the user.
	HomeDirectory string `json:"home_directory,omitempty"`

	// Changes the password for the user.
	Password string `json:"password,omitempty"`

	// If true, the password should expire.
	PasswordExpires bool `json:"password_expires,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	PrimaryGroup *GroupMember `json:"primary_group,omitempty"`

	// If true, prompts the user to change their password at the next login.
	PromptPasswordChange bool `json:"prompt_password_change,omitempty"`

	// Specifies the shell for the user.
	Shell string `json:"shell,omitempty"`

	// Specifies a security identifier.
	Sid string `json:"sid,omitempty"`

	// Specifies a numeric user identifier.
	UID int64 `json:"uid,omitempty"`

	// If true, the user account should be unlocked.
	Unlock bool `json:"unlock,omitempty"`
}

// Validate validates this auth user
func (m *AuthUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrimaryGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthUser) validatePrimaryGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryGroup) { // not required
		return nil
	}

	if m.PrimaryGroup != nil {
		if err := m.PrimaryGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_group")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthUser) UnmarshalBinary(b []byte) error {
	var res AuthUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
