// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudAccountCreateParams cloud account create params
// swagger:model CloudAccountCreateParams
type CloudAccountCreateParams struct {
	CloudAccount

	// The username required to authenticate against the cloud service
	// Required: true
	AccountUsername *string `json:"account_username"`

	// A valid authentication key for connecting to the cloud
	// Required: true
	Key *string `json:"key"`

	// A unique name for this account
	// Required: true
	Name *string `json:"name"`

	// The type of cloud protocol required.  E.g., "isilon" for EMC Isilon, "ecs" for EMC ECS Appliance, "virtustream" for Virtustream Storage Cloud, "azure" for Microsoft Azure and "s3" for Amazon S3
	// Required: true
	// Enum: [isilon ecs virtustream azure s3 ran ecs2]
	Type *string `json:"type"`

	// A valid URI pointing to the location of the cloud storage
	// Required: true
	URI *string `json:"uri"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CloudAccountCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CloudAccount
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CloudAccount = aO0

	// AO1
	var dataAO1 struct {
		AccountUsername *string `json:"account_username"`

		Key *string `json:"key"`

		Name *string `json:"name"`

		Type *string `json:"type"`

		URI *string `json:"uri"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AccountUsername = dataAO1.AccountUsername

	m.Key = dataAO1.Key

	m.Name = dataAO1.Name

	m.Type = dataAO1.Type

	m.URI = dataAO1.URI

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CloudAccountCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CloudAccount)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AccountUsername *string `json:"account_username"`

		Key *string `json:"key"`

		Name *string `json:"name"`

		Type *string `json:"type"`

		URI *string `json:"uri"`
	}

	dataAO1.AccountUsername = m.AccountUsername

	dataAO1.Key = m.Key

	dataAO1.Name = m.Name

	dataAO1.Type = m.Type

	dataAO1.URI = m.URI

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cloud account create params
func (m *CloudAccountCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CloudAccount
	if err := m.CloudAccount.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAccountUsername(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURI(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudAccountCreateParams) validateAccountUsername(formats strfmt.Registry) error {

	if err := validate.Required("account_username", "body", m.AccountUsername); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccountCreateParams) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccountCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var cloudAccountCreateParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["isilon","ecs","virtustream","azure","s3","ran","ecs2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudAccountCreateParamsTypeTypePropEnum = append(cloudAccountCreateParamsTypeTypePropEnum, v)
	}
}

// property enum
func (m *CloudAccountCreateParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudAccountCreateParamsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudAccountCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *CloudAccountCreateParams) validateURI(formats strfmt.Registry) error {

	if err := validate.Required("uri", "body", m.URI); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudAccountCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudAccountCreateParams) UnmarshalBinary(b []byte) error {
	var res CloudAccountCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
