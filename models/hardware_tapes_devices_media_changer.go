// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareTapesDevicesMediaChanger hardware tapes devices media changer
// swagger:model HardwareTapesDevicesMediaChanger
type HardwareTapesDevicesMediaChanger struct {

	// The unique display id.
	ID string `json:"id,omitempty"`

	// Name of the device
	Name string `json:"name,omitempty"`

	// Number of open
	Opencount int64 `json:"opencount,omitempty"`

	// paths
	Paths []*HardwareTapesDevicesMediaChangerPath `json:"paths"`

	// Product information string including vendor, model, and revision
	Product string `json:"product,omitempty"`

	// Serial number of the device
	Serial string `json:"serial,omitempty"`

	// Device state
	// Enum: [read/write write only read only raw closed]
	State string `json:"state,omitempty"`

	// World wide node name of the port
	Wwnn string `json:"wwnn,omitempty"`
}

// Validate validates this hardware tapes devices media changer
func (m *HardwareTapesDevicesMediaChanger) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HardwareTapesDevicesMediaChanger) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {
		if swag.IsZero(m.Paths[i]) { // not required
			continue
		}

		if m.Paths[i] != nil {
			if err := m.Paths[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("paths" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hardwareTapesDevicesMediaChangerTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read/write","write only","read only","raw","closed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareTapesDevicesMediaChangerTypeStatePropEnum = append(hardwareTapesDevicesMediaChangerTypeStatePropEnum, v)
	}
}

const (

	// HardwareTapesDevicesMediaChangerStateReadWrite captures enum value "read/write"
	HardwareTapesDevicesMediaChangerStateReadWrite string = "read/write"

	// HardwareTapesDevicesMediaChangerStateWriteOnly captures enum value "write only"
	HardwareTapesDevicesMediaChangerStateWriteOnly string = "write only"

	// HardwareTapesDevicesMediaChangerStateReadOnly captures enum value "read only"
	HardwareTapesDevicesMediaChangerStateReadOnly string = "read only"

	// HardwareTapesDevicesMediaChangerStateRaw captures enum value "raw"
	HardwareTapesDevicesMediaChangerStateRaw string = "raw"

	// HardwareTapesDevicesMediaChangerStateClosed captures enum value "closed"
	HardwareTapesDevicesMediaChangerStateClosed string = "closed"
)

// prop value enum
func (m *HardwareTapesDevicesMediaChanger) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareTapesDevicesMediaChangerTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareTapesDevicesMediaChanger) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareTapesDevicesMediaChanger) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareTapesDevicesMediaChanger) UnmarshalBinary(b []byte) error {
	var res HardwareTapesDevicesMediaChanger
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
