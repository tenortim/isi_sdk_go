// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragepoolStatus storagepool status
// swagger:model StoragepoolStatus
type StoragepoolStatus struct {

	// Disk pools which are currently unhealthy.
	// Required: true
	Unhealthy []*StoragepoolStatusUnhealthyItem `json:"unhealthy"`

	// Drives which are not currently provisioned into a disk pool.
	// Required: true
	Unprovisioned []*StoragepoolStatusUnprovisionedItem `json:"unprovisioned"`
}

// Validate validates this storagepool status
func (m *StoragepoolStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnhealthy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnprovisioned(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragepoolStatus) validateUnhealthy(formats strfmt.Registry) error {

	if err := validate.Required("unhealthy", "body", m.Unhealthy); err != nil {
		return err
	}

	for i := 0; i < len(m.Unhealthy); i++ {
		if swag.IsZero(m.Unhealthy[i]) { // not required
			continue
		}

		if m.Unhealthy[i] != nil {
			if err := m.Unhealthy[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unhealthy" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragepoolStatus) validateUnprovisioned(formats strfmt.Registry) error {

	if err := validate.Required("unprovisioned", "body", m.Unprovisioned); err != nil {
		return err
	}

	for i := 0; i < len(m.Unprovisioned); i++ {
		if swag.IsZero(m.Unprovisioned[i]) { // not required
			continue
		}

		if m.Unprovisioned[i] != nil {
			if err := m.Unprovisioned[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("unprovisioned" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragepoolStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragepoolStatus) UnmarshalBinary(b []byte) error {
	var res StoragepoolStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
