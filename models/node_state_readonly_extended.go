// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// NodeStateReadonlyExtended Node readonly state.
// swagger:model NodeStateReadonlyExtended
type NodeStateReadonlyExtended struct {

	// The current read-only mode allowed status for the node.
	Allowed bool `json:"allowed,omitempty"`

	// The current read-only user mode status for the node. NOTE: If read-only mode is currently disallowed for this node, it will remain read/write until read-only mode is allowed again. This value only sets or clears any user-specified requests for read-only mode. If the node has been placed into read-only mode by the system, it will remain in read-only mode until the system conditions which triggered read-only mode have cleared.
	Enabled bool `json:"enabled,omitempty"`

	// The current read-only mode status for the node.
	Mode bool `json:"mode,omitempty"`

	// The current read-only mode status description for the node.
	Status string `json:"status,omitempty"`

	// The read-only state values are valid (False = Error).
	Valid bool `json:"valid,omitempty"`

	// The current read-only value (enumerated bitfield) for the node.
	Value int64 `json:"value,omitempty"`
}

// Validate validates this node state readonly extended
func (m *NodeStateReadonlyExtended) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeStateReadonlyExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStateReadonlyExtended) UnmarshalBinary(b []byte) error {
	var res NodeStateReadonlyExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
