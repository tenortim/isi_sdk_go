// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// DirectoryQuery directory query
// swagger:model DirectoryQuery
type DirectoryQuery struct {

	// result
	Result []string `json:"result"`

	// scope
	Scope *DirectoryQueryScope `json:"scope,omitempty"`
}

// Validate validates this directory query
func (m *DirectoryQuery) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryQuery) validateScope(formats strfmt.Registry) error {

	if swag.IsZero(m.Scope) { // not required
		return nil
	}

	if m.Scope != nil {
		if err := m.Scope.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("scope")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryQuery) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryQuery) UnmarshalBinary(b []byte) error {
	var res DirectoryQuery
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DirectoryQueryScope directory query scope
// swagger:model DirectoryQueryScope
type DirectoryQueryScope struct {

	// conditions
	Conditions []*DirectoryQueryScopeConditionsItems0 `json:"conditions"`

	// logic
	Logic string `json:"logic,omitempty"`
}

// Validate validates this directory query scope
func (m *DirectoryQueryScope) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DirectoryQueryScope) validateConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.Conditions) { // not required
		return nil
	}

	for i := 0; i < len(m.Conditions); i++ {
		if swag.IsZero(m.Conditions[i]) { // not required
			continue
		}

		if m.Conditions[i] != nil {
			if err := m.Conditions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("scope" + "." + "conditions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryQueryScope) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryQueryScope) UnmarshalBinary(b []byte) error {
	var res DirectoryQueryScope
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// DirectoryQueryScopeConditionsItems0 directory query scope conditions items0
// swagger:model DirectoryQueryScopeConditionsItems0
type DirectoryQueryScopeConditionsItems0 struct {

	// attr
	Attr string `json:"attr,omitempty"`

	// operator
	Operator string `json:"operator,omitempty"`

	// value
	Value string `json:"value,omitempty"`
}

// Validate validates this directory query scope conditions items0
func (m *DirectoryQueryScopeConditionsItems0) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DirectoryQueryScopeConditionsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DirectoryQueryScopeConditionsItems0) UnmarshalBinary(b []byte) error {
	var res DirectoryQueryScopeConditionsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
