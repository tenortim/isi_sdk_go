// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubnetsSubnetPool subnets subnet pool
// swagger:model SubnetsSubnetPool
type SubnetsSubnetPool struct {

	// Name of a valid access zone to map IP address pool to the zone.
	// Min Length: 1
	AccessZone string `json:"access_zone,omitempty"`

	// OneFS supports the following NIC aggregation modes.
	AggregationMode string `json:"aggregation_mode,omitempty"`

	// Specifies how IP address allocation is done among pool members.
	AllocMethod string `json:"alloc_method,omitempty"`

	// A description of the pool.
	// Max Length: 128
	Description string `json:"description,omitempty"`

	// List of interface members in this pool.
	Ifaces []*SubnetsSubnetPoolIface `json:"ifaces"`

	// The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.
	// Max Length: 32
	Name string `json:"name,omitempty"`

	// List of IP address ranges in this pool.
	Ranges []*SubnetsSubnetPoolRange `json:"ranges"`

	// Rebalance policy..
	RebalancePolicy string `json:"rebalance_policy,omitempty"`

	// Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.
	// Maximum: 86400
	// Minimum: 0
	ScAutoUnsuspendDelay *int64 `json:"sc_auto_unsuspend_delay,omitempty"`

	// SmartConnect client connection balancing policy.
	ScConnectPolicy string `json:"sc_connect_policy,omitempty"`

	// SmartConnect zone name for the pool.
	ScDNSZone string `json:"sc_dns_zone,omitempty"`

	// List of SmartConnect zone aliases (DNS names) to the pool.
	ScDNSZoneAliases []string `json:"sc_dns_zone_aliases"`

	// SmartConnect IP failover policy.
	ScFailoverPolicy string `json:"sc_failover_policy,omitempty"`

	// Name of SmartConnect service subnet for this pool.
	ScSubnet string `json:"sc_subnet,omitempty"`

	// Time to live value for SmartConnect DNS query responses in seconds.
	// Maximum: 2.147483647e+09
	// Minimum: 0
	ScTTL *int64 `json:"sc_ttl,omitempty"`

	// List of interface members in this pool.
	StaticRoutes []*SubnetsSubnetPoolStaticRoute `json:"static_routes"`
}

// Validate validates this subnets subnet pool
func (m *SubnetsSubnetPool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScAutoUnsuspendDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticRoutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetsSubnetPool) validateAccessZone(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessZone) { // not required
		return nil
	}

	if err := validate.MinLength("access_zone", "body", string(m.AccessZone), 1); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPool) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 128); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPool) validateIfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.Ifaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Ifaces); i++ {
		if swag.IsZero(m.Ifaces[i]) { // not required
			continue
		}

		if m.Ifaces[i] != nil {
			if err := m.Ifaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ifaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubnetsSubnetPool) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 32); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPool) validateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {
		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubnetsSubnetPool) validateScAutoUnsuspendDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.ScAutoUnsuspendDelay) { // not required
		return nil
	}

	if err := validate.MinimumInt("sc_auto_unsuspend_delay", "body", int64(*m.ScAutoUnsuspendDelay), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sc_auto_unsuspend_delay", "body", int64(*m.ScAutoUnsuspendDelay), 86400, false); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPool) validateScTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.ScTTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("sc_ttl", "body", int64(*m.ScTTL), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sc_ttl", "body", int64(*m.ScTTL), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPool) validateStaticRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.StaticRoutes) { // not required
		return nil
	}

	for i := 0; i < len(m.StaticRoutes); i++ {
		if swag.IsZero(m.StaticRoutes[i]) { // not required
			continue
		}

		if m.StaticRoutes[i] != nil {
			if err := m.StaticRoutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("static_routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetsSubnetPool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetsSubnetPool) UnmarshalBinary(b []byte) error {
	var res SubnetsSubnetPool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
