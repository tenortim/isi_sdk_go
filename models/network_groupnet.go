// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkGroupnet network groupnet
// swagger:model NetworkGroupnet
type NetworkGroupnet struct {

	// A description of the groupnet.
	// Max Length: 128
	Description string `json:"description,omitempty"`

	// DNS caching is enabled or disabled.
	DNSCacheEnabled bool `json:"dns_cache_enabled,omitempty"`

	// List of DNS resolver options.
	// Unique: true
	DNSOptions []string `json:"dns_options"`

	// List of DNS search suffixes.
	// Max Items: 6
	DNSSearch []string `json:"dns_search"`

	// List of Domain Name Server IP addresses.
	// Max Items: 3
	DNSServers []string `json:"dns_servers"`

	// The name of the groupnet.
	// Max Length: 32
	Name string `json:"name,omitempty"`

	// Enable or disable appending nodes DNS search  list to client DNS inquiries directed at SmartConnect service IP.
	ServerSideDNSSearch bool `json:"server_side_dns_search,omitempty"`
}

// Validate validates this network groupnet
func (m *NetworkGroupnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSSearch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkGroupnet) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 128); err != nil {
		return err
	}

	return nil
}

var networkGroupnetDNSOptionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["rotate"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkGroupnetDNSOptionsItemsEnum = append(networkGroupnetDNSOptionsItemsEnum, v)
	}
}

func (m *NetworkGroupnet) validateDNSOptionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkGroupnetDNSOptionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkGroupnet) validateDNSOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSOptions) { // not required
		return nil
	}

	if err := validate.UniqueItems("dns_options", "body", m.DNSOptions); err != nil {
		return err
	}

	for i := 0; i < len(m.DNSOptions); i++ {

		// value enum
		if err := m.validateDNSOptionsItemsEnum("dns_options"+"."+strconv.Itoa(i), "body", m.DNSOptions[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *NetworkGroupnet) validateDNSSearch(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSSearch) { // not required
		return nil
	}

	iDNSSearchSize := int64(len(m.DNSSearch))

	if err := validate.MaxItems("dns_search", "body", iDNSSearchSize, 6); err != nil {
		return err
	}

	return nil
}

func (m *NetworkGroupnet) validateDNSServers(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSServers) { // not required
		return nil
	}

	iDNSServersSize := int64(len(m.DNSServers))

	if err := validate.MaxItems("dns_servers", "body", iDNSServersSize, 3); err != nil {
		return err
	}

	return nil
}

func (m *NetworkGroupnet) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 32); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkGroupnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkGroupnet) UnmarshalBinary(b []byte) error {
	var res NetworkGroupnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
