// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotPendingPendingItem snapshot pending pending item
// swagger:model SnapshotPendingPendingItem
type SnapshotPendingPendingItem struct {

	// The system supplied unique ID used for sorting and paging.
	// Required: true
	ID *string `json:"id"`

	// The /ifs path that will snapshotted.
	// Required: true
	Path *string `json:"path"`

	// The name of the schedule used to create this snapshot.
	// Required: true
	Schedule *string `json:"schedule"`

	// The system snapshot name formed from the schedule formate.
	// Required: true
	Snapshot *string `json:"snapshot"`

	// The Unix Epoch time the snapshot will be created.
	// Required: true
	Time *int64 `json:"time"`
}

// Validate validates this snapshot pending pending item
func (m *SnapshotPendingPendingItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotPendingPendingItem) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPendingPendingItem) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPendingPendingItem) validateSchedule(formats strfmt.Registry) error {

	if err := validate.Required("schedule", "body", m.Schedule); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPendingPendingItem) validateSnapshot(formats strfmt.Registry) error {

	if err := validate.Required("snapshot", "body", m.Snapshot); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotPendingPendingItem) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotPendingPendingItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotPendingPendingItem) UnmarshalBinary(b []byte) error {
	var res SnapshotPendingPendingItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
