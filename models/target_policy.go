// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetPolicy target policy
// swagger:model TargetPolicy
type TargetPolicy struct {

	// The condition of this policy with respect to sync failover/failback.
	// Required: true
	// Enum: [writes_disabled enabling_writes writes_enabled disabling_writes creating_resync_policy resync_policy_created]
	FailoverFailbackState *string `json:"failover_failback_state"`

	// The system ID given to this sync policy.
	// Required: true
	ID *string `json:"id"`

	// The state of the last job run for this policy.
	// Required: true
	// Enum: [scheduled running paused finished failed canceled needs_attention skipped pending unknown]
	LastJobState *string `json:"last_job_state"`

	// The IP address from which a SyncIQ coordinator daemon most recently connected to this cluster to update it about the progress of a job for this policy.
	// Required: true
	LastSourceCoordinatorIP *string `json:"last_source_coordinator_ip"`

	// The last time this cluster was updated with sync information from the source cluster for this policy, in unix epoch seconds.  Null if no such update has occurred yet.
	LastUpdateFromSource int64 `json:"last_update_from_source,omitempty"`

	// Was this policy defined by a OneFS version earlier than 6.0? (Pre-6.0 policies did not have the target policy concept and canceling from the target side will not be available.)
	// Required: true
	LegacyPolicy *bool `json:"legacy_policy"`

	// User-assigned name of this sync policy.
	// Required: true
	Name *string `json:"name"`

	// Unique identifier for the source cluster.
	// Required: true
	SourceClusterGUID *string `json:"source_cluster_guid"`

	// Hostname or IP address of sync source cluster.
	// Required: true
	SourceHost *string `json:"source_host"`

	// Absolute filesystem path on the target cluster for the sync destination.
	// Required: true
	TargetPath *string `json:"target_path"`
}

// Validate validates this target policy
func (m *TargetPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFailoverFailbackState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastJobState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastSourceCoordinatorIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegacyPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceClusterGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetPath(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var targetPolicyTypeFailoverFailbackStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["writes_disabled","enabling_writes","writes_enabled","disabling_writes","creating_resync_policy","resync_policy_created"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetPolicyTypeFailoverFailbackStatePropEnum = append(targetPolicyTypeFailoverFailbackStatePropEnum, v)
	}
}

const (

	// TargetPolicyFailoverFailbackStateWritesDisabled captures enum value "writes_disabled"
	TargetPolicyFailoverFailbackStateWritesDisabled string = "writes_disabled"

	// TargetPolicyFailoverFailbackStateEnablingWrites captures enum value "enabling_writes"
	TargetPolicyFailoverFailbackStateEnablingWrites string = "enabling_writes"

	// TargetPolicyFailoverFailbackStateWritesEnabled captures enum value "writes_enabled"
	TargetPolicyFailoverFailbackStateWritesEnabled string = "writes_enabled"

	// TargetPolicyFailoverFailbackStateDisablingWrites captures enum value "disabling_writes"
	TargetPolicyFailoverFailbackStateDisablingWrites string = "disabling_writes"

	// TargetPolicyFailoverFailbackStateCreatingResyncPolicy captures enum value "creating_resync_policy"
	TargetPolicyFailoverFailbackStateCreatingResyncPolicy string = "creating_resync_policy"

	// TargetPolicyFailoverFailbackStateResyncPolicyCreated captures enum value "resync_policy_created"
	TargetPolicyFailoverFailbackStateResyncPolicyCreated string = "resync_policy_created"
)

// prop value enum
func (m *TargetPolicy) validateFailoverFailbackStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, targetPolicyTypeFailoverFailbackStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TargetPolicy) validateFailoverFailbackState(formats strfmt.Registry) error {

	if err := validate.Required("failover_failback_state", "body", m.FailoverFailbackState); err != nil {
		return err
	}

	// value enum
	if err := m.validateFailoverFailbackStateEnum("failover_failback_state", "body", *m.FailoverFailbackState); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var targetPolicyTypeLastJobStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scheduled","running","paused","finished","failed","canceled","needs_attention","skipped","pending","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetPolicyTypeLastJobStatePropEnum = append(targetPolicyTypeLastJobStatePropEnum, v)
	}
}

const (

	// TargetPolicyLastJobStateScheduled captures enum value "scheduled"
	TargetPolicyLastJobStateScheduled string = "scheduled"

	// TargetPolicyLastJobStateRunning captures enum value "running"
	TargetPolicyLastJobStateRunning string = "running"

	// TargetPolicyLastJobStatePaused captures enum value "paused"
	TargetPolicyLastJobStatePaused string = "paused"

	// TargetPolicyLastJobStateFinished captures enum value "finished"
	TargetPolicyLastJobStateFinished string = "finished"

	// TargetPolicyLastJobStateFailed captures enum value "failed"
	TargetPolicyLastJobStateFailed string = "failed"

	// TargetPolicyLastJobStateCanceled captures enum value "canceled"
	TargetPolicyLastJobStateCanceled string = "canceled"

	// TargetPolicyLastJobStateNeedsAttention captures enum value "needs_attention"
	TargetPolicyLastJobStateNeedsAttention string = "needs_attention"

	// TargetPolicyLastJobStateSkipped captures enum value "skipped"
	TargetPolicyLastJobStateSkipped string = "skipped"

	// TargetPolicyLastJobStatePending captures enum value "pending"
	TargetPolicyLastJobStatePending string = "pending"

	// TargetPolicyLastJobStateUnknown captures enum value "unknown"
	TargetPolicyLastJobStateUnknown string = "unknown"
)

// prop value enum
func (m *TargetPolicy) validateLastJobStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, targetPolicyTypeLastJobStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TargetPolicy) validateLastJobState(formats strfmt.Registry) error {

	if err := validate.Required("last_job_state", "body", m.LastJobState); err != nil {
		return err
	}

	// value enum
	if err := m.validateLastJobStateEnum("last_job_state", "body", *m.LastJobState); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateLastSourceCoordinatorIP(formats strfmt.Registry) error {

	if err := validate.Required("last_source_coordinator_ip", "body", m.LastSourceCoordinatorIP); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateLegacyPolicy(formats strfmt.Registry) error {

	if err := validate.Required("legacy_policy", "body", m.LegacyPolicy); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateSourceClusterGUID(formats strfmt.Registry) error {

	if err := validate.Required("source_cluster_guid", "body", m.SourceClusterGUID); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateSourceHost(formats strfmt.Registry) error {

	if err := validate.Required("source_host", "body", m.SourceHost); err != nil {
		return err
	}

	return nil
}

func (m *TargetPolicy) validateTargetPath(formats strfmt.Registry) error {

	if err := validate.Required("target_path", "body", m.TargetPath); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetPolicy) UnmarshalBinary(b []byte) error {
	var res TargetPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
