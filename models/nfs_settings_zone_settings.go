// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// NfsSettingsZoneSettings nfs settings zone settings
// swagger:model NfsSettingsZoneSettings
type NfsSettingsZoneSettings struct {

	// If true, sends owners and groups as UIDs and GIDs when look up fails or if the 'nfsv4_no_name' property is set to 1.
	Nfsv4AllowNumericIds bool `json:"nfsv4_allow_numeric_ids,omitempty"`

	// Specifies the domain or realm through which users and groups are associated.
	Nfsv4Domain string `json:"nfsv4_domain,omitempty"`

	// If true, sends owners and groups without a domain name.
	Nfsv4NoDomain bool `json:"nfsv4_no_domain,omitempty"`

	// If true, sends UIDs and GIDs without a domain name.
	Nfsv4NoDomainUIDS bool `json:"nfsv4_no_domain_uids,omitempty"`

	// If true, sends owners and groups as UIDs and GIDs.
	Nfsv4NoNames bool `json:"nfsv4_no_names,omitempty"`

	// If true, replaces the owner or group domain with an NFS domain name.
	Nfsv4ReplaceDomain bool `json:"nfsv4_replace_domain,omitempty"`

	// Specifies the access zones in which these settings apply.
	Zone string `json:"zone,omitempty"`
}

// Validate validates this nfs settings zone settings
func (m *NfsSettingsZoneSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NfsSettingsZoneSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsSettingsZoneSettings) UnmarshalBinary(b []byte) error {
	var res NfsSettingsZoneSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
