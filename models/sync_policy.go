// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncPolicy sync policy
// swagger:model SyncPolicy
type SyncPolicy struct {

	// If set to true, SyncIQ will perform failback configuration tasks during the next job run, rather than waiting to perform those tasks during the failback process. Performing these tasks ahead of time will increase the speed of failback operations.
	AcceleratedFailback bool `json:"accelerated_failback,omitempty"`

	// If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.
	// Enum: [copy sync]
	Action string `json:"action,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable UDP-based data transfer.
	BurstMode bool `json:"burst_mode,omitempty"`

	// If true, retain previous source snapshot and incremental repstate, both of which are required for changelist creation.
	Changelist bool `json:"changelist,omitempty"`

	// If true, the sync target performs cyclic redundancy checks (CRC) on the data as it is received.
	CheckIntegrity bool `json:"check_integrity,omitempty"`

	// If set to deny, replicates all CloudPools smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, the job will fail. If set to force, replicates all smartlinks to the target cluster as regular files. If set to allow, SyncIQ will attempt to replicate smartlinks to the target cluster as smartlinks; if the target cluster does not support the smartlinks, SyncIQ will replicate the smartlinks as regular files.
	// Enum: [deny allow force]
	CloudDeepCopy string `json:"cloud_deep_copy,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  If true, the most recent run of this policy encountered an error and this policy will not start any more scheduled jobs until this field is manually set back to 'false'.
	// Enum: [false]
	Conflicted bool `json:"conflicted,omitempty"`

	// User-assigned description of this sync policy.
	Description string `json:"description,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  If true, the 7.2+ file splitting capability will be disabled.
	DisableFileSplit bool `json:"disable_file_split,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable sync failover/failback.
	DisableFofb bool `json:"disable_fofb,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  Enable/disable the 6.5+ STF based data transfer and uses only treewalk.
	DisableStf bool `json:"disable_stf,omitempty"`

	// If true, jobs will be automatically run based on this policy, according to its schedule.
	Enabled bool `json:"enabled,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  Continue sending files even with the corrupted filesystem.
	ExpectedDataloss bool `json:"expected_dataloss,omitempty"`

	// A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.
	FileMatchingPattern *ReportSubreportPolicyFileMatchingPattern `json:"file_matching_pattern,omitempty"`

	// NOTE: This field should not be changed without the help of Isilon support.  Determines whether data is sent only through the subnet and pool specified in the "source_network" field. This option can be useful if there are multiple interfaces for the given source subnet.  If you enable this option, the net.inet.ip.choose_ifa_by_ipsrc sysctl should be set.
	ForceInterface bool `json:"force_interface,omitempty"`

	// If --schedule is set to When-Source-Modified, the duration to wait after a modification is made before starting a job (default is 0 seconds).
	// Minimum: 0
	JobDelay *int64 `json:"job_delay,omitempty"`

	// Severity an event must reach before it is logged.
	// Enum: [fatal error notice info copy debug trace]
	LogLevel string `json:"log_level,omitempty"`

	// If true, the system will log any files or directories that are deleted due to a sync.
	LogRemovedFiles bool `json:"log_removed_files,omitempty"`

	// User-assigned name of this sync policy.
	Name string `json:"name,omitempty"`

	// The password for the target cluster.  This field is not readable.
	Password string `json:"password,omitempty"`

	// Determines the priority level of a policy. Policies with higher priority will have precedence to run over lower priority policies. Valid range is [0, 1]. Default is 0.
	Priority int64 `json:"priority,omitempty"`

	// Length of time (in seconds) a policy report will be stored.
	// Minimum: 0
	ReportMaxAge *int64 `json:"report_max_age,omitempty"`

	// Maximum number of policy reports that will be stored on the system.
	// Maximum: 2000
	// Minimum: 1
	ReportMaxCount int64 `json:"report_max_count,omitempty"`

	// If you specify true, and you specify a SmartConnect zone in the "target_host" field, replication policies will connect only to nodes in the specified SmartConnect zone.  If you specify false, replication policies are not restricted to specific nodes on the target cluster.
	RestrictTargetNetwork bool `json:"restrict_target_network,omitempty"`

	// If --schedule is set to a time/date, an alert is created if the specified RPO for this policy is exceeded. The default value is 0, which will not generate RPO alerts.
	// Minimum: 0
	RpoAlert *int64 `json:"rpo_alert,omitempty"`

	// The schedule on which new jobs will be run for this policy.
	Schedule string `json:"schedule,omitempty"`

	// Skip DNS lookup of target IPs.
	SkipLookup bool `json:"skip_lookup,omitempty"`

	// If true and --schedule is set to a time/date, the policy will not run if no changes have been made to the contents of the source directory since the last job successfully completed.
	SkipWhenSourceUnmodified bool `json:"skip_when_source_unmodified,omitempty"`

	// If true, snapshot-triggered syncs will include snapshots taken before policy creation time (requires --schedule when-snapshot-taken).
	SnapshotSyncExisting bool `json:"snapshot_sync_existing,omitempty"`

	// The naming pattern that a snapshot must match to trigger a sync when the schedule is when-snapshot-taken (default is "*").
	SnapshotSyncPattern string `json:"snapshot_sync_pattern,omitempty"`

	// Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.
	SourceExcludeDirectories []string `json:"source_exclude_directories"`

	// Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.
	SourceIncludeDirectories []string `json:"source_include_directories"`

	// Restricts replication policies on the local cluster to running on the specified subnet and pool.
	SourceNetwork *SyncPolicySourceNetwork `json:"source_network,omitempty"`

	// The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.
	SourceRootPath string `json:"source_root_path,omitempty"`

	// If true, archival snapshots of the source data will be taken on the source cluster before a sync.
	SourceSnapshotArchive bool `json:"source_snapshot_archive,omitempty"`

	// The length of time in seconds to keep snapshots on the source cluster.
	// Minimum: 0
	SourceSnapshotExpiration *int64 `json:"source_snapshot_expiration,omitempty"`

	// The name pattern for snapshots taken on the source cluster before a sync.
	SourceSnapshotPattern string `json:"source_snapshot_pattern,omitempty"`

	// If true, the target creates diffs against the original sync.
	TargetCompareInitialSync bool `json:"target_compare_initial_sync,omitempty"`

	// If true, target cluster will detect if files have been changed on the target by legacy tree walk syncs.
	TargetDetectModifications bool `json:"target_detect_modifications,omitempty"`

	// Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.
	TargetHost string `json:"target_host,omitempty"`

	// Absolute filesystem path on the target cluster for the sync destination.
	TargetPath string `json:"target_path,omitempty"`

	// The alias of the snapshot taken on the target cluster after the sync completes. A value of @DEFAULT will reset this field to the default creation value.
	TargetSnapshotAlias string `json:"target_snapshot_alias,omitempty"`

	// If true, archival snapshots of the target data will be taken on the target cluster after successful sync completions.
	TargetSnapshotArchive bool `json:"target_snapshot_archive,omitempty"`

	// The length of time in seconds to keep snapshots on the target cluster.
	// Minimum: 0
	TargetSnapshotExpiration *int64 `json:"target_snapshot_expiration,omitempty"`

	// The name pattern for snapshots taken on the target cluster after the sync completes.  A value of @DEFAULT will reset this field to the default creation value.
	TargetSnapshotPattern string `json:"target_snapshot_pattern,omitempty"`

	// The number of worker threads on a node performing a sync.
	// Maximum: 20
	// Minimum: 1
	WorkersPerNode int64 `json:"workers_per_node,omitempty"`
}

// Validate validates this sync policy
func (m *SyncPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudDeepCopy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConflicted(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileMatchingPattern(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportMaxAge(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportMaxCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRpoAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceSnapshotExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetSnapshotExpiration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWorkersPerNode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syncPolicyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["copy","sync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncPolicyTypeActionPropEnum = append(syncPolicyTypeActionPropEnum, v)
	}
}

const (

	// SyncPolicyActionCopy captures enum value "copy"
	SyncPolicyActionCopy string = "copy"

	// SyncPolicyActionSync captures enum value "sync"
	SyncPolicyActionSync string = "sync"
)

// prop value enum
func (m *SyncPolicy) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncPolicyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncPolicy) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

var syncPolicyTypeCloudDeepCopyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny","allow","force"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncPolicyTypeCloudDeepCopyPropEnum = append(syncPolicyTypeCloudDeepCopyPropEnum, v)
	}
}

const (

	// SyncPolicyCloudDeepCopyDeny captures enum value "deny"
	SyncPolicyCloudDeepCopyDeny string = "deny"

	// SyncPolicyCloudDeepCopyAllow captures enum value "allow"
	SyncPolicyCloudDeepCopyAllow string = "allow"

	// SyncPolicyCloudDeepCopyForce captures enum value "force"
	SyncPolicyCloudDeepCopyForce string = "force"
)

// prop value enum
func (m *SyncPolicy) validateCloudDeepCopyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncPolicyTypeCloudDeepCopyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncPolicy) validateCloudDeepCopy(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudDeepCopy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudDeepCopyEnum("cloud_deep_copy", "body", m.CloudDeepCopy); err != nil {
		return err
	}

	return nil
}

var syncPolicyTypeConflictedPropEnum []interface{}

func init() {
	var res []bool
	if err := json.Unmarshal([]byte(`[false]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncPolicyTypeConflictedPropEnum = append(syncPolicyTypeConflictedPropEnum, v)
	}
}

// prop value enum
func (m *SyncPolicy) validateConflictedEnum(path, location string, value bool) error {
	if err := validate.Enum(path, location, value, syncPolicyTypeConflictedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncPolicy) validateConflicted(formats strfmt.Registry) error {

	if swag.IsZero(m.Conflicted) { // not required
		return nil
	}

	// value enum
	if err := m.validateConflictedEnum("conflicted", "body", m.Conflicted); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateFileMatchingPattern(formats strfmt.Registry) error {

	if swag.IsZero(m.FileMatchingPattern) { // not required
		return nil
	}

	if m.FileMatchingPattern != nil {
		if err := m.FileMatchingPattern.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file_matching_pattern")
			}
			return err
		}
	}

	return nil
}

func (m *SyncPolicy) validateJobDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.JobDelay) { // not required
		return nil
	}

	if err := validate.MinimumInt("job_delay", "body", int64(*m.JobDelay), 0, false); err != nil {
		return err
	}

	return nil
}

var syncPolicyTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fatal","error","notice","info","copy","debug","trace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncPolicyTypeLogLevelPropEnum = append(syncPolicyTypeLogLevelPropEnum, v)
	}
}

const (

	// SyncPolicyLogLevelFatal captures enum value "fatal"
	SyncPolicyLogLevelFatal string = "fatal"

	// SyncPolicyLogLevelError captures enum value "error"
	SyncPolicyLogLevelError string = "error"

	// SyncPolicyLogLevelNotice captures enum value "notice"
	SyncPolicyLogLevelNotice string = "notice"

	// SyncPolicyLogLevelInfo captures enum value "info"
	SyncPolicyLogLevelInfo string = "info"

	// SyncPolicyLogLevelCopy captures enum value "copy"
	SyncPolicyLogLevelCopy string = "copy"

	// SyncPolicyLogLevelDebug captures enum value "debug"
	SyncPolicyLogLevelDebug string = "debug"

	// SyncPolicyLogLevelTrace captures enum value "trace"
	SyncPolicyLogLevelTrace string = "trace"
)

// prop value enum
func (m *SyncPolicy) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncPolicyTypeLogLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncPolicy) validateLogLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogLevelEnum("log_level", "body", m.LogLevel); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateReportMaxAge(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportMaxAge) { // not required
		return nil
	}

	if err := validate.MinimumInt("report_max_age", "body", int64(*m.ReportMaxAge), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateReportMaxCount(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportMaxCount) { // not required
		return nil
	}

	if err := validate.MinimumInt("report_max_count", "body", int64(m.ReportMaxCount), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("report_max_count", "body", int64(m.ReportMaxCount), 2000, false); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateRpoAlert(formats strfmt.Registry) error {

	if swag.IsZero(m.RpoAlert) { // not required
		return nil
	}

	if err := validate.MinimumInt("rpo_alert", "body", int64(*m.RpoAlert), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateSourceNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceNetwork) { // not required
		return nil
	}

	if m.SourceNetwork != nil {
		if err := m.SourceNetwork.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("source_network")
			}
			return err
		}
	}

	return nil
}

func (m *SyncPolicy) validateSourceSnapshotExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceSnapshotExpiration) { // not required
		return nil
	}

	if err := validate.MinimumInt("source_snapshot_expiration", "body", int64(*m.SourceSnapshotExpiration), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateTargetSnapshotExpiration(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetSnapshotExpiration) { // not required
		return nil
	}

	if err := validate.MinimumInt("target_snapshot_expiration", "body", int64(*m.TargetSnapshotExpiration), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *SyncPolicy) validateWorkersPerNode(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkersPerNode) { // not required
		return nil
	}

	if err := validate.MinimumInt("workers_per_node", "body", int64(m.WorkersPerNode), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("workers_per_node", "body", int64(m.WorkersPerNode), 20, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncPolicy) UnmarshalBinary(b []byte) error {
	var res SyncPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
