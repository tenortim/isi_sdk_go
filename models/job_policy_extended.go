// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobPolicyExtended job policy extended
// swagger:model JobPolicyExtended
type JobPolicyExtended struct {
	JobPolicy

	// A helpful human-readable description of the impact policy.
	// Required: true
	Description *string `json:"description"`

	// The ID of the impact policy.
	// Required: true
	ID *string `json:"id"`

	// intervals
	// Required: true
	Intervals []*JobPolicyInterval `json:"intervals"`

	// The name of the impact policy.
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// Whether or not this is a read-only system impact policy.
	System bool `json:"system,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *JobPolicyExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobPolicy
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobPolicy = aO0

	// AO1
	var dataAO1 struct {
		Description *string `json:"description"`

		ID *string `json:"id"`

		Intervals []*JobPolicyInterval `json:"intervals"`

		Name *string `json:"name"`

		System bool `json:"system,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Description = dataAO1.Description

	m.ID = dataAO1.ID

	m.Intervals = dataAO1.Intervals

	m.Name = dataAO1.Name

	m.System = dataAO1.System

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m JobPolicyExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.JobPolicy)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Description *string `json:"description"`

		ID *string `json:"id"`

		Intervals []*JobPolicyInterval `json:"intervals"`

		Name *string `json:"name"`

		System bool `json:"system,omitempty"`
	}

	dataAO1.Description = m.Description

	dataAO1.ID = m.ID

	dataAO1.Intervals = m.Intervals

	dataAO1.Name = m.Name

	dataAO1.System = m.System

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this job policy extended
func (m *JobPolicyExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobPolicy
	if err := m.JobPolicy.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIntervals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobPolicyExtended) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *JobPolicyExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *JobPolicyExtended) validateIntervals(formats strfmt.Registry) error {

	if err := validate.Required("intervals", "body", m.Intervals); err != nil {
		return err
	}

	for i := 0; i < len(m.Intervals); i++ {
		if swag.IsZero(m.Intervals[i]) { // not required
			continue
		}

		if m.Intervals[i] != nil {
			if err := m.Intervals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("intervals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *JobPolicyExtended) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobPolicyExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobPolicyExtended) UnmarshalBinary(b []byte) error {
	var res JobPolicyExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
