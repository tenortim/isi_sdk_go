// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterStatfs Filesystem statistics
// swagger:model ClusterStatfs
type ClusterStatfs struct {

	// The number of free blocks available to non-superuser.
	// Required: true
	FBavail *int64 `json:"f_bavail"`

	// The number of free blocks in the filesystem.
	// Required: true
	FBfree *int64 `json:"f_bfree"`

	// The total number of data blocks in the filesystem.
	// Required: true
	FBlocks *int64 `json:"f_blocks"`

	// The filesystem fragment size.
	// Required: true
	FBsize *int64 `json:"f_bsize"`

	// The number of free nodes available to non-superuser.
	// Required: true
	FFfree *int64 `json:"f_ffree"`

	// The total number of file nodes in the filesystem.
	// Required: true
	FFiles *int64 `json:"f_files"`

	// A copy of the mount exported flags.
	// Required: true
	FFlags *int64 `json:"f_flags"`

	// The filesystem type name.
	// Required: true
	FFstypename *string `json:"f_fstypename"`

	// The optimal transfer block size.
	// Required: true
	FIosize *int64 `json:"f_iosize"`

	// The name of the mounted filesystem.
	// Required: true
	FMntfromname *string `json:"f_mntfromname"`

	// The directory that the filesystem is mounted on.
	// Required: true
	FMntonname *string `json:"f_mntonname"`

	// The maximum length of a file name.
	// Required: true
	FNamemax *int64 `json:"f_namemax"`

	// The ID of the user that mounted the filesystem.
	// Required: true
	FOwner *int64 `json:"f_owner"`

	// The type of the filesystem.
	// Required: true
	FType *int64 `json:"f_type"`

	// The structure version number.
	// Required: true
	FVersion *int64 `json:"f_version"`
}

// Validate validates this cluster statfs
func (m *ClusterStatfs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFBavail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFBfree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFBsize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFFfree(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFFstypename(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFIosize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFMntfromname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFMntonname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFNamemax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStatfs) validateFBavail(formats strfmt.Registry) error {

	if err := validate.Required("f_bavail", "body", m.FBavail); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFBfree(formats strfmt.Registry) error {

	if err := validate.Required("f_bfree", "body", m.FBfree); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFBlocks(formats strfmt.Registry) error {

	if err := validate.Required("f_blocks", "body", m.FBlocks); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFBsize(formats strfmt.Registry) error {

	if err := validate.Required("f_bsize", "body", m.FBsize); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFFfree(formats strfmt.Registry) error {

	if err := validate.Required("f_ffree", "body", m.FFfree); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFFiles(formats strfmt.Registry) error {

	if err := validate.Required("f_files", "body", m.FFiles); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFFlags(formats strfmt.Registry) error {

	if err := validate.Required("f_flags", "body", m.FFlags); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFFstypename(formats strfmt.Registry) error {

	if err := validate.Required("f_fstypename", "body", m.FFstypename); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFIosize(formats strfmt.Registry) error {

	if err := validate.Required("f_iosize", "body", m.FIosize); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFMntfromname(formats strfmt.Registry) error {

	if err := validate.Required("f_mntfromname", "body", m.FMntfromname); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFMntonname(formats strfmt.Registry) error {

	if err := validate.Required("f_mntonname", "body", m.FMntonname); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFNamemax(formats strfmt.Registry) error {

	if err := validate.Required("f_namemax", "body", m.FNamemax); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFOwner(formats strfmt.Registry) error {

	if err := validate.Required("f_owner", "body", m.FOwner); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFType(formats strfmt.Registry) error {

	if err := validate.Required("f_type", "body", m.FType); err != nil {
		return err
	}

	return nil
}

func (m *ClusterStatfs) validateFVersion(formats strfmt.Registry) error {

	if err := validate.Required("f_version", "body", m.FVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStatfs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStatfs) UnmarshalBinary(b []byte) error {
	var res ClusterStatfs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
