// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupnetSubnet groupnet subnet
// swagger:model GroupnetSubnet
type GroupnetSubnet struct {

	// A description of the subnet.
	// Max Length: 128
	Description string `json:"description,omitempty"`

	// List of Direct Server Return addresses.
	DsrAddrs []string `json:"dsr_addrs"`

	// Gateway IP address.
	Gateway string `json:"gateway,omitempty"`

	// Gateway priority.
	// Maximum: 2.147483647e+09
	// Minimum: 1
	GatewayPriority int64 `json:"gateway_priority,omitempty"`

	// MTU of the subnet.
	// Maximum: 9000
	// Minimum: 576
	Mtu int64 `json:"mtu,omitempty"`

	// The name of the subnet.
	// Max Length: 32
	Name string `json:"name,omitempty"`

	// Subnet Prefix Length.
	// Maximum: 128
	// Minimum: 1
	Prefixlen int64 `json:"prefixlen,omitempty"`

	// The address that SmartConnect listens for DNS requests.
	ScServiceAddr string `json:"sc_service_addr,omitempty"`

	// VLAN tagging enabled or disabled.
	VlanEnabled bool `json:"vlan_enabled,omitempty"`

	// VLAN ID for all interfaces in the subnet.
	// Maximum: 4094
	// Minimum: 2
	VlanID int64 `json:"vlan_id,omitempty"`
}

// Validate validates this groupnet subnet
func (m *GroupnetSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtu(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixlen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVlanID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GroupnetSubnet) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 128); err != nil {
		return err
	}

	return nil
}

func (m *GroupnetSubnet) validateGatewayPriority(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayPriority) { // not required
		return nil
	}

	if err := validate.MinimumInt("gateway_priority", "body", int64(m.GatewayPriority), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("gateway_priority", "body", int64(m.GatewayPriority), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *GroupnetSubnet) validateMtu(formats strfmt.Registry) error {

	if swag.IsZero(m.Mtu) { // not required
		return nil
	}

	if err := validate.MinimumInt("mtu", "body", int64(m.Mtu), 576, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mtu", "body", int64(m.Mtu), 9000, false); err != nil {
		return err
	}

	return nil
}

func (m *GroupnetSubnet) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 32); err != nil {
		return err
	}

	return nil
}

func (m *GroupnetSubnet) validatePrefixlen(formats strfmt.Registry) error {

	if swag.IsZero(m.Prefixlen) { // not required
		return nil
	}

	if err := validate.MinimumInt("prefixlen", "body", int64(m.Prefixlen), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("prefixlen", "body", int64(m.Prefixlen), 128, false); err != nil {
		return err
	}

	return nil
}

func (m *GroupnetSubnet) validateVlanID(formats strfmt.Registry) error {

	if swag.IsZero(m.VlanID) { // not required
		return nil
	}

	if err := validate.MinimumInt("vlan_id", "body", int64(m.VlanID), 2, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("vlan_id", "body", int64(m.VlanID), 4094, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupnetSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupnetSubnet) UnmarshalBinary(b []byte) error {
	var res GroupnetSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
