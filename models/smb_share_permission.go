// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbSharePermission smb share permission
// swagger:model SmbSharePermission
type SmbSharePermission struct {

	// Specifies the file system rights that are allowed or denied.
	// Required: true
	// Enum: [full change read]
	Permission *string `json:"permission"`

	// Determines whether the permission is allowed or denied.
	// Required: true
	// Enum: [allow deny]
	PermissionType *string `json:"permission_type"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	// Required: true
	Trustee *GroupMember `json:"trustee"`
}

// Validate validates this smb share permission
func (m *SmbSharePermission) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePermission(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePermissionType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbSharePermissionTypePermissionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["full","change","read"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSharePermissionTypePermissionPropEnum = append(smbSharePermissionTypePermissionPropEnum, v)
	}
}

const (

	// SmbSharePermissionPermissionFull captures enum value "full"
	SmbSharePermissionPermissionFull string = "full"

	// SmbSharePermissionPermissionChange captures enum value "change"
	SmbSharePermissionPermissionChange string = "change"

	// SmbSharePermissionPermissionRead captures enum value "read"
	SmbSharePermissionPermissionRead string = "read"
)

// prop value enum
func (m *SmbSharePermission) validatePermissionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSharePermissionTypePermissionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSharePermission) validatePermission(formats strfmt.Registry) error {

	if err := validate.Required("permission", "body", m.Permission); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermissionEnum("permission", "body", *m.Permission); err != nil {
		return err
	}

	return nil
}

var smbSharePermissionTypePermissionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","deny"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSharePermissionTypePermissionTypePropEnum = append(smbSharePermissionTypePermissionTypePropEnum, v)
	}
}

const (

	// SmbSharePermissionPermissionTypeAllow captures enum value "allow"
	SmbSharePermissionPermissionTypeAllow string = "allow"

	// SmbSharePermissionPermissionTypeDeny captures enum value "deny"
	SmbSharePermissionPermissionTypeDeny string = "deny"
)

// prop value enum
func (m *SmbSharePermission) validatePermissionTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSharePermissionTypePermissionTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSharePermission) validatePermissionType(formats strfmt.Registry) error {

	if err := validate.Required("permission_type", "body", m.PermissionType); err != nil {
		return err
	}

	// value enum
	if err := m.validatePermissionTypeEnum("permission_type", "body", *m.PermissionType); err != nil {
		return err
	}

	return nil
}

func (m *SmbSharePermission) validateTrustee(formats strfmt.Registry) error {

	if err := validate.Required("trustee", "body", m.Trustee); err != nil {
		return err
	}

	if m.Trustee != nil {
		if err := m.Trustee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbSharePermission) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbSharePermission) UnmarshalBinary(b []byte) error {
	var res SmbSharePermission
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
