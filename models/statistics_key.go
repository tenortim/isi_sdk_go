// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatisticsKey statistics key
// swagger:model StatisticsKey
type StatisticsKey struct {

	// Type of aggregation used in down-sampling.
	// Required: true
	// Enum: [last min max avg sum custom]
	AggregationType *string `json:"aggregation_type"`

	// Name of key this keys is derived from, if any.
	BaseName string `json:"base_name,omitempty"`

	// Default time in seconds system will used cached values.
	// Required: true
	DefaultCacheTime *int64 `json:"default_cache_time"`

	// Description of statistics key.
	// Required: true
	Description *string `json:"description"`

	// Key name.
	// Required: true
	Key *string `json:"key"`

	// List of effective history policies for key.
	Policies []*StatisticsKeyPolicy `json:"policies"`

	// Configured time in seconds system will used cached values.
	PolicyCacheTime int64 `json:"policy_cache_time,omitempty"`

	// Name of real key if this is an alias.
	RealName string `json:"real_name,omitempty"`

	// Scope of key.
	// Required: true
	// Enum: [cluster node]
	Scope *string `json:"scope"`

	// Data type of key values.
	// Required: true
	Type *string `json:"type"`

	// Units of key values.
	// Required: true
	Units *string `json:"units"`
}

// Validate validates this statistics key
func (m *StatisticsKey) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultCacheTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var statisticsKeyTypeAggregationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["last","min","max","avg","sum","custom"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statisticsKeyTypeAggregationTypePropEnum = append(statisticsKeyTypeAggregationTypePropEnum, v)
	}
}

const (

	// StatisticsKeyAggregationTypeLast captures enum value "last"
	StatisticsKeyAggregationTypeLast string = "last"

	// StatisticsKeyAggregationTypeMin captures enum value "min"
	StatisticsKeyAggregationTypeMin string = "min"

	// StatisticsKeyAggregationTypeMax captures enum value "max"
	StatisticsKeyAggregationTypeMax string = "max"

	// StatisticsKeyAggregationTypeAvg captures enum value "avg"
	StatisticsKeyAggregationTypeAvg string = "avg"

	// StatisticsKeyAggregationTypeSum captures enum value "sum"
	StatisticsKeyAggregationTypeSum string = "sum"

	// StatisticsKeyAggregationTypeCustom captures enum value "custom"
	StatisticsKeyAggregationTypeCustom string = "custom"
)

// prop value enum
func (m *StatisticsKey) validateAggregationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statisticsKeyTypeAggregationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatisticsKey) validateAggregationType(formats strfmt.Registry) error {

	if err := validate.Required("aggregation_type", "body", m.AggregationType); err != nil {
		return err
	}

	// value enum
	if err := m.validateAggregationTypeEnum("aggregation_type", "body", *m.AggregationType); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validateDefaultCacheTime(formats strfmt.Registry) error {

	if err := validate.Required("default_cache_time", "body", m.DefaultCacheTime); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validatePolicies(formats strfmt.Registry) error {

	if swag.IsZero(m.Policies) { // not required
		return nil
	}

	for i := 0; i < len(m.Policies); i++ {
		if swag.IsZero(m.Policies[i]) { // not required
			continue
		}

		if m.Policies[i] != nil {
			if err := m.Policies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("policies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var statisticsKeyTypeScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["cluster","node"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		statisticsKeyTypeScopePropEnum = append(statisticsKeyTypeScopePropEnum, v)
	}
}

const (

	// StatisticsKeyScopeCluster captures enum value "cluster"
	StatisticsKeyScopeCluster string = "cluster"

	// StatisticsKeyScopeNode captures enum value "node"
	StatisticsKeyScopeNode string = "node"
)

// prop value enum
func (m *StatisticsKey) validateScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, statisticsKeyTypeScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StatisticsKey) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("scope", "body", m.Scope); err != nil {
		return err
	}

	// value enum
	if err := m.validateScopeEnum("scope", "body", *m.Scope); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKey) validateUnits(formats strfmt.Registry) error {

	if err := validate.Required("units", "body", m.Units); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatisticsKey) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatisticsKey) UnmarshalBinary(b []byte) error {
	var res StatisticsKey
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
