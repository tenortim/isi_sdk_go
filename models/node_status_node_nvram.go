// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeStatusNodeNvram node status node nvram
// swagger:model NodeStatusNodeNvram
type NodeStatusNodeNvram struct {

	// This node's NVRAM battery status information.
	Batteries []*NodeStatusNodeNvramBattery `json:"batteries"`

	// This node's NVRAM battery count.
	BatteryCount int64 `json:"battery_count,omitempty"`

	// This node's NVRAM battery charge status, as a color.
	ChargeStatus string `json:"charge_status,omitempty"`

	// This node's NVRAM battery charge status, as a number.
	ChargeStatusNumber int64 `json:"charge_status_number,omitempty"`

	// This node's NVRAM device name with path.
	Device string `json:"device,omitempty"`

	// This node has NVRAM.
	Present bool `json:"present,omitempty"`

	// This node has NVRAM with flash storage.
	PresentFlash bool `json:"present_flash,omitempty"`

	// The size of the NVRAM, in bytes.
	PresentSize int64 `json:"present_size,omitempty"`

	// This node's NVRAM type.
	PresentType string `json:"present_type,omitempty"`

	// This node's current ship mode state for NVRAM batteries.
	ShipMode int64 `json:"ship_mode,omitempty"`

	// This node supports NVRAM.
	Supported bool `json:"supported,omitempty"`

	// This node supports NVRAM with flash storage.
	SupportedFlash bool `json:"supported_flash,omitempty"`

	// The maximum size of the NVRAM, in bytes.
	SupportedSize int64 `json:"supported_size,omitempty"`

	// This node's supported NVRAM type.
	SupportedType string `json:"supported_type,omitempty"`
}

// Validate validates this node status node nvram
func (m *NodeStatusNodeNvram) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatteries(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeStatusNodeNvram) validateBatteries(formats strfmt.Registry) error {

	if swag.IsZero(m.Batteries) { // not required
		return nil
	}

	for i := 0; i < len(m.Batteries); i++ {
		if swag.IsZero(m.Batteries[i]) { // not required
			continue
		}

		if m.Batteries[i] != nil {
			if err := m.Batteries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("batteries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusNodeNvram) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusNodeNvram) UnmarshalBinary(b []byte) error {
	var res NodeStatusNodeNvram
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
