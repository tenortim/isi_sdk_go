// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LicenseLicense license license
// swagger:model LicenseLicense
type LicenseLicense struct {

	// Total duration in seconds for temporary licenses.
	Duration int64 `json:"duration,omitempty"`

	// Unix epoch time the license will expire.
	Expiration int64 `json:"expiration,omitempty"`

	// Unique identifier for the license.
	// Required: true
	ID *string `json:"id"`

	// Name of the licensed feature.
	// Required: true
	Name *string `json:"name"`

	// Current status of the license.
	// Required: true
	// Enum: [Activated Evaluation Expired Inactive Unknown]
	Status *string `json:"status"`
}

// Validate validates this license license
func (m *LicenseLicense) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LicenseLicense) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *LicenseLicense) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var licenseLicenseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Activated","Evaluation","Expired","Inactive","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		licenseLicenseTypeStatusPropEnum = append(licenseLicenseTypeStatusPropEnum, v)
	}
}

const (

	// LicenseLicenseStatusActivated captures enum value "Activated"
	LicenseLicenseStatusActivated string = "Activated"

	// LicenseLicenseStatusEvaluation captures enum value "Evaluation"
	LicenseLicenseStatusEvaluation string = "Evaluation"

	// LicenseLicenseStatusExpired captures enum value "Expired"
	LicenseLicenseStatusExpired string = "Expired"

	// LicenseLicenseStatusInactive captures enum value "Inactive"
	LicenseLicenseStatusInactive string = "Inactive"

	// LicenseLicenseStatusUnknown captures enum value "Unknown"
	LicenseLicenseStatusUnknown string = "Unknown"
)

// prop value enum
func (m *LicenseLicense) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, licenseLicenseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LicenseLicense) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LicenseLicense) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LicenseLicense) UnmarshalBinary(b []byte) error {
	var res LicenseLicense
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
