// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragepoolStatusUnhealthyItemDiskpool storagepool status unhealthy item diskpool
// swagger:model StoragepoolStatusUnhealthyItemDiskpool
type StoragepoolStatusUnhealthyItemDiskpool struct {

	// The drives that are part of this disk pool.
	// Required: true
	Drives []*StoragepoolStatusUnprovisionedItem `json:"drives"`

	// The system ID given to the disk pool.
	// Required: true
	ID *int64 `json:"id"`

	// The disk pool name.
	// Required: true
	Name *string `json:"name"`

	// The system ID of the disk pool's node pool, if it is in a node pool.
	NodepoolID int64 `json:"nodepool_id,omitempty"`

	// The protection policy for the disk pool.
	// Required: true
	ProtectionPolicy *string `json:"protection_policy"`

	// The SSDs that are part of this disk pool.
	// Required: true
	SsdDrives []*StoragepoolStatusUnprovisionedItem `json:"ssd_drives"`
}

// Validate validates this storagepool status unhealthy item diskpool
func (m *StoragepoolStatusUnhealthyItemDiskpool) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDrives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtectionPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsdDrives(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragepoolStatusUnhealthyItemDiskpool) validateDrives(formats strfmt.Registry) error {

	if err := validate.Required("drives", "body", m.Drives); err != nil {
		return err
	}

	for i := 0; i < len(m.Drives); i++ {
		if swag.IsZero(m.Drives[i]) { // not required
			continue
		}

		if m.Drives[i] != nil {
			if err := m.Drives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemDiskpool) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemDiskpool) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemDiskpool) validateProtectionPolicy(formats strfmt.Registry) error {

	if err := validate.Required("protection_policy", "body", m.ProtectionPolicy); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemDiskpool) validateSsdDrives(formats strfmt.Registry) error {

	if err := validate.Required("ssd_drives", "body", m.SsdDrives); err != nil {
		return err
	}

	for i := 0; i < len(m.SsdDrives); i++ {
		if swag.IsZero(m.SsdDrives[i]) { // not required
			continue
		}

		if m.SsdDrives[i] != nil {
			if err := m.SsdDrives[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ssd_drives" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragepoolStatusUnhealthyItemDiskpool) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragepoolStatusUnhealthyItemDiskpool) UnmarshalBinary(b []byte) error {
	var res StoragepoolStatusUnhealthyItemDiskpool
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
