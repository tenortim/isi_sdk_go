// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsNlmSessionsSession nfs nlm sessions session
// swagger:model NfsNlmSessionsSession
type NfsNlmSessionsSession struct {

	// delegates
	Delegates []int64 `json:"delegates"`

	// The sort of host that this entry represents
	// Enum: [client server reverse expired]
	HostType string `json:"host_type,omitempty"`

	// The host being monitored
	Hostname string `json:"hostname,omitempty"`

	// Whether or not the client is actively being monitored
	IsActive bool `json:"is_active,omitempty"`

	// Unix time in seconds that the client was last modified (monitored or unmonitored)
	LastModified int64 `json:"last_modified,omitempty"`

	// An IP address for which NSM has client records
	NodeIP string `json:"node_ip,omitempty"`

	// Number of times we will attempt to notify this client before giving up
	NotifyAttemptsRemaining int64 `json:"notify_attempts_remaining,omitempty"`

	// Last error recieved attempting to notify this client
	NotifyError string `json:"notify_error,omitempty"`

	// Unix time in seconds when we last attempted to notify this clients
	NotifyLastAttempt int64 `json:"notify_last_attempt,omitempty"`
}

// Validate validates this nfs nlm sessions session
func (m *NfsNlmSessionsSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nfsNlmSessionsSessionTypeHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["client","server","reverse","expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nfsNlmSessionsSessionTypeHostTypePropEnum = append(nfsNlmSessionsSessionTypeHostTypePropEnum, v)
	}
}

const (

	// NfsNlmSessionsSessionHostTypeClient captures enum value "client"
	NfsNlmSessionsSessionHostTypeClient string = "client"

	// NfsNlmSessionsSessionHostTypeServer captures enum value "server"
	NfsNlmSessionsSessionHostTypeServer string = "server"

	// NfsNlmSessionsSessionHostTypeReverse captures enum value "reverse"
	NfsNlmSessionsSessionHostTypeReverse string = "reverse"

	// NfsNlmSessionsSessionHostTypeExpired captures enum value "expired"
	NfsNlmSessionsSessionHostTypeExpired string = "expired"
)

// prop value enum
func (m *NfsNlmSessionsSession) validateHostTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nfsNlmSessionsSessionTypeHostTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NfsNlmSessionsSession) validateHostType(formats strfmt.Registry) error {

	if swag.IsZero(m.HostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateHostTypeEnum("host_type", "body", m.HostType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsNlmSessionsSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsNlmSessionsSession) UnmarshalBinary(b []byte) error {
	var res NfsNlmSessionsSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
