// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// SyncJobWorker sync job worker
// swagger:model SyncJobWorker
type SyncJobWorker struct {

	// Whether there is a connection between the source and target.
	Connected bool `json:"connected,omitempty"`

	// The last time a network split occurred.
	LastSplit int64 `json:"last_split,omitempty"`

	// The last time the worker performed work.
	LastWork int64 `json:"last_work,omitempty"`

	// The LIN being worked on.
	Lin int64 `json:"lin,omitempty"`

	// The lnn the worker is assigned to run on.
	Lnn int64 `json:"lnn,omitempty"`

	// The process ID of the worker.
	ProcessID int64 `json:"process_id,omitempty"`

	// The source host for this worker.
	SourceHost string `json:"source_host,omitempty"`

	// The target host for this worker.
	TargetHost string `json:"target_host,omitempty"`

	// The ID of the worker.
	WorkerID int64 `json:"worker_id,omitempty"`
}

// Validate validates this sync job worker
func (m *SyncJobWorker) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SyncJobWorker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncJobWorker) UnmarshalBinary(b []byte) error {
	var res SyncJobWorker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
