// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GroupnetSubnetExtended groupnet subnet extended
// swagger:model GroupnetSubnetExtended
type GroupnetSubnetExtended struct {
	GroupnetSubnet

	// IP address format.
	// Enum: [ipv4 ipv6]
	AddrFamily string `json:"addr_family,omitempty"`

	// The base IP address.
	BaseAddr string `json:"base_addr,omitempty"`

	// Name of the groupnet this subnet belongs to.
	Groupnet string `json:"groupnet,omitempty"`

	// Unique Subnet ID.
	ID string `json:"id,omitempty"`

	// Name of the pools in the subnet.
	Pools []string `json:"pools"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *GroupnetSubnetExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GroupnetSubnet
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GroupnetSubnet = aO0

	// AO1
	var dataAO1 struct {
		AddrFamily string `json:"addr_family,omitempty"`

		BaseAddr string `json:"base_addr,omitempty"`

		Groupnet string `json:"groupnet,omitempty"`

		ID string `json:"id,omitempty"`

		Pools []string `json:"pools"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AddrFamily = dataAO1.AddrFamily

	m.BaseAddr = dataAO1.BaseAddr

	m.Groupnet = dataAO1.Groupnet

	m.ID = dataAO1.ID

	m.Pools = dataAO1.Pools

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m GroupnetSubnetExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.GroupnetSubnet)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AddrFamily string `json:"addr_family,omitempty"`

		BaseAddr string `json:"base_addr,omitempty"`

		Groupnet string `json:"groupnet,omitempty"`

		ID string `json:"id,omitempty"`

		Pools []string `json:"pools"`
	}

	dataAO1.AddrFamily = m.AddrFamily

	dataAO1.BaseAddr = m.BaseAddr

	dataAO1.Groupnet = m.Groupnet

	dataAO1.ID = m.ID

	dataAO1.Pools = m.Pools

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this groupnet subnet extended
func (m *GroupnetSubnetExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GroupnetSubnet
	if err := m.GroupnetSubnet.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAddrFamily(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var groupnetSubnetExtendedTypeAddrFamilyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ipv4","ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		groupnetSubnetExtendedTypeAddrFamilyPropEnum = append(groupnetSubnetExtendedTypeAddrFamilyPropEnum, v)
	}
}

// property enum
func (m *GroupnetSubnetExtended) validateAddrFamilyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, groupnetSubnetExtendedTypeAddrFamilyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GroupnetSubnetExtended) validateAddrFamily(formats strfmt.Registry) error {

	if swag.IsZero(m.AddrFamily) { // not required
		return nil
	}

	// value enum
	if err := m.validateAddrFamilyEnum("addr_family", "body", m.AddrFamily); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GroupnetSubnetExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GroupnetSubnetExtended) UnmarshalBinary(b []byte) error {
	var res GroupnetSubnetExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
