// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragepoolSettingsExtended storagepool settings extended
// swagger:model StoragepoolSettingsExtended
type StoragepoolSettingsExtended struct {

	// Automatically manage IO optimization settings on files.
	// Enum: [all files_at_default none]
	AutomaticallyManageIoOptimization string `json:"automatically_manage_io_optimization,omitempty"`

	// Automatically manage protection settings on files.
	// Enum: [all files_at_default none]
	AutomaticallyManageProtection string `json:"automatically_manage_protection,omitempty"`

	// Optimize namespace operations by storing metadata on SSDs.
	GlobalNamespaceAccelerationEnabled bool `json:"global_namespace_acceleration_enabled,omitempty"`

	// Automatically add additional protection level to all directories.
	ProtectDirectoriesOneLevelHigher bool `json:"protect_directories_one_level_higher,omitempty"`

	// Spill writes into other pools as needed.
	SpilloverEnabled bool `json:"spillover_enabled,omitempty"`

	// Target pool for spilled writes.
	SpilloverTarget *StoragepoolSettingsSpilloverTarget `json:"spillover_target,omitempty"`

	// The L3 Cache default enabled state. This specifies whether L3 Cache should be enabled on new node pools
	SsdL3CacheDefaultEnabled bool `json:"ssd_l3_cache_default_enabled,omitempty"`

	// Deny writes into reserved virtual hot spare space.
	VirtualHotSpareDenyWrites bool `json:"virtual_hot_spare_deny_writes,omitempty"`

	// Hide reserved virtual hot spare space from free space counts.
	VirtualHotSpareHideSpare bool `json:"virtual_hot_spare_hide_spare,omitempty"`

	// The number of drives to reserve for the virtual hot spare, from 0-4.
	// Maximum: 4
	// Minimum: 0
	VirtualHotSpareLimitDrives *int64 `json:"virtual_hot_spare_limit_drives,omitempty"`

	// The percent space to reserve for the virtual hot spare, from 0-20.
	// Maximum: 20
	// Minimum: 0
	VirtualHotSpareLimitPercent *int64 `json:"virtual_hot_spare_limit_percent,omitempty"`
}

// Validate validates this storagepool settings extended
func (m *StoragepoolSettingsExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutomaticallyManageIoOptimization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutomaticallyManageProtection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpilloverTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualHotSpareLimitDrives(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVirtualHotSpareLimitPercent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var storagepoolSettingsExtendedTypeAutomaticallyManageIoOptimizationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","files_at_default","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagepoolSettingsExtendedTypeAutomaticallyManageIoOptimizationPropEnum = append(storagepoolSettingsExtendedTypeAutomaticallyManageIoOptimizationPropEnum, v)
	}
}

const (

	// StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationAll captures enum value "all"
	StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationAll string = "all"

	// StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationFilesAtDefault captures enum value "files_at_default"
	StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationFilesAtDefault string = "files_at_default"

	// StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationNone captures enum value "none"
	StoragepoolSettingsExtendedAutomaticallyManageIoOptimizationNone string = "none"
)

// prop value enum
func (m *StoragepoolSettingsExtended) validateAutomaticallyManageIoOptimizationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagepoolSettingsExtendedTypeAutomaticallyManageIoOptimizationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragepoolSettingsExtended) validateAutomaticallyManageIoOptimization(formats strfmt.Registry) error {

	if swag.IsZero(m.AutomaticallyManageIoOptimization) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutomaticallyManageIoOptimizationEnum("automatically_manage_io_optimization", "body", m.AutomaticallyManageIoOptimization); err != nil {
		return err
	}

	return nil
}

var storagepoolSettingsExtendedTypeAutomaticallyManageProtectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","files_at_default","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagepoolSettingsExtendedTypeAutomaticallyManageProtectionPropEnum = append(storagepoolSettingsExtendedTypeAutomaticallyManageProtectionPropEnum, v)
	}
}

const (

	// StoragepoolSettingsExtendedAutomaticallyManageProtectionAll captures enum value "all"
	StoragepoolSettingsExtendedAutomaticallyManageProtectionAll string = "all"

	// StoragepoolSettingsExtendedAutomaticallyManageProtectionFilesAtDefault captures enum value "files_at_default"
	StoragepoolSettingsExtendedAutomaticallyManageProtectionFilesAtDefault string = "files_at_default"

	// StoragepoolSettingsExtendedAutomaticallyManageProtectionNone captures enum value "none"
	StoragepoolSettingsExtendedAutomaticallyManageProtectionNone string = "none"
)

// prop value enum
func (m *StoragepoolSettingsExtended) validateAutomaticallyManageProtectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagepoolSettingsExtendedTypeAutomaticallyManageProtectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragepoolSettingsExtended) validateAutomaticallyManageProtection(formats strfmt.Registry) error {

	if swag.IsZero(m.AutomaticallyManageProtection) { // not required
		return nil
	}

	// value enum
	if err := m.validateAutomaticallyManageProtectionEnum("automatically_manage_protection", "body", m.AutomaticallyManageProtection); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolSettingsExtended) validateSpilloverTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.SpilloverTarget) { // not required
		return nil
	}

	if m.SpilloverTarget != nil {
		if err := m.SpilloverTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("spillover_target")
			}
			return err
		}
	}

	return nil
}

func (m *StoragepoolSettingsExtended) validateVirtualHotSpareLimitDrives(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualHotSpareLimitDrives) { // not required
		return nil
	}

	if err := validate.MinimumInt("virtual_hot_spare_limit_drives", "body", int64(*m.VirtualHotSpareLimitDrives), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("virtual_hot_spare_limit_drives", "body", int64(*m.VirtualHotSpareLimitDrives), 4, false); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolSettingsExtended) validateVirtualHotSpareLimitPercent(formats strfmt.Registry) error {

	if swag.IsZero(m.VirtualHotSpareLimitPercent) { // not required
		return nil
	}

	if err := validate.MinimumInt("virtual_hot_spare_limit_percent", "body", int64(*m.VirtualHotSpareLimitPercent), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("virtual_hot_spare_limit_percent", "body", int64(*m.VirtualHotSpareLimitPercent), 20, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragepoolSettingsExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragepoolSettingsExtended) UnmarshalBinary(b []byte) error {
	var res StoragepoolSettingsExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
