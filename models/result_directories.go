// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ResultDirectories result directories
// swagger:model ResultDirectories
type ResultDirectories struct {

	// User attribute count.
	// Required: true
	AttributeCount *int64 `json:"attribute_count"`

	// Directory depth.
	// Required: true
	DirDepth *int64 `json:"dir_depth"`

	// Disk usage for current directory.
	// Required: true
	DirUsage *ResultDirectoriesTotalUsage `json:"dir_usage"`

	// Directory path information from root to current directory.
	// Required: true
	PathParts []string `json:"path_parts"`

	// Disk usage from root.
	// Required: true
	TotalUsage *ResultDirectoriesTotalUsage `json:"total_usage"`

	// Disk usage for all of immediate children of the current directory.
	// Required: true
	UsageData []*ResultDirectoriesUsageDataItem `json:"usage_data"`
}

// Validate validates this result directories
func (m *ResultDirectories) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttributeCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirDepth(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePathParts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalUsage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsageData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ResultDirectories) validateAttributeCount(formats strfmt.Registry) error {

	if err := validate.Required("attribute_count", "body", m.AttributeCount); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectories) validateDirDepth(formats strfmt.Registry) error {

	if err := validate.Required("dir_depth", "body", m.DirDepth); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectories) validateDirUsage(formats strfmt.Registry) error {

	if err := validate.Required("dir_usage", "body", m.DirUsage); err != nil {
		return err
	}

	if m.DirUsage != nil {
		if err := m.DirUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dir_usage")
			}
			return err
		}
	}

	return nil
}

func (m *ResultDirectories) validatePathParts(formats strfmt.Registry) error {

	if err := validate.Required("path_parts", "body", m.PathParts); err != nil {
		return err
	}

	return nil
}

func (m *ResultDirectories) validateTotalUsage(formats strfmt.Registry) error {

	if err := validate.Required("total_usage", "body", m.TotalUsage); err != nil {
		return err
	}

	if m.TotalUsage != nil {
		if err := m.TotalUsage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("total_usage")
			}
			return err
		}
	}

	return nil
}

func (m *ResultDirectories) validateUsageData(formats strfmt.Registry) error {

	if err := validate.Required("usage_data", "body", m.UsageData); err != nil {
		return err
	}

	for i := 0; i < len(m.UsageData); i++ {
		if swag.IsZero(m.UsageData[i]) { // not required
			continue
		}

		if m.UsageData[i] != nil {
			if err := m.UsageData[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("usage_data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ResultDirectories) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ResultDirectories) UnmarshalBinary(b []byte) error {
	var res ResultDirectories
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
