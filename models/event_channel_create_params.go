// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventChannelCreateParams event channel create params
// swagger:model EventChannelCreateParams
type EventChannelCreateParams struct {
	EventChannelExtended

	// Channel name,  may not contain /, max length 254.
	// Required: true
	Name *string `json:"name"`

	// The mechanism used by the channel
	// Required: true
	// Enum: [connectemc smtp snmp heartbeat]
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EventChannelCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventChannelExtended
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventChannelExtended = aO0

	// AO1
	var dataAO1 struct {
		Name *string `json:"name"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Name = dataAO1.Name

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EventChannelCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EventChannelExtended)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Name *string `json:"name"`

		Type *string `json:"type"`
	}

	dataAO1.Name = m.Name

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event channel create params
func (m *EventChannelCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventChannelExtended
	if err := m.EventChannelExtended.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventChannelCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var eventChannelCreateParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connectemc","smtp","snmp","heartbeat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventChannelCreateParamsTypeTypePropEnum = append(eventChannelCreateParamsTypeTypePropEnum, v)
	}
}

// property enum
func (m *EventChannelCreateParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventChannelCreateParamsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventChannelCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventChannelCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventChannelCreateParams) UnmarshalBinary(b []byte) error {
	var res EventChannelCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
