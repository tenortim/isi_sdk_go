// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthGroupCreateParams auth group create params
// swagger:model AuthGroupCreateParams
type AuthGroupCreateParams struct {
	AuthGroup

	// Specifies the members of the group.
	Members []*GroupMember `json:"members"`

	// Specifies the group name.
	// Required: true
	Name *string `json:"name"`

	// Specifies the security identifier.
	Sid string `json:"sid,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *AuthGroupCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 AuthGroup
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.AuthGroup = aO0

	// AO1
	var dataAO1 struct {
		Members []*GroupMember `json:"members"`

		Name *string `json:"name"`

		Sid string `json:"sid,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Members = dataAO1.Members

	m.Name = dataAO1.Name

	m.Sid = dataAO1.Sid

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m AuthGroupCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.AuthGroup)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Members []*GroupMember `json:"members"`

		Name *string `json:"name"`

		Sid string `json:"sid,omitempty"`
	}

	dataAO1.Members = m.Members

	dataAO1.Name = m.Name

	dataAO1.Sid = m.Sid

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this auth group create params
func (m *AuthGroupCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with AuthGroup
	if err := m.AuthGroup.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthGroupCreateParams) validateMembers(formats strfmt.Registry) error {

	if swag.IsZero(m.Members) { // not required
		return nil
	}

	for i := 0; i < len(m.Members); i++ {
		if swag.IsZero(m.Members[i]) { // not required
			continue
		}

		if m.Members[i] != nil {
			if err := m.Members[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("members" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *AuthGroupCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthGroupCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthGroupCreateParams) UnmarshalBinary(b []byte) error {
	var res AuthGroupCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
