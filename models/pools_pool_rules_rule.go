// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PoolsPoolRulesRule pools pool rules rule
// swagger:model PoolsPoolRulesRule
type PoolsPoolRulesRule struct {

	// Description for the provisioning rule.
	// Required: true
	// Max Length: 128
	Description *string `json:"description"`

	// Name of the groupnet this rule belongs to
	// Required: true
	Groupnet *string `json:"groupnet"`

	// Unique rule ID.
	// Required: true
	ID *string `json:"id"`

	// Interface name the provisioning rule applies to.
	// Required: true
	Iface *string `json:"iface"`

	// Name of the provisioning rule.
	// Required: true
	// Max Length: 32
	Name *string `json:"name"`

	// Node type the provisioning rule applies to.
	// Required: true
	// Enum: [any storage accelerator storage-i accelerator-i backup-accelerator]
	NodeType *string `json:"node_type"`

	// Name of the pool this rule belongs to.
	// Required: true
	Pool *string `json:"pool"`

	// Name of the subnet this rule belongs to.
	// Required: true
	Subnet *string `json:"subnet"`
}

// Validate validates this pools pool rules rule
func (m *PoolsPoolRulesRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIface(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PoolsPoolRulesRule) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 128); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validateGroupnet(formats strfmt.Registry) error {

	if err := validate.Required("groupnet", "body", m.Groupnet); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validateIface(formats strfmt.Registry) error {

	if err := validate.Required("iface", "body", m.Iface); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 32); err != nil {
		return err
	}

	return nil
}

var poolsPoolRulesRuleTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["any","storage","accelerator","storage-i","accelerator-i","backup-accelerator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		poolsPoolRulesRuleTypeNodeTypePropEnum = append(poolsPoolRulesRuleTypeNodeTypePropEnum, v)
	}
}

const (

	// PoolsPoolRulesRuleNodeTypeAny captures enum value "any"
	PoolsPoolRulesRuleNodeTypeAny string = "any"

	// PoolsPoolRulesRuleNodeTypeStorage captures enum value "storage"
	PoolsPoolRulesRuleNodeTypeStorage string = "storage"

	// PoolsPoolRulesRuleNodeTypeAccelerator captures enum value "accelerator"
	PoolsPoolRulesRuleNodeTypeAccelerator string = "accelerator"

	// PoolsPoolRulesRuleNodeTypeStorageI captures enum value "storage-i"
	PoolsPoolRulesRuleNodeTypeStorageI string = "storage-i"

	// PoolsPoolRulesRuleNodeTypeAcceleratorI captures enum value "accelerator-i"
	PoolsPoolRulesRuleNodeTypeAcceleratorI string = "accelerator-i"

	// PoolsPoolRulesRuleNodeTypeBackupAccelerator captures enum value "backup-accelerator"
	PoolsPoolRulesRuleNodeTypeBackupAccelerator string = "backup-accelerator"
)

// prop value enum
func (m *PoolsPoolRulesRule) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, poolsPoolRulesRuleTypeNodeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PoolsPoolRulesRule) validateNodeType(formats strfmt.Registry) error {

	if err := validate.Required("node_type", "body", m.NodeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNodeTypeEnum("node_type", "body", *m.NodeType); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validatePool(formats strfmt.Registry) error {

	if err := validate.Required("pool", "body", m.Pool); err != nil {
		return err
	}

	return nil
}

func (m *PoolsPoolRulesRule) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PoolsPoolRulesRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PoolsPoolRulesRule) UnmarshalBinary(b []byte) error {
	var res PoolsPoolRulesRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
