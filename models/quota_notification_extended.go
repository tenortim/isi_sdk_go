// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaNotificationExtended quota notification extended
// swagger:model QuotaNotificationExtended
type QuotaNotificationExtended struct {
	QuotaNotification

	// Send alert when rule matches.
	// Required: true
	ActionAlert *bool `json:"action_alert"`

	// Email quota domain owner when rule matches.
	// Required: true
	ActionEmailOwner *bool `json:"action_email_owner"`

	// The condition detected.
	// Required: true
	// Enum: [exceeded denied violated expired]
	Condition *string `json:"condition"`

	// The system ID given to the rule.
	// Required: true
	ID *string `json:"id"`

	// The quota threshold detected.
	// Required: true
	// Enum: [hard soft advisory]
	Threshold *string `json:"threshold"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *QuotaNotificationExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 QuotaNotification
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.QuotaNotification = aO0

	// AO1
	var dataAO1 struct {
		ActionAlert *bool `json:"action_alert"`

		ActionEmailOwner *bool `json:"action_email_owner"`

		Condition *string `json:"condition"`

		ID *string `json:"id"`

		Threshold *string `json:"threshold"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ActionAlert = dataAO1.ActionAlert

	m.ActionEmailOwner = dataAO1.ActionEmailOwner

	m.Condition = dataAO1.Condition

	m.ID = dataAO1.ID

	m.Threshold = dataAO1.Threshold

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m QuotaNotificationExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.QuotaNotification)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ActionAlert *bool `json:"action_alert"`

		ActionEmailOwner *bool `json:"action_email_owner"`

		Condition *string `json:"condition"`

		ID *string `json:"id"`

		Threshold *string `json:"threshold"`
	}

	dataAO1.ActionAlert = m.ActionAlert

	dataAO1.ActionEmailOwner = m.ActionEmailOwner

	dataAO1.Condition = m.Condition

	dataAO1.ID = m.ID

	dataAO1.Threshold = m.Threshold

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this quota notification extended
func (m *QuotaNotificationExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with QuotaNotification
	if err := m.QuotaNotification.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionAlert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActionEmailOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThreshold(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaNotificationExtended) validateActionAlert(formats strfmt.Registry) error {

	if err := validate.Required("action_alert", "body", m.ActionAlert); err != nil {
		return err
	}

	return nil
}

func (m *QuotaNotificationExtended) validateActionEmailOwner(formats strfmt.Registry) error {

	if err := validate.Required("action_email_owner", "body", m.ActionEmailOwner); err != nil {
		return err
	}

	return nil
}

var quotaNotificationExtendedTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["exceeded","denied","violated","expired"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaNotificationExtendedTypeConditionPropEnum = append(quotaNotificationExtendedTypeConditionPropEnum, v)
	}
}

// property enum
func (m *QuotaNotificationExtended) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, quotaNotificationExtendedTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QuotaNotificationExtended) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", *m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *QuotaNotificationExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var quotaNotificationExtendedTypeThresholdPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["hard","soft","advisory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaNotificationExtendedTypeThresholdPropEnum = append(quotaNotificationExtendedTypeThresholdPropEnum, v)
	}
}

// property enum
func (m *QuotaNotificationExtended) validateThresholdEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, quotaNotificationExtendedTypeThresholdPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QuotaNotificationExtended) validateThreshold(formats strfmt.Registry) error {

	if err := validate.Required("threshold", "body", m.Threshold); err != nil {
		return err
	}

	// value enum
	if err := m.validateThresholdEnum("threshold", "body", *m.Threshold); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaNotificationExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaNotificationExtended) UnmarshalBinary(b []byte) error {
	var res QuotaNotificationExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
