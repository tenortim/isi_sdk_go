// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntivirusServer An ICAP server that contains virus definitions.
// swagger:model AntivirusServer
type AntivirusServer struct {

	// A description for the server.
	Description string `json:"description,omitempty"`

	// Whether the server is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// The icap url for the server.  This should have a format of: icap://host.domain:port/path
	// Min Length: 1
	URL string `json:"url,omitempty"`
}

// Validate validates this antivirus server
func (m *AntivirusServer) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntivirusServer) validateURL(formats strfmt.Registry) error {

	if swag.IsZero(m.URL) { // not required
		return nil
	}

	if err := validate.MinLength("url", "body", string(m.URL), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntivirusServer) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntivirusServer) UnmarshalBinary(b []byte) error {
	var res AntivirusServer
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
