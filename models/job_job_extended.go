// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobJobExtended job job extended
// swagger:model JobJobExtended
type JobJobExtended struct {

	// State to which the job is transitioning; if control_state is identical to state, the job's state is stable.
	// Enum: [running paused_user paused_system paused_policy paused_priority cancelled_user cancelled_system failed succeeded unknown]
	ControlState string `json:"control_state,omitempty"`

	// The time the job was queued, in seconds since the epoch.
	// Required: true
	CreateTime *int64 `json:"create_time"`

	// The current phase of the job.
	CurrentPhase int64 `json:"current_phase,omitempty"`

	// A text representation of the job.
	Description string `json:"description,omitempty"`

	// The time the job ended, in seconds since the Epoch.
	EndTime int64 `json:"end_time,omitempty"`

	// The ID of the job.
	// Required: true
	// Minimum: 1
	ID *int64 `json:"id"`

	// The current impact of the job.
	// Required: true
	// Enum: [Low Medium High Paused]
	Impact *string `json:"impact"`

	// The set of devids working on the job.
	Participants []int64 `json:"participants"`

	// Paths for which the job was queued.
	Paths []string `json:"paths"`

	// Current impact policy of the job.
	// Required: true
	Policy *string `json:"policy"`

	// Current priority of the job; lower numbers preempt higher numbers.
	// Required: true
	// Maximum: 10
	// Minimum: 1
	Priority *int64 `json:"priority"`

	// A text representation of the job's progress.
	Progress string `json:"progress,omitempty"`

	// The number of retries remaining if the job fails.
	// Required: true
	RetriesRemaining *int64 `json:"retries_remaining"`

	// The number of seconds the job has executed.
	RunningTime int64 `json:"running_time,omitempty"`

	// The time the job started, in seconds since the Epoch.
	StartTime int64 `json:"start_time,omitempty"`

	// Current state of the job.
	// Required: true
	// Enum: [running paused_user paused_system paused_policy paused_priority cancelled_user cancelled_system failed succeeded unknown]
	State *string `json:"state"`

	// The total number of phases of the job type.
	// Required: true
	TotalPhases *int64 `json:"total_phases"`

	// The job type.
	// Required: true
	Type *string `json:"type"`

	// The ID of a job for which this job is waiting.
	WaitingOn int64 `json:"waiting_on,omitempty"`

	// The reason the job is waiting.
	// Enum: [blocked_by_priority]
	WaitingReason string `json:"waiting_reason,omitempty"`
}

// Validate validates this job job extended
func (m *JobJobExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateControlState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetriesRemaining(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalPhases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWaitingReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var jobJobExtendedTypeControlStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","paused_user","paused_system","paused_policy","paused_priority","cancelled_user","cancelled_system","failed","succeeded","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobJobExtendedTypeControlStatePropEnum = append(jobJobExtendedTypeControlStatePropEnum, v)
	}
}

const (

	// JobJobExtendedControlStateRunning captures enum value "running"
	JobJobExtendedControlStateRunning string = "running"

	// JobJobExtendedControlStatePausedUser captures enum value "paused_user"
	JobJobExtendedControlStatePausedUser string = "paused_user"

	// JobJobExtendedControlStatePausedSystem captures enum value "paused_system"
	JobJobExtendedControlStatePausedSystem string = "paused_system"

	// JobJobExtendedControlStatePausedPolicy captures enum value "paused_policy"
	JobJobExtendedControlStatePausedPolicy string = "paused_policy"

	// JobJobExtendedControlStatePausedPriority captures enum value "paused_priority"
	JobJobExtendedControlStatePausedPriority string = "paused_priority"

	// JobJobExtendedControlStateCancelledUser captures enum value "cancelled_user"
	JobJobExtendedControlStateCancelledUser string = "cancelled_user"

	// JobJobExtendedControlStateCancelledSystem captures enum value "cancelled_system"
	JobJobExtendedControlStateCancelledSystem string = "cancelled_system"

	// JobJobExtendedControlStateFailed captures enum value "failed"
	JobJobExtendedControlStateFailed string = "failed"

	// JobJobExtendedControlStateSucceeded captures enum value "succeeded"
	JobJobExtendedControlStateSucceeded string = "succeeded"

	// JobJobExtendedControlStateUnknown captures enum value "unknown"
	JobJobExtendedControlStateUnknown string = "unknown"
)

// prop value enum
func (m *JobJobExtended) validateControlStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobJobExtendedTypeControlStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobJobExtended) validateControlState(formats strfmt.Registry) error {

	if swag.IsZero(m.ControlState) { // not required
		return nil
	}

	// value enum
	if err := m.validateControlStateEnum("control_state", "body", m.ControlState); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validateCreateTime(formats strfmt.Registry) error {

	if err := validate.Required("create_time", "body", m.CreateTime); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

var jobJobExtendedTypeImpactPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Low","Medium","High","Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobJobExtendedTypeImpactPropEnum = append(jobJobExtendedTypeImpactPropEnum, v)
	}
}

const (

	// JobJobExtendedImpactLow captures enum value "Low"
	JobJobExtendedImpactLow string = "Low"

	// JobJobExtendedImpactMedium captures enum value "Medium"
	JobJobExtendedImpactMedium string = "Medium"

	// JobJobExtendedImpactHigh captures enum value "High"
	JobJobExtendedImpactHigh string = "High"

	// JobJobExtendedImpactPaused captures enum value "Paused"
	JobJobExtendedImpactPaused string = "Paused"
)

// prop value enum
func (m *JobJobExtended) validateImpactEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobJobExtendedTypeImpactPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobJobExtended) validateImpact(formats strfmt.Registry) error {

	if err := validate.Required("impact", "body", m.Impact); err != nil {
		return err
	}

	// value enum
	if err := m.validateImpactEnum("impact", "body", *m.Impact); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	if err := validate.MinimumInt("priority", "body", int64(*m.Priority), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priority", "body", int64(*m.Priority), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validateRetriesRemaining(formats strfmt.Registry) error {

	if err := validate.Required("retries_remaining", "body", m.RetriesRemaining); err != nil {
		return err
	}

	return nil
}

var jobJobExtendedTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","paused_user","paused_system","paused_policy","paused_priority","cancelled_user","cancelled_system","failed","succeeded","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobJobExtendedTypeStatePropEnum = append(jobJobExtendedTypeStatePropEnum, v)
	}
}

const (

	// JobJobExtendedStateRunning captures enum value "running"
	JobJobExtendedStateRunning string = "running"

	// JobJobExtendedStatePausedUser captures enum value "paused_user"
	JobJobExtendedStatePausedUser string = "paused_user"

	// JobJobExtendedStatePausedSystem captures enum value "paused_system"
	JobJobExtendedStatePausedSystem string = "paused_system"

	// JobJobExtendedStatePausedPolicy captures enum value "paused_policy"
	JobJobExtendedStatePausedPolicy string = "paused_policy"

	// JobJobExtendedStatePausedPriority captures enum value "paused_priority"
	JobJobExtendedStatePausedPriority string = "paused_priority"

	// JobJobExtendedStateCancelledUser captures enum value "cancelled_user"
	JobJobExtendedStateCancelledUser string = "cancelled_user"

	// JobJobExtendedStateCancelledSystem captures enum value "cancelled_system"
	JobJobExtendedStateCancelledSystem string = "cancelled_system"

	// JobJobExtendedStateFailed captures enum value "failed"
	JobJobExtendedStateFailed string = "failed"

	// JobJobExtendedStateSucceeded captures enum value "succeeded"
	JobJobExtendedStateSucceeded string = "succeeded"

	// JobJobExtendedStateUnknown captures enum value "unknown"
	JobJobExtendedStateUnknown string = "unknown"
)

// prop value enum
func (m *JobJobExtended) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobJobExtendedTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobJobExtended) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validateTotalPhases(formats strfmt.Registry) error {

	if err := validate.Required("total_phases", "body", m.TotalPhases); err != nil {
		return err
	}

	return nil
}

func (m *JobJobExtended) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

var jobJobExtendedTypeWaitingReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["blocked_by_priority"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		jobJobExtendedTypeWaitingReasonPropEnum = append(jobJobExtendedTypeWaitingReasonPropEnum, v)
	}
}

const (

	// JobJobExtendedWaitingReasonBlockedByPriority captures enum value "blocked_by_priority"
	JobJobExtendedWaitingReasonBlockedByPriority string = "blocked_by_priority"
)

// prop value enum
func (m *JobJobExtended) validateWaitingReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, jobJobExtendedTypeWaitingReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *JobJobExtended) validateWaitingReason(formats strfmt.Registry) error {

	if swag.IsZero(m.WaitingReason) { // not required
		return nil
	}

	// value enum
	if err := m.validateWaitingReasonEnum("waiting_reason", "body", m.WaitingReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobJobExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobJobExtended) UnmarshalBinary(b []byte) error {
	var res JobJobExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
