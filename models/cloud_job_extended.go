// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudJobExtended cloud job extended
// swagger:model CloudJobExtended
type CloudJobExtended struct {

	// The time at which the job was completed (if applicable)
	CompletionTime int64 `json:"completion_time,omitempty"`

	// The time at which the job was created
	CreateTime int64 `json:"create_time,omitempty"`

	// A brief description of the job contents
	Description string `json:"description,omitempty"`

	// The effective state of the job (e.g,. the combination of operation_state and job_state)
	// Enum: [running paused canceled completed failed]
	EffectiveState string `json:"effective_state,omitempty"`

	// The files and filters addressed by this job
	Files *CloudJobFiles `json:"files,omitempty"`

	// The job's ID
	ID int64 `json:"id,omitempty"`

	// Information about the related job engine job if there is one
	JobEngineJob *CloudJobJobEngineJob `json:"job_engine_job,omitempty"`

	// The current state of the job
	// Enum: [running paused canceled completed failed]
	JobState string `json:"job_state,omitempty"`

	// The current state of the operation associated with the job
	// Enum: [running paused]
	OperationState string `json:"operation_state,omitempty"`

	// The last time at which the job state changed
	StateChangeTime int64 `json:"state_change_time,omitempty"`

	// The type of cloud action to be performed by this job.
	// Enum: [archive recall local-garbage-collection cloud-garbage-collection cache-writeback cache-on-access cache-invalidation restore-coi]
	Type string `json:"type,omitempty"`
}

// Validate validates this cloud job extended
func (m *CloudJobExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEffectiveState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobEngineJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudJobExtendedTypeEffectiveStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","paused","canceled","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudJobExtendedTypeEffectiveStatePropEnum = append(cloudJobExtendedTypeEffectiveStatePropEnum, v)
	}
}

const (

	// CloudJobExtendedEffectiveStateRunning captures enum value "running"
	CloudJobExtendedEffectiveStateRunning string = "running"

	// CloudJobExtendedEffectiveStatePaused captures enum value "paused"
	CloudJobExtendedEffectiveStatePaused string = "paused"

	// CloudJobExtendedEffectiveStateCanceled captures enum value "canceled"
	CloudJobExtendedEffectiveStateCanceled string = "canceled"

	// CloudJobExtendedEffectiveStateCompleted captures enum value "completed"
	CloudJobExtendedEffectiveStateCompleted string = "completed"

	// CloudJobExtendedEffectiveStateFailed captures enum value "failed"
	CloudJobExtendedEffectiveStateFailed string = "failed"
)

// prop value enum
func (m *CloudJobExtended) validateEffectiveStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudJobExtendedTypeEffectiveStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudJobExtended) validateEffectiveState(formats strfmt.Registry) error {

	if swag.IsZero(m.EffectiveState) { // not required
		return nil
	}

	// value enum
	if err := m.validateEffectiveStateEnum("effective_state", "body", m.EffectiveState); err != nil {
		return err
	}

	return nil
}

func (m *CloudJobExtended) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if m.Files != nil {
		if err := m.Files.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("files")
			}
			return err
		}
	}

	return nil
}

func (m *CloudJobExtended) validateJobEngineJob(formats strfmt.Registry) error {

	if swag.IsZero(m.JobEngineJob) { // not required
		return nil
	}

	if m.JobEngineJob != nil {
		if err := m.JobEngineJob.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("job_engine_job")
			}
			return err
		}
	}

	return nil
}

var cloudJobExtendedTypeJobStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","paused","canceled","completed","failed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudJobExtendedTypeJobStatePropEnum = append(cloudJobExtendedTypeJobStatePropEnum, v)
	}
}

const (

	// CloudJobExtendedJobStateRunning captures enum value "running"
	CloudJobExtendedJobStateRunning string = "running"

	// CloudJobExtendedJobStatePaused captures enum value "paused"
	CloudJobExtendedJobStatePaused string = "paused"

	// CloudJobExtendedJobStateCanceled captures enum value "canceled"
	CloudJobExtendedJobStateCanceled string = "canceled"

	// CloudJobExtendedJobStateCompleted captures enum value "completed"
	CloudJobExtendedJobStateCompleted string = "completed"

	// CloudJobExtendedJobStateFailed captures enum value "failed"
	CloudJobExtendedJobStateFailed string = "failed"
)

// prop value enum
func (m *CloudJobExtended) validateJobStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudJobExtendedTypeJobStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudJobExtended) validateJobState(formats strfmt.Registry) error {

	if swag.IsZero(m.JobState) { // not required
		return nil
	}

	// value enum
	if err := m.validateJobStateEnum("job_state", "body", m.JobState); err != nil {
		return err
	}

	return nil
}

var cloudJobExtendedTypeOperationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["running","paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudJobExtendedTypeOperationStatePropEnum = append(cloudJobExtendedTypeOperationStatePropEnum, v)
	}
}

const (

	// CloudJobExtendedOperationStateRunning captures enum value "running"
	CloudJobExtendedOperationStateRunning string = "running"

	// CloudJobExtendedOperationStatePaused captures enum value "paused"
	CloudJobExtendedOperationStatePaused string = "paused"
)

// prop value enum
func (m *CloudJobExtended) validateOperationStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudJobExtendedTypeOperationStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudJobExtended) validateOperationState(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationStateEnum("operation_state", "body", m.OperationState); err != nil {
		return err
	}

	return nil
}

var cloudJobExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["archive","recall","local-garbage-collection","cloud-garbage-collection","cache-writeback","cache-on-access","cache-invalidation","restore-coi"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudJobExtendedTypeTypePropEnum = append(cloudJobExtendedTypeTypePropEnum, v)
	}
}

const (

	// CloudJobExtendedTypeArchive captures enum value "archive"
	CloudJobExtendedTypeArchive string = "archive"

	// CloudJobExtendedTypeRecall captures enum value "recall"
	CloudJobExtendedTypeRecall string = "recall"

	// CloudJobExtendedTypeLocalGarbageCollection captures enum value "local-garbage-collection"
	CloudJobExtendedTypeLocalGarbageCollection string = "local-garbage-collection"

	// CloudJobExtendedTypeCloudGarbageCollection captures enum value "cloud-garbage-collection"
	CloudJobExtendedTypeCloudGarbageCollection string = "cloud-garbage-collection"

	// CloudJobExtendedTypeCacheWriteback captures enum value "cache-writeback"
	CloudJobExtendedTypeCacheWriteback string = "cache-writeback"

	// CloudJobExtendedTypeCacheOnAccess captures enum value "cache-on-access"
	CloudJobExtendedTypeCacheOnAccess string = "cache-on-access"

	// CloudJobExtendedTypeCacheInvalidation captures enum value "cache-invalidation"
	CloudJobExtendedTypeCacheInvalidation string = "cache-invalidation"

	// CloudJobExtendedTypeRestoreCoi captures enum value "restore-coi"
	CloudJobExtendedTypeRestoreCoi string = "restore-coi"
)

// prop value enum
func (m *CloudJobExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudJobExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudJobExtended) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudJobExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudJobExtended) UnmarshalBinary(b []byte) error {
	var res CloudJobExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
