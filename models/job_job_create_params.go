// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobJobCreateParams job job create params
// swagger:model JobJobCreateParams
type JobJobCreateParams struct {

	// Whether or not to queue the job if one of the same type is already running or queued.
	AllowDup bool `json:"allow_dup,omitempty"`

	// avscan params
	AvscanParams *JobJobAvscanParams `json:"avscan_params,omitempty"`

	// changelistcreate params
	ChangelistcreateParams *JobJobChangelistcreateParams `json:"changelistcreate_params,omitempty"`

	// domainmark params
	DomainmarkParams *JobJobDomainmarkParams `json:"domainmark_params,omitempty"`

	// For jobs which take paths, the IFS paths to pass to the job.
	// Min Items: 1
	Paths []string `json:"paths"`

	// Impact policy of this job instance.
	Policy string `json:"policy,omitempty"`

	// prepair params
	PrepairParams *JobJobPrepairParams `json:"prepair_params,omitempty"`

	// Priority of this job instance; lower numbers preempt higher numbers.
	// Maximum: 10
	// Minimum: 1
	Priority int64 `json:"priority,omitempty"`

	// smartpoolstree params
	SmartpoolstreeParams *JobJobSmartpoolstreeParams `json:"smartpoolstree_params,omitempty"`

	// snaprevert params
	SnaprevertParams *JobJobSnaprevertParams `json:"snaprevert_params,omitempty"`

	// Job type to queue.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this job job create params
func (m *JobJobCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvscanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangelistcreateParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDomainmarkParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrepairParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartpoolstreeParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnaprevertParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobJobCreateParams) validateAvscanParams(formats strfmt.Registry) error {

	if swag.IsZero(m.AvscanParams) { // not required
		return nil
	}

	if m.AvscanParams != nil {
		if err := m.AvscanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("avscan_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validateChangelistcreateParams(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangelistcreateParams) { // not required
		return nil
	}

	if m.ChangelistcreateParams != nil {
		if err := m.ChangelistcreateParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("changelistcreate_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validateDomainmarkParams(formats strfmt.Registry) error {

	if swag.IsZero(m.DomainmarkParams) { // not required
		return nil
	}

	if m.DomainmarkParams != nil {
		if err := m.DomainmarkParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("domainmark_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	iPathsSize := int64(len(m.Paths))

	if err := validate.MinItems("paths", "body", iPathsSize, 1); err != nil {
		return err
	}

	return nil
}

func (m *JobJobCreateParams) validatePrepairParams(formats strfmt.Registry) error {

	if swag.IsZero(m.PrepairParams) { // not required
		return nil
	}

	if m.PrepairParams != nil {
		if err := m.PrepairParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("prepair_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validatePriority(formats strfmt.Registry) error {

	if swag.IsZero(m.Priority) { // not required
		return nil
	}

	if err := validate.MinimumInt("priority", "body", int64(m.Priority), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priority", "body", int64(m.Priority), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *JobJobCreateParams) validateSmartpoolstreeParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SmartpoolstreeParams) { // not required
		return nil
	}

	if m.SmartpoolstreeParams != nil {
		if err := m.SmartpoolstreeParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartpoolstree_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validateSnaprevertParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SnaprevertParams) { // not required
		return nil
	}

	if m.SnaprevertParams != nil {
		if err := m.SnaprevertParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snaprevert_params")
			}
			return err
		}
	}

	return nil
}

func (m *JobJobCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobJobCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobJobCreateParams) UnmarshalBinary(b []byte) error {
	var res JobJobCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
