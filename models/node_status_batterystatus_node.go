// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// NodeStatusBatterystatusNode node status batterystatus node
// swagger:model NodeStatusBatterystatusNode
type NodeStatusBatterystatusNode struct {

	// Node ID (Device Number) of this node.
	ID int64 `json:"id,omitempty"`

	// The last battery test time for battery 1.
	LastTestTime1 string `json:"last_test_time1,omitempty"`

	// The last battery test time for battery 2.
	LastTestTime2 string `json:"last_test_time2,omitempty"`

	// Logical Node Number (LNN) of this node.
	Lnn int64 `json:"lnn,omitempty"`

	// The next checkup for battery 1.
	NextTestTime1 string `json:"next_test_time1,omitempty"`

	// The next checkup for battery 2.
	NextTestTime2 string `json:"next_test_time2,omitempty"`

	// Node has battery status.
	Present bool `json:"present,omitempty"`

	// The result of the last battery test for battery 1.
	Result1 string `json:"result1,omitempty"`

	// The result of the last battery test for battery 2.
	Result2 string `json:"result2,omitempty"`

	// The status of battery 1.
	Status1 string `json:"status1,omitempty"`

	// The status of battery 2.
	Status2 string `json:"status2,omitempty"`

	// Node supports battery status.
	Supported bool `json:"supported,omitempty"`
}

// Validate validates this node status batterystatus node
func (m *NodeStatusBatterystatusNode) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusBatterystatusNode) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusBatterystatusNode) UnmarshalBinary(b []byte) error {
	var res NodeStatusBatterystatusNode
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
