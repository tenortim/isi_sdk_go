// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbSession smb session
// swagger:model SmbSession
type SmbSession struct {

	// Number of seconds since session start.
	// Required: true
	ActiveTime *int64 `json:"active_time"`

	// Client type.
	// Required: true
	ClientType *string `json:"client_type"`

	// Client internet address.
	// Required: true
	Computer *string `json:"computer"`

	// True if session is encrypted.
	// Required: true
	Encryption *bool `json:"encryption"`

	// True for guest logins.
	// Required: true
	GuestLogin *bool `json:"guest_login"`

	// The session ID.
	// Required: true
	ID *int64 `json:"id"`

	// Number of seconds since last client operation.
	// Required: true
	IDLETime *int64 `json:"idle_time"`

	// Number of files open by client.
	// Required: true
	Openfiles *int64 `json:"openfiles"`

	// Local user name.
	// Required: true
	User *string `json:"user"`
}

// Validate validates this smb session
func (m *SmbSession) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateComputer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncryption(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGuestLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDLETime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenfiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbSession) validateActiveTime(formats strfmt.Registry) error {

	if err := validate.Required("active_time", "body", m.ActiveTime); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateClientType(formats strfmt.Registry) error {

	if err := validate.Required("client_type", "body", m.ClientType); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateComputer(formats strfmt.Registry) error {

	if err := validate.Required("computer", "body", m.Computer); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateEncryption(formats strfmt.Registry) error {

	if err := validate.Required("encryption", "body", m.Encryption); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateGuestLogin(formats strfmt.Registry) error {

	if err := validate.Required("guest_login", "body", m.GuestLogin); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateIDLETime(formats strfmt.Registry) error {

	if err := validate.Required("idle_time", "body", m.IDLETime); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateOpenfiles(formats strfmt.Registry) error {

	if err := validate.Required("openfiles", "body", m.Openfiles); err != nil {
		return err
	}

	return nil
}

func (m *SmbSession) validateUser(formats strfmt.Registry) error {

	if err := validate.Required("user", "body", m.User); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbSession) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbSession) UnmarshalBinary(b []byte) error {
	var res SmbSession
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
