// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubnetsSubnetPoolStaticRoute subnets subnet pool static route
// swagger:model SubnetsSubnetPoolStaticRoute
type SubnetsSubnetPoolStaticRoute struct {

	// Address of the gateway in the format: yyy.yyy.yyy.yyy
	// Required: true
	Gateway *string `json:"gateway"`

	// Prefix length in the format: nn.
	// Required: true
	Prefixlen *int64 `json:"prefixlen"`

	// Network address in the format: xxx.xxx.xxx.xxx
	// Required: true
	Subnet *string `json:"subnet"`
}

// Validate validates this subnets subnet pool static route
func (m *SubnetsSubnetPoolStaticRoute) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrefixlen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetsSubnetPoolStaticRoute) validateGateway(formats strfmt.Registry) error {

	if err := validate.Required("gateway", "body", m.Gateway); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolStaticRoute) validatePrefixlen(formats strfmt.Registry) error {

	if err := validate.Required("prefixlen", "body", m.Prefixlen); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolStaticRoute) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetsSubnetPoolStaticRoute) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetsSubnetPoolStaticRoute) UnmarshalBinary(b []byte) error {
	var res SubnetsSubnetPoolStaticRoute
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
