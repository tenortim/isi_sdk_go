// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvidersLdapLdapItem providers ldap ldap item
// swagger:model ProvidersLdapLdapItem
type ProvidersLdapLdapItem struct {

	// Specifies the attribute name used when searching for alternate security identities.
	AlternateSecurityIdentitiesAttribute string `json:"alternate_security_identities_attribute,omitempty"`

	// If true, enables authentication and identity management through the authentication provider.
	Authentication bool `json:"authentication,omitempty"`

	// If true, connects the provider to a random server.
	BalanceServers bool `json:"balance_servers,omitempty"`

	// Specifies the root of the tree in which to search identities.
	BaseDn string `json:"base_dn,omitempty"`

	// Specifies the distinguished name for binding to the LDAP server.
	BindDn string `json:"bind_dn,omitempty"`

	// Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.
	// Enum: [simple gssapi digest-md5]
	BindMechanism string `json:"bind_mechanism,omitempty"`

	// Specifies the timeout in seconds when binding to an LDAP server.
	BindTimeout int64 `json:"bind_timeout,omitempty"`

	// Specifies the path to the root certificates file.
	CertificateAuthorityFile string `json:"certificate_authority_file,omitempty"`

	// Specifies the time in seconds between provider online checks.
	CheckOnlineInterval int64 `json:"check_online_interval,omitempty"`

	// Specifies the canonical name.
	CnAttribute string `json:"cn_attribute,omitempty"`

	// Automatically create the home directory on the first login.
	CreateHomeDirectory bool `json:"create_home_directory,omitempty"`

	// Specifies the hashed password value.
	CryptPasswordAttribute string `json:"crypt_password_attribute,omitempty"`

	// Specifies the LDAP Email attribute.
	EmailAttribute string `json:"email_attribute,omitempty"`

	// If true, enables the LDAP provider.
	Enabled bool `json:"enabled,omitempty"`

	// If true, allows the provider to enumerate groups.
	EnumerateGroups bool `json:"enumerate_groups,omitempty"`

	// If true, allows the provider to enumerate users.
	EnumerateUsers bool `json:"enumerate_users,omitempty"`

	// Specifies the list of groups that can be resolved.
	FindableGroups []string `json:"findable_groups"`

	// Specifies the list of users that can be resolved.
	FindableUsers []string `json:"findable_users"`

	// Specifies the LDAP GECOS attribute.
	GecosAttribute string `json:"gecos_attribute,omitempty"`

	// Specifies the LDAP GID attribute.
	GidAttribute string `json:"gid_attribute,omitempty"`

	// Specifies the distinguished name of the entry where LDAP searches for groups are started.
	GroupBaseDn string `json:"group_base_dn,omitempty"`

	// Specifies the domain for this provider through which groups are qualified.
	GroupDomain string `json:"group_domain,omitempty"`

	// Specifies the LDAP filter for group objects.
	GroupFilter string `json:"group_filter,omitempty"`

	// Specifies the LDAP Group Members attribute.
	GroupMembersAttribute string `json:"group_members_attribute,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	// Enum: [default base onelevel subtree children]
	GroupSearchScope string `json:"group_search_scope,omitempty"`

	// Groupnet identifier.
	Groupnet string `json:"groupnet,omitempty"`

	// Specifies the path to the home directory template.
	HomeDirectoryTemplate string `json:"home_directory_template,omitempty"`

	// Specifies the LDAP Homedir attribute.
	HomedirAttribute string `json:"homedir_attribute,omitempty"`

	// Specifies the ID of the LDAP provider.
	ID string `json:"id,omitempty"`

	// If true, continues over secure connections even if identity checks fail.
	IgnoreTLSErrors bool `json:"ignore_tls_errors,omitempty"`

	// Specifies the groups that can be viewed in the provider.
	ListableGroups []string `json:"listable_groups"`

	// Specifies the users that can be viewed in the provider.
	ListableUsers []string `json:"listable_users"`

	// Specifies the login shell path.
	LoginShell string `json:"login_shell,omitempty"`

	// Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.
	MemberOfAttribute string `json:"member_of_attribute,omitempty"`

	// Specifies the name of the LDAP provider.
	Name string `json:"name,omitempty"`

	// Specifies the LDAP UID attribute, which is used as the login name.
	NameAttribute string `json:"name_attribute,omitempty"`

	// Specifies the distinguished name of the entry where LDAP searches for netgroups are started.
	NetgroupBaseDn string `json:"netgroup_base_dn,omitempty"`

	// Specifies the LDAP filter for netgroup objects.
	NetgroupFilter string `json:"netgroup_filter,omitempty"`

	// Specifies the LDAP Netgroup Members attribute.
	NetgroupMembersAttribute string `json:"netgroup_members_attribute,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	// Enum: [default base onelevel subtree children]
	NetgroupSearchScope string `json:"netgroup_search_scope,omitempty"`

	// Specifies the LDAP Netgroup Triple attribute.
	NetgroupTripleAttribute string `json:"netgroup_triple_attribute,omitempty"`

	// Normalizes group names to lowercase before look up.
	NormalizeGroups bool `json:"normalize_groups,omitempty"`

	// Normalizes user names to lowercase before look up.
	NormalizeUsers bool `json:"normalize_users,omitempty"`

	// Specifies the LDAP NT Password attribute.
	NtPasswordAttribute string `json:"nt_password_attribute,omitempty"`

	// Specifies which NTLM versions to support for users with NTLM-compatible credentials.
	// Enum: [all v2only none]
	NtlmSupport string `json:"ntlm_support,omitempty"`

	// Specifies the provider domain.
	ProviderDomain string `json:"provider_domain,omitempty"`

	// Determines whether to continue over a non-TLS connection.
	RequireSecureConnection bool `json:"require_secure_connection,omitempty"`

	// If true, checks the provider for filtered lists of findable and unfindable users and groups.
	RestrictFindable bool `json:"restrict_findable,omitempty"`

	// If true, checks the provider for filtered lists of listable and unlistable users and groups.
	RestrictListable bool `json:"restrict_listable,omitempty"`

	// Specifies the default depth from the base DN to perform LDAP searches.
	// Enum: [base onelevel subtree children]
	SearchScope string `json:"search_scope,omitempty"`

	// Specifies the search timeout period in seconds.
	SearchTimeout int64 `json:"search_timeout,omitempty"`

	// Specifies the server URIs.
	ServerUris []string `json:"server_uris"`

	// Specifies the the LDAP Shell attribute.
	ShellAttribute string `json:"shell_attribute,omitempty"`

	// Specifies the status of the provider.
	Status string `json:"status,omitempty"`

	// If true, indicates that this provider instance was created by OneFS and cannot be removed.
	System bool `json:"system,omitempty"`

	// Specifies the the LDAP UID Number attribute.
	UIDAttribute string `json:"uid_attribute,omitempty"`

	// Specifies the groups that cannot be resolved by the provider.
	UnfindableGroups []string `json:"unfindable_groups"`

	// Specifies users that cannot be resolved by the provider.
	UnfindableUsers []string `json:"unfindable_users"`

	// Sets the LDAP Unique Group Members attribute.
	UniqueGroupMembersAttribute string `json:"unique_group_members_attribute,omitempty"`

	// Specifies a group that cannot be listed by the provider.
	UnlistableGroups []string `json:"unlistable_groups"`

	// Specifies a user that cannot be listed by the provider.
	UnlistableUsers []string `json:"unlistable_users"`

	// Specifies the distinguished name of the entry at which to start LDAP searches for users.
	UserBaseDn string `json:"user_base_dn,omitempty"`

	// Specifies the domain for this provider through which users are qualified.
	UserDomain string `json:"user_domain,omitempty"`

	// Specifies the LDAP filter for user objects.
	UserFilter string `json:"user_filter,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	// Enum: [default base onelevel subtree children]
	UserSearchScope string `json:"user_search_scope,omitempty"`
}

// Validate validates this providers ldap ldap item
func (m *ProvidersLdapLdapItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBindMechanism(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetgroupSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtlmSupport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserSearchScope(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var providersLdapLdapItemTypeBindMechanismPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["simple","gssapi","digest-md5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeBindMechanismPropEnum = append(providersLdapLdapItemTypeBindMechanismPropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemBindMechanismSimple captures enum value "simple"
	ProvidersLdapLdapItemBindMechanismSimple string = "simple"

	// ProvidersLdapLdapItemBindMechanismGssapi captures enum value "gssapi"
	ProvidersLdapLdapItemBindMechanismGssapi string = "gssapi"

	// ProvidersLdapLdapItemBindMechanismDigestMd5 captures enum value "digest-md5"
	ProvidersLdapLdapItemBindMechanismDigestMd5 string = "digest-md5"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateBindMechanismEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeBindMechanismPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateBindMechanism(formats strfmt.Registry) error {

	if swag.IsZero(m.BindMechanism) { // not required
		return nil
	}

	// value enum
	if err := m.validateBindMechanismEnum("bind_mechanism", "body", m.BindMechanism); err != nil {
		return err
	}

	return nil
}

var providersLdapLdapItemTypeGroupSearchScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","base","onelevel","subtree","children"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeGroupSearchScopePropEnum = append(providersLdapLdapItemTypeGroupSearchScopePropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemGroupSearchScopeDefault captures enum value "default"
	ProvidersLdapLdapItemGroupSearchScopeDefault string = "default"

	// ProvidersLdapLdapItemGroupSearchScopeBase captures enum value "base"
	ProvidersLdapLdapItemGroupSearchScopeBase string = "base"

	// ProvidersLdapLdapItemGroupSearchScopeOnelevel captures enum value "onelevel"
	ProvidersLdapLdapItemGroupSearchScopeOnelevel string = "onelevel"

	// ProvidersLdapLdapItemGroupSearchScopeSubtree captures enum value "subtree"
	ProvidersLdapLdapItemGroupSearchScopeSubtree string = "subtree"

	// ProvidersLdapLdapItemGroupSearchScopeChildren captures enum value "children"
	ProvidersLdapLdapItemGroupSearchScopeChildren string = "children"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateGroupSearchScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeGroupSearchScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateGroupSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupSearchScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupSearchScopeEnum("group_search_scope", "body", m.GroupSearchScope); err != nil {
		return err
	}

	return nil
}

var providersLdapLdapItemTypeNetgroupSearchScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","base","onelevel","subtree","children"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeNetgroupSearchScopePropEnum = append(providersLdapLdapItemTypeNetgroupSearchScopePropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemNetgroupSearchScopeDefault captures enum value "default"
	ProvidersLdapLdapItemNetgroupSearchScopeDefault string = "default"

	// ProvidersLdapLdapItemNetgroupSearchScopeBase captures enum value "base"
	ProvidersLdapLdapItemNetgroupSearchScopeBase string = "base"

	// ProvidersLdapLdapItemNetgroupSearchScopeOnelevel captures enum value "onelevel"
	ProvidersLdapLdapItemNetgroupSearchScopeOnelevel string = "onelevel"

	// ProvidersLdapLdapItemNetgroupSearchScopeSubtree captures enum value "subtree"
	ProvidersLdapLdapItemNetgroupSearchScopeSubtree string = "subtree"

	// ProvidersLdapLdapItemNetgroupSearchScopeChildren captures enum value "children"
	ProvidersLdapLdapItemNetgroupSearchScopeChildren string = "children"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateNetgroupSearchScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeNetgroupSearchScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateNetgroupSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.NetgroupSearchScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetgroupSearchScopeEnum("netgroup_search_scope", "body", m.NetgroupSearchScope); err != nil {
		return err
	}

	return nil
}

var providersLdapLdapItemTypeNtlmSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","v2only","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeNtlmSupportPropEnum = append(providersLdapLdapItemTypeNtlmSupportPropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemNtlmSupportAll captures enum value "all"
	ProvidersLdapLdapItemNtlmSupportAll string = "all"

	// ProvidersLdapLdapItemNtlmSupportV2only captures enum value "v2only"
	ProvidersLdapLdapItemNtlmSupportV2only string = "v2only"

	// ProvidersLdapLdapItemNtlmSupportNone captures enum value "none"
	ProvidersLdapLdapItemNtlmSupportNone string = "none"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateNtlmSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeNtlmSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateNtlmSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.NtlmSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateNtlmSupportEnum("ntlm_support", "body", m.NtlmSupport); err != nil {
		return err
	}

	return nil
}

var providersLdapLdapItemTypeSearchScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["base","onelevel","subtree","children"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeSearchScopePropEnum = append(providersLdapLdapItemTypeSearchScopePropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemSearchScopeBase captures enum value "base"
	ProvidersLdapLdapItemSearchScopeBase string = "base"

	// ProvidersLdapLdapItemSearchScopeOnelevel captures enum value "onelevel"
	ProvidersLdapLdapItemSearchScopeOnelevel string = "onelevel"

	// ProvidersLdapLdapItemSearchScopeSubtree captures enum value "subtree"
	ProvidersLdapLdapItemSearchScopeSubtree string = "subtree"

	// ProvidersLdapLdapItemSearchScopeChildren captures enum value "children"
	ProvidersLdapLdapItemSearchScopeChildren string = "children"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateSearchScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeSearchScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.SearchScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateSearchScopeEnum("search_scope", "body", m.SearchScope); err != nil {
		return err
	}

	return nil
}

var providersLdapLdapItemTypeUserSearchScopePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","base","onelevel","subtree","children"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersLdapLdapItemTypeUserSearchScopePropEnum = append(providersLdapLdapItemTypeUserSearchScopePropEnum, v)
	}
}

const (

	// ProvidersLdapLdapItemUserSearchScopeDefault captures enum value "default"
	ProvidersLdapLdapItemUserSearchScopeDefault string = "default"

	// ProvidersLdapLdapItemUserSearchScopeBase captures enum value "base"
	ProvidersLdapLdapItemUserSearchScopeBase string = "base"

	// ProvidersLdapLdapItemUserSearchScopeOnelevel captures enum value "onelevel"
	ProvidersLdapLdapItemUserSearchScopeOnelevel string = "onelevel"

	// ProvidersLdapLdapItemUserSearchScopeSubtree captures enum value "subtree"
	ProvidersLdapLdapItemUserSearchScopeSubtree string = "subtree"

	// ProvidersLdapLdapItemUserSearchScopeChildren captures enum value "children"
	ProvidersLdapLdapItemUserSearchScopeChildren string = "children"
)

// prop value enum
func (m *ProvidersLdapLdapItem) validateUserSearchScopeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersLdapLdapItemTypeUserSearchScopePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersLdapLdapItem) validateUserSearchScope(formats strfmt.Registry) error {

	if swag.IsZero(m.UserSearchScope) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserSearchScopeEnum("user_search_scope", "body", m.UserSearchScope); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvidersLdapLdapItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidersLdapLdapItem) UnmarshalBinary(b []byte) error {
	var res ProvidersLdapLdapItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
