// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettingsMappingExtendedExtended settings mapping extended extended
// swagger:model SettingsMappingExtendedExtended
type SettingsMappingExtendedExtended struct {

	// The FQDN of the source domain to map.
	// Required: true
	Domain *string `json:"domain"`

	// id
	ID string `json:"id,omitempty"`

	// The FQDN of destination domain to map to.
	// Required: true
	Mapping *string `json:"mapping"`

	// The authentication provider type.
	// Required: true
	// Enum: [ad local nis ldap]
	Type *string `json:"type"`
}

// Validate validates this settings mapping extended extended
func (m *SettingsMappingExtendedExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsMappingExtendedExtended) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *SettingsMappingExtendedExtended) validateMapping(formats strfmt.Registry) error {

	if err := validate.Required("mapping", "body", m.Mapping); err != nil {
		return err
	}

	return nil
}

var settingsMappingExtendedExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ad","local","nis","ldap"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsMappingExtendedExtendedTypeTypePropEnum = append(settingsMappingExtendedExtendedTypeTypePropEnum, v)
	}
}

const (

	// SettingsMappingExtendedExtendedTypeAd captures enum value "ad"
	SettingsMappingExtendedExtendedTypeAd string = "ad"

	// SettingsMappingExtendedExtendedTypeLocal captures enum value "local"
	SettingsMappingExtendedExtendedTypeLocal string = "local"

	// SettingsMappingExtendedExtendedTypeNis captures enum value "nis"
	SettingsMappingExtendedExtendedTypeNis string = "nis"

	// SettingsMappingExtendedExtendedTypeLdap captures enum value "ldap"
	SettingsMappingExtendedExtendedTypeLdap string = "ldap"
)

// prop value enum
func (m *SettingsMappingExtendedExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsMappingExtendedExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsMappingExtendedExtended) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsMappingExtendedExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsMappingExtendedExtended) UnmarshalBinary(b []byte) error {
	var res SettingsMappingExtendedExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
