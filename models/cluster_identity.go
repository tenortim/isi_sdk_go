// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterIdentity Unprivileged cluster information for display when logging in.
// swagger:model ClusterIdentity
type ClusterIdentity struct {

	// A description of the cluster.
	// Required: true
	Description *string `json:"description"`

	// The information displayed when a user logs in to the cluster.
	// Required: true
	Logon *ClusterIdentityLogon `json:"logon"`

	// The name of the cluster.
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this cluster identity
func (m *ClusterIdentity) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterIdentity) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *ClusterIdentity) validateLogon(formats strfmt.Registry) error {

	if err := validate.Required("logon", "body", m.Logon); err != nil {
		return err
	}

	if m.Logon != nil {
		if err := m.Logon.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logon")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterIdentity) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterIdentity) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterIdentity) UnmarshalBinary(b []byte) error {
	var res ClusterIdentity
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
