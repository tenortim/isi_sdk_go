// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaQuotaExtended quota quota extended
// swagger:model QuotaQuotaExtended
type QuotaQuotaExtended struct {

	// If true, SMB shares using the quota directory see the quota thresholds as share size.
	// Required: true
	Container *bool `json:"container"`

	// True if the quota provides enforcement, otherwise a accounting quota.
	// Required: true
	Enforced *bool `json:"enforced"`

	// The system ID given to the quota.
	// Required: true
	ID *string `json:"id"`

	// If true, quota governs snapshot data as well as head data.
	// Required: true
	IncludeSnapshots *bool `json:"include_snapshots"`

	// For user and group quotas, true if the quota is linked and controlled by a parent default-* quota. Linked quotas cannot be modified until they are unlinked.
	Linked bool `json:"linked,omitempty"`

	// Summary of notifications: 'custom' indicates one or more notification rules available from the notifications sub-resource; 'default' indicates system default rules are used; 'disabled' indicates that no notifications will be used for this quota.
	// Required: true
	// Enum: [custom default disabled]
	Notifications *string `json:"notifications"`

	// The /ifs path governed.
	// Required: true
	Path *string `json:"path"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Persona *GroupMember `json:"persona,omitempty"`

	// True if the accounting is accurate on the quota.  If false, this quota is waiting on completion of a QuotaScan job.
	// Required: true
	Ready *bool `json:"ready"`

	// thresholds
	// Required: true
	Thresholds *QuotaQuotaThresholdsExtended `json:"thresholds"`

	// If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).
	// Required: true
	ThresholdsIncludeOverhead *bool `json:"thresholds_include_overhead"`

	// The type of quota.
	// Required: true
	// Enum: [directory user group default-user default-group]
	Type *string `json:"type"`

	// usage
	// Required: true
	Usage *QuotaQuotaUsage `json:"usage"`
}

// Validate validates this quota quota extended
func (m *QuotaQuotaExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnforced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersona(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReady(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholdsIncludeOverhead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaQuotaExtended) validateContainer(formats strfmt.Registry) error {

	if err := validate.Required("container", "body", m.Container); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validateEnforced(formats strfmt.Registry) error {

	if err := validate.Required("enforced", "body", m.Enforced); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validateIncludeSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("include_snapshots", "body", m.IncludeSnapshots); err != nil {
		return err
	}

	return nil
}

var quotaQuotaExtendedTypeNotificationsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["custom","default","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaQuotaExtendedTypeNotificationsPropEnum = append(quotaQuotaExtendedTypeNotificationsPropEnum, v)
	}
}

const (

	// QuotaQuotaExtendedNotificationsCustom captures enum value "custom"
	QuotaQuotaExtendedNotificationsCustom string = "custom"

	// QuotaQuotaExtendedNotificationsDefault captures enum value "default"
	QuotaQuotaExtendedNotificationsDefault string = "default"

	// QuotaQuotaExtendedNotificationsDisabled captures enum value "disabled"
	QuotaQuotaExtendedNotificationsDisabled string = "disabled"
)

// prop value enum
func (m *QuotaQuotaExtended) validateNotificationsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, quotaQuotaExtendedTypeNotificationsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QuotaQuotaExtended) validateNotifications(formats strfmt.Registry) error {

	if err := validate.Required("notifications", "body", m.Notifications); err != nil {
		return err
	}

	// value enum
	if err := m.validateNotificationsEnum("notifications", "body", *m.Notifications); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validatePersona(formats strfmt.Registry) error {

	if swag.IsZero(m.Persona) { // not required
		return nil
	}

	if m.Persona != nil {
		if err := m.Persona.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persona")
			}
			return err
		}
	}

	return nil
}

func (m *QuotaQuotaExtended) validateReady(formats strfmt.Registry) error {

	if err := validate.Required("ready", "body", m.Ready); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validateThresholds(formats strfmt.Registry) error {

	if err := validate.Required("thresholds", "body", m.Thresholds); err != nil {
		return err
	}

	if m.Thresholds != nil {
		if err := m.Thresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thresholds")
			}
			return err
		}
	}

	return nil
}

func (m *QuotaQuotaExtended) validateThresholdsIncludeOverhead(formats strfmt.Registry) error {

	if err := validate.Required("thresholds_include_overhead", "body", m.ThresholdsIncludeOverhead); err != nil {
		return err
	}

	return nil
}

var quotaQuotaExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["directory","user","group","default-user","default-group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaQuotaExtendedTypeTypePropEnum = append(quotaQuotaExtendedTypeTypePropEnum, v)
	}
}

const (

	// QuotaQuotaExtendedTypeDirectory captures enum value "directory"
	QuotaQuotaExtendedTypeDirectory string = "directory"

	// QuotaQuotaExtendedTypeUser captures enum value "user"
	QuotaQuotaExtendedTypeUser string = "user"

	// QuotaQuotaExtendedTypeGroup captures enum value "group"
	QuotaQuotaExtendedTypeGroup string = "group"

	// QuotaQuotaExtendedTypeDefaultUser captures enum value "default-user"
	QuotaQuotaExtendedTypeDefaultUser string = "default-user"

	// QuotaQuotaExtendedTypeDefaultGroup captures enum value "default-group"
	QuotaQuotaExtendedTypeDefaultGroup string = "default-group"
)

// prop value enum
func (m *QuotaQuotaExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, quotaQuotaExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QuotaQuotaExtended) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaExtended) validateUsage(formats strfmt.Registry) error {

	if err := validate.Required("usage", "body", m.Usage); err != nil {
		return err
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaQuotaExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaQuotaExtended) UnmarshalBinary(b []byte) error {
	var res QuotaQuotaExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
