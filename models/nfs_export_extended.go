// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NfsExportExtended nfs export extended
// swagger:model NfsExportExtended
type NfsExportExtended struct {
	NfsExport

	// Reports the paths that conflict with another export.
	ConflictingPaths []string `json:"conflicting_paths"`

	// Specifies the system-assigned ID for the export. This ID is returned when an export is created through the POST method.
	ID int64 `json:"id,omitempty"`

	// Reports clients that cannot be resolved.
	UnresolvedClients []string `json:"unresolved_clients"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *NfsExportExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 NfsExport
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.NfsExport = aO0

	// AO1
	var dataAO1 struct {
		ConflictingPaths []string `json:"conflicting_paths"`

		ID int64 `json:"id,omitempty"`

		UnresolvedClients []string `json:"unresolved_clients"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConflictingPaths = dataAO1.ConflictingPaths

	m.ID = dataAO1.ID

	m.UnresolvedClients = dataAO1.UnresolvedClients

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m NfsExportExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.NfsExport)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ConflictingPaths []string `json:"conflicting_paths"`

		ID int64 `json:"id,omitempty"`

		UnresolvedClients []string `json:"unresolved_clients"`
	}

	dataAO1.ConflictingPaths = m.ConflictingPaths

	dataAO1.ID = m.ID

	dataAO1.UnresolvedClients = m.UnresolvedClients

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this nfs export extended
func (m *NfsExportExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with NfsExport
	if err := m.NfsExport.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *NfsExportExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsExportExtended) UnmarshalBinary(b []byte) error {
	var res NfsExportExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
