// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CloudSettingsSettings cloud settings settings
// swagger:model CloudSettingsSettings
type CloudSettingsSettings struct {

	// The default filepool policy values for cloud pools.
	CloudPolicyDefaults Empty `json:"cloud_policy_defaults,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive archive attempts.
	RetryCoefficientArchive string `json:"retry_coefficient_archive,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive cache invalidation attempts.
	RetryCoefficientCacheInvalidation string `json:"retry_coefficient_cache_invalidation,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive cloud garbage collection attempts.
	RetryCoefficientCloudGarbageCollection string `json:"retry_coefficient_cloud_garbage_collection,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive local garbage collection attempts.
	RetryCoefficientLocalGarbageCollection string `json:"retry_coefficient_local_garbage_collection,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive read ahead attempts.
	RetryCoefficientReadAhead string `json:"retry_coefficient_read_ahead,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive recall attempts.
	RetryCoefficientRecall string `json:"retry_coefficient_recall,omitempty"`

	// Coefficients in the quadratic function for determining the rest period between successive writeback attempts.
	RetryCoefficientWriteback string `json:"retry_coefficient_writeback,omitempty"`

	// Amount of time to wait between successive file archive operations.
	SleepTimeoutArchive *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_archive,omitempty"`

	// Amount of time to wait between successive file cache_invalidation operations.
	SleepTimeoutCacheInvalidation *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_cache_invalidation,omitempty"`

	// Amount of time to wait between successive file cloud garbage collection operations.
	SleepTimeoutCloudGarbageCollection *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_cloud_garbage_collection,omitempty"`

	// Amount of time to wait between successive file local garbage collection operations.
	SleepTimeoutLocalGarbageCollection *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_local_garbage_collection,omitempty"`

	// Amount of time to wait between successive file read ahead operations.
	SleepTimeoutReadAhead *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_read_ahead,omitempty"`

	// Amount of time to wait between successive file recall operations.
	SleepTimeoutRecall *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_recall,omitempty"`

	// Amount of time to wait between successive file writeback operations.
	SleepTimeoutWriteback *CloudSettingsSettingsSleepTimeoutCloudGarbageCollection `json:"sleep_timeout_writeback,omitempty"`
}

// Validate validates this cloud settings settings
func (m *CloudSettingsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSleepTimeoutArchive(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutCacheInvalidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutCloudGarbageCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutLocalGarbageCollection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutReadAhead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutRecall(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSleepTimeoutWriteback(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutArchive(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutArchive) { // not required
		return nil
	}

	if m.SleepTimeoutArchive != nil {
		if err := m.SleepTimeoutArchive.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_archive")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutCacheInvalidation(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutCacheInvalidation) { // not required
		return nil
	}

	if m.SleepTimeoutCacheInvalidation != nil {
		if err := m.SleepTimeoutCacheInvalidation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_cache_invalidation")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutCloudGarbageCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutCloudGarbageCollection) { // not required
		return nil
	}

	if m.SleepTimeoutCloudGarbageCollection != nil {
		if err := m.SleepTimeoutCloudGarbageCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_cloud_garbage_collection")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutLocalGarbageCollection(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutLocalGarbageCollection) { // not required
		return nil
	}

	if m.SleepTimeoutLocalGarbageCollection != nil {
		if err := m.SleepTimeoutLocalGarbageCollection.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_local_garbage_collection")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutReadAhead(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutReadAhead) { // not required
		return nil
	}

	if m.SleepTimeoutReadAhead != nil {
		if err := m.SleepTimeoutReadAhead.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_read_ahead")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutRecall(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutRecall) { // not required
		return nil
	}

	if m.SleepTimeoutRecall != nil {
		if err := m.SleepTimeoutRecall.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_recall")
			}
			return err
		}
	}

	return nil
}

func (m *CloudSettingsSettings) validateSleepTimeoutWriteback(formats strfmt.Registry) error {

	if swag.IsZero(m.SleepTimeoutWriteback) { // not required
		return nil
	}

	if m.SleepTimeoutWriteback != nil {
		if err := m.SleepTimeoutWriteback.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sleep_timeout_writeback")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudSettingsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudSettingsSettings) UnmarshalBinary(b []byte) error {
	var res CloudSettingsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
