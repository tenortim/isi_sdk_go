// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntivirusPolicy An antivirus scan policy.
// swagger:model AntivirusPolicy
type AntivirusPolicy struct {

	// A description for the policy.
	Description string `json:"description,omitempty"`

	// Whether the policy is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// Forces the scan to run regardless of whether the files were recently scanned.
	ForceRun bool `json:"force_run,omitempty"`

	// The priority of the antivirus scan job.  Must be a valid job engine impact policy, or null to use the default impact.
	Impact string `json:"impact,omitempty"`

	// The name of the policy.
	Name string `json:"name,omitempty"`

	// Paths to include in the scan.
	Paths []string `json:"paths"`

	// The depth to recurse in directories.  The default of -1 gives unlimited recursion.
	RecursionDepth int64 `json:"recursion_depth,omitempty"`

	// The schedule for running scans in isi date format.  Examples include: 'every Friday' or 'every day at 4:00'.  A null value means the policy is manually scheduled.
	Schedule string `json:"schedule,omitempty"`
}

// Validate validates this antivirus policy
func (m *AntivirusPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePaths(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntivirusPolicy) validatePaths(formats strfmt.Registry) error {

	if swag.IsZero(m.Paths) { // not required
		return nil
	}

	for i := 0; i < len(m.Paths); i++ {

		if err := validate.Pattern("paths"+"."+strconv.Itoa(i), "body", string(m.Paths[i]), `^/ifs.*`); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntivirusPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntivirusPolicy) UnmarshalBinary(b []byte) error {
	var res AntivirusPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
