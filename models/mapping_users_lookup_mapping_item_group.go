// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MappingUsersLookupMappingItemGroup mapping users lookup mapping item group
// swagger:model MappingUsersLookupMappingItemGroup
type MappingUsersLookupMappingItemGroup struct {

	// Specifies the distinguished name for the user.
	Dn string `json:"dn,omitempty"`

	// Specifies the DNS domain.
	DNSDomain string `json:"dns_domain,omitempty"`

	// Specifies the domain that the object is part of.
	Domain string `json:"domain,omitempty"`

	// Specifies an email address.
	Email string `json:"email,omitempty"`

	// If true, the authenticated user is enabled.
	Enabled bool `json:"enabled,omitempty"`

	// If true, the authenticated auth user is expired.
	Expired bool `json:"expired,omitempty"`

	// Specifies the Epoch time at which the authenticated user will expire.
	Expiry int64 `json:"expiry,omitempty"`

	// Specifies the GECOS value, which is usually the full name.
	Gecos string `json:"gecos,omitempty"`

	// If true, indicates that the GID was generated.
	GeneratedGid bool `json:"generated_gid,omitempty"`

	// If true, indicates that the UID was generated.
	GeneratedUID bool `json:"generated_uid,omitempty"`

	// If true, indicates that the UPN was generated.
	GeneratedUpn bool `json:"generated_upn,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Gid *GroupMember `json:"gid,omitempty"`

	// Specifies the home directory for the user.
	HomeDirectory string `json:"home_directory,omitempty"`

	// Specifies the user or group ID.
	// Required: true
	ID *string `json:"id"`

	// If true, the account is locked out.
	Locked bool `json:"locked,omitempty"`

	// Specifies the maximum time in seconds allowed before the password expires.
	MaxPasswordAge int64 `json:"max_password_age,omitempty"`

	// member of
	MemberOf []*GroupMember `json:"member_of"`

	// Specifies a user or group name.
	// Required: true
	Name *string `json:"name"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	OnDiskGroupIdentity *GroupMember `json:"on_disk_group_identity,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	OnDiskUserIdentity *GroupMember `json:"on_disk_user_identity,omitempty"`

	// If true, the password has expired.
	PasswordExpired bool `json:"password_expired,omitempty"`

	// If true, the password is allowed to expire.
	PasswordExpires bool `json:"password_expires,omitempty"`

	// Specifies the time in Epoch seconds the password will expire.
	PasswordExpiry int64 `json:"password_expiry,omitempty"`

	// Specifies the last time the password was set.
	PasswordLastSet int64 `json:"password_last_set,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	PrimaryGroupSid *GroupMember `json:"primary_group_sid,omitempty"`

	// If true, prompts the user to change their password on next login.
	PromptPasswordChange bool `json:"prompt_password_change,omitempty"`

	// Specifies the authentication provider that the object belongs to.
	Provider string `json:"provider,omitempty"`

	// Specifies a user or group name.
	SamAccountName string `json:"sam_account_name,omitempty"`

	// Specifies the path to the shell for the user.
	Shell string `json:"shell,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Sid *GroupMember `json:"sid,omitempty"`

	// Specifies the object type.
	// Required: true
	Type *string `json:"type"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	UID *GroupMember `json:"uid,omitempty"`

	// Specifies the user principal name.
	Upn string `json:"upn,omitempty"`

	// If true, the user password can be changed.
	UserCanChangePassword bool `json:"user_can_change_password,omitempty"`
}

// Validate validates this mapping users lookup mapping item group
func (m *MappingUsersLookupMappingItemGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDiskGroupIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDiskUserIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryGroupSid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateGid(formats strfmt.Registry) error {

	if swag.IsZero(m.Gid) { // not required
		return nil
	}

	if m.Gid != nil {
		if err := m.Gid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateMemberOf(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberOf) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberOf); i++ {
		if swag.IsZero(m.MemberOf[i]) { // not required
			continue
		}

		if m.MemberOf[i] != nil {
			if err := m.MemberOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("member_of" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateOnDiskGroupIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDiskGroupIdentity) { // not required
		return nil
	}

	if m.OnDiskGroupIdentity != nil {
		if err := m.OnDiskGroupIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_disk_group_identity")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateOnDiskUserIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDiskUserIdentity) { // not required
		return nil
	}

	if m.OnDiskUserIdentity != nil {
		if err := m.OnDiskUserIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_disk_user_identity")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validatePrimaryGroupSid(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryGroupSid) { // not required
		return nil
	}

	if m.PrimaryGroupSid != nil {
		if err := m.PrimaryGroupSid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_group_sid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateSid(formats strfmt.Registry) error {

	if swag.IsZero(m.Sid) { // not required
		return nil
	}

	if m.Sid != nil {
		if err := m.Sid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemGroup) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MappingUsersLookupMappingItemGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MappingUsersLookupMappingItemGroup) UnmarshalBinary(b []byte) error {
	var res MappingUsersLookupMappingItemGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
