// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudAccessCluster cloud access cluster
// swagger:model CloudAccessCluster
type CloudAccessCluster struct {

	// A list of accounts created on the cluster with this guid
	Accounts []string `json:"accounts"`

	// Whether the guid is that of the current (local) cluster
	Current bool `json:"current,omitempty"`

	// A cluster guid indicating the birth place of one or more accounts or policies on this cluster
	GUID string `json:"guid,omitempty"`

	// A cluster guid indicating the birth place of one or more accounts or policies on this cluster
	ID string `json:"id,omitempty"`

	// The name of the cluster from which the above guid originated
	Name string `json:"name,omitempty"`

	// A list of policies created on the cluster with this guid
	Policies []string `json:"policies"`

	// Whether the guid has access to the cloud
	// Enum: [permitted pending enable pending disable not permitted]
	State string `json:"state,omitempty"`

	// The name of the cluster from which the above guid was synced
	SyncedFrom string `json:"synced_from,omitempty"`
}

// Validate validates this cloud access cluster
func (m *CloudAccessCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudAccessClusterTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["permitted","pending enable","pending disable","not permitted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudAccessClusterTypeStatePropEnum = append(cloudAccessClusterTypeStatePropEnum, v)
	}
}

const (

	// CloudAccessClusterStatePermitted captures enum value "permitted"
	CloudAccessClusterStatePermitted string = "permitted"

	// CloudAccessClusterStatePendingEnable captures enum value "pending enable"
	CloudAccessClusterStatePendingEnable string = "pending enable"

	// CloudAccessClusterStatePendingDisable captures enum value "pending disable"
	CloudAccessClusterStatePendingDisable string = "pending disable"

	// CloudAccessClusterStateNotPermitted captures enum value "not permitted"
	CloudAccessClusterStateNotPermitted string = "not permitted"
)

// prop value enum
func (m *CloudAccessCluster) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudAccessClusterTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudAccessCluster) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudAccessCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudAccessCluster) UnmarshalBinary(b []byte) error {
	var res CloudAccessCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
