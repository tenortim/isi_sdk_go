// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportAboutReport report about report
// swagger:model ReportAboutReport
type ReportAboutReport struct {

	// Whether report was manually requested (live) or scheduled.
	// Required: true
	// Enum: [manual scheduled]
	Generated *string `json:"generated"`

	// The system ID given to the report.
	// Required: true
	ID *string `json:"id"`

	// Unix epoch time the report was taken.
	// Required: true
	Time *int64 `json:"time"`

	// Whether this is a summary or detail report.
	// Required: true
	// Enum: [summary detail]
	Type *string `json:"type"`
}

// Validate validates this report about report
func (m *ReportAboutReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGenerated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var reportAboutReportTypeGeneratedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manual","scheduled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportAboutReportTypeGeneratedPropEnum = append(reportAboutReportTypeGeneratedPropEnum, v)
	}
}

const (

	// ReportAboutReportGeneratedManual captures enum value "manual"
	ReportAboutReportGeneratedManual string = "manual"

	// ReportAboutReportGeneratedScheduled captures enum value "scheduled"
	ReportAboutReportGeneratedScheduled string = "scheduled"
)

// prop value enum
func (m *ReportAboutReport) validateGeneratedEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportAboutReportTypeGeneratedPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportAboutReport) validateGenerated(formats strfmt.Registry) error {

	if err := validate.Required("generated", "body", m.Generated); err != nil {
		return err
	}

	// value enum
	if err := m.validateGeneratedEnum("generated", "body", *m.Generated); err != nil {
		return err
	}

	return nil
}

func (m *ReportAboutReport) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ReportAboutReport) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

var reportAboutReportTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["summary","detail"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportAboutReportTypeTypePropEnum = append(reportAboutReportTypeTypePropEnum, v)
	}
}

const (

	// ReportAboutReportTypeSummary captures enum value "summary"
	ReportAboutReportTypeSummary string = "summary"

	// ReportAboutReportTypeDetail captures enum value "detail"
	ReportAboutReportTypeDetail string = "detail"
)

// prop value enum
func (m *ReportAboutReport) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportAboutReportTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportAboutReport) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportAboutReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportAboutReport) UnmarshalBinary(b []byte) error {
	var res ReportAboutReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
