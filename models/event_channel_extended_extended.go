// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventChannelExtendedExtended event channel extended extended
// swagger:model EventChannelExtendedExtended
type EventChannelExtendedExtended struct {

	// Nodes that can be masters for this channel
	AllowedNodes []int64 `json:"allowed_nodes"`

	// Channel is to be used or not
	Enabled bool `json:"enabled,omitempty"`

	// Nodes that can be masters for this channel
	ExcludedNodes []int64 `json:"excluded_nodes"`

	// Unique identifier.
	ID int64 `json:"id,omitempty"`

	// Channel name,  may not contain /, max length 254.
	Name string `json:"name,omitempty"`

	// Parameters to be used for an smtp channel
	Parameters *EventChannelParameters `json:"parameters,omitempty"`

	// Channel is a pre-defined system channel
	System bool `json:"system,omitempty"`

	// The mechanism used by the channel
	// Enum: [connectemc smtp snmp heartbeat]
	Type string `json:"type,omitempty"`
}

// Validate validates this event channel extended extended
func (m *EventChannelExtendedExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParameters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventChannelExtendedExtended) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if m.Parameters != nil {
		if err := m.Parameters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parameters")
			}
			return err
		}
	}

	return nil
}

var eventChannelExtendedExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["connectemc","smtp","snmp","heartbeat"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventChannelExtendedExtendedTypeTypePropEnum = append(eventChannelExtendedExtendedTypeTypePropEnum, v)
	}
}

const (

	// EventChannelExtendedExtendedTypeConnectemc captures enum value "connectemc"
	EventChannelExtendedExtendedTypeConnectemc string = "connectemc"

	// EventChannelExtendedExtendedTypeSMTP captures enum value "smtp"
	EventChannelExtendedExtendedTypeSMTP string = "smtp"

	// EventChannelExtendedExtendedTypeSnmp captures enum value "snmp"
	EventChannelExtendedExtendedTypeSnmp string = "snmp"

	// EventChannelExtendedExtendedTypeHeartbeat captures enum value "heartbeat"
	EventChannelExtendedExtendedTypeHeartbeat string = "heartbeat"
)

// prop value enum
func (m *EventChannelExtendedExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventChannelExtendedExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventChannelExtendedExtended) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventChannelExtendedExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventChannelExtendedExtended) UnmarshalBinary(b []byte) error {
	var res EventChannelExtendedExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
