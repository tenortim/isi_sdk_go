// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventEventlistEvent Record of an event occurring on the cluster
// swagger:model EventEventlistEvent
type EventEventlistEvent struct {

	// The lnn of the node if it is still part of the cluster otherwise None.
	Devid int64 `json:"devid,omitempty"`

	// Time event was ended (eventgroup resolved)
	Ended float64 `json:"ended,omitempty"`

	// Integer identifier of the event type
	Event int64 `json:"event,omitempty"`

	// Unique identifier of event occurrence.
	ID string `json:"id,omitempty"`

	// lnn
	Lnn int64 `json:"lnn,omitempty"`

	// Human readable description
	Message string `json:"message,omitempty"`

	// resolve time
	ResolveTime int64 `json:"resolve_time,omitempty"`

	// Severity of event occurrence.
	// Enum: [information warning critical emergency unknown]
	Severity string `json:"severity,omitempty"`

	// A collection of parameters defined per event.
	Specifier Empty `json:"specifier,omitempty"`

	// Time event was detected as UNIX timestamp.
	Time int64 `json:"time,omitempty"`

	// Value of measurement associated with this event.
	Value float64 `json:"value,omitempty"`
}

// Validate validates this event eventlist event
func (m *EventEventlistEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventEventlistEventTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["information","warning","critical","emergency","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventEventlistEventTypeSeverityPropEnum = append(eventEventlistEventTypeSeverityPropEnum, v)
	}
}

const (

	// EventEventlistEventSeverityInformation captures enum value "information"
	EventEventlistEventSeverityInformation string = "information"

	// EventEventlistEventSeverityWarning captures enum value "warning"
	EventEventlistEventSeverityWarning string = "warning"

	// EventEventlistEventSeverityCritical captures enum value "critical"
	EventEventlistEventSeverityCritical string = "critical"

	// EventEventlistEventSeverityEmergency captures enum value "emergency"
	EventEventlistEventSeverityEmergency string = "emergency"

	// EventEventlistEventSeverityUnknown captures enum value "unknown"
	EventEventlistEventSeverityUnknown string = "unknown"
)

// prop value enum
func (m *EventEventlistEvent) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventEventlistEventTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventEventlistEvent) validateSeverity(formats strfmt.Registry) error {

	if swag.IsZero(m.Severity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", m.Severity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventEventlistEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventEventlistEvent) UnmarshalBinary(b []byte) error {
	var res EventEventlistEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
