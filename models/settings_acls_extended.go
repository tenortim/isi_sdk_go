// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettingsAclsExtended ACL policies settings.
// swagger:model SettingsAclsExtended
type SettingsAclsExtended struct {

	// Access checks (chmod, chown).
	// Enum: [unix windows]
	Access string `json:"access,omitempty"`

	// Displayed mode bits.
	// Enum: [approx 777]
	Calcmode string `json:"calcmode,omitempty"`

	// Approximate group mode bits when ACL exists.
	// Enum: [group_aces group_only]
	CalcmodeGroup string `json:"calcmode_group,omitempty"`

	// Approximate owner mode bits when ACL exists.
	// Enum: [owner_aces owner_only]
	CalcmodeOwner string `json:"calcmode_owner,omitempty"`

	// chmod on files with existing ACLs.
	// Enum: [remove replace replace_users_and_groups merge deny ignore]
	Chmod string `json:"chmod,omitempty"`

	// chmod (007) on files with existing ACLs.
	// Enum: [default remove]
	Chmod007 string `json:"chmod_007,omitempty"`

	// ACLs created on directories by UNIX chmod.
	// Enum: [yes no]
	ChmodInheritable string `json:"chmod_inheritable,omitempty"`

	// chown/chgrp on files with existing ACLs.
	// Enum: [owner_group_and_acl owner_group_only ignore]
	Chown string `json:"chown,omitempty"`

	// ACL creation over SMB.
	// Enum: [allow disallow]
	CreateOverSmb string `json:"create_over_smb,omitempty"`

	//  Read only DOS attribute.
	// Enum: [deny_smb deny_smb_and_nfs]
	DosAttr string `json:"dos_attr,omitempty"`

	// Group owner inheritance.
	// Enum: [native parent creator]
	GroupOwnerInheritance string `json:"group_owner_inheritance,omitempty"`

	// Treatment of 'rwx' permissions.
	// Enum: [retain full_control]
	Rwx string `json:"rwx,omitempty"`

	// Synthetic 'deny' ACEs.
	// Enum: [none remove]
	SyntheticDenies string `json:"synthetic_denies,omitempty"`

	// Access check (utimes)
	// Enum: [only_owner owner_and_write]
	Utimes string `json:"utimes,omitempty"`
}

// Validate validates this settings acls extended
func (m *SettingsAclsExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalcmode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalcmodeGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCalcmodeOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChmod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChmod007(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChmodInheritable(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreateOverSmb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDosAttr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupOwnerInheritance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRwx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSyntheticDenies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUtimes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var settingsAclsExtendedTypeAccessPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unix","windows"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeAccessPropEnum = append(settingsAclsExtendedTypeAccessPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedAccessUnix captures enum value "unix"
	SettingsAclsExtendedAccessUnix string = "unix"

	// SettingsAclsExtendedAccessWindows captures enum value "windows"
	SettingsAclsExtendedAccessWindows string = "windows"
)

// prop value enum
func (m *SettingsAclsExtended) validateAccessEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeAccessPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.Access) { // not required
		return nil
	}

	// value enum
	if err := m.validateAccessEnum("access", "body", m.Access); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeCalcmodePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["approx","777"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeCalcmodePropEnum = append(settingsAclsExtendedTypeCalcmodePropEnum, v)
	}
}

const (

	// SettingsAclsExtendedCalcmodeApprox captures enum value "approx"
	SettingsAclsExtendedCalcmodeApprox string = "approx"

	// SettingsAclsExtendedCalcmodeNr777 captures enum value "777"
	SettingsAclsExtendedCalcmodeNr777 string = "777"
)

// prop value enum
func (m *SettingsAclsExtended) validateCalcmodeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeCalcmodePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateCalcmode(formats strfmt.Registry) error {

	if swag.IsZero(m.Calcmode) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalcmodeEnum("calcmode", "body", m.Calcmode); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeCalcmodeGroupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["group_aces","group_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeCalcmodeGroupPropEnum = append(settingsAclsExtendedTypeCalcmodeGroupPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedCalcmodeGroupGroupAces captures enum value "group_aces"
	SettingsAclsExtendedCalcmodeGroupGroupAces string = "group_aces"

	// SettingsAclsExtendedCalcmodeGroupGroupOnly captures enum value "group_only"
	SettingsAclsExtendedCalcmodeGroupGroupOnly string = "group_only"
)

// prop value enum
func (m *SettingsAclsExtended) validateCalcmodeGroupEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeCalcmodeGroupPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateCalcmodeGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.CalcmodeGroup) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalcmodeGroupEnum("calcmode_group", "body", m.CalcmodeGroup); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeCalcmodeOwnerPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["owner_aces","owner_only"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeCalcmodeOwnerPropEnum = append(settingsAclsExtendedTypeCalcmodeOwnerPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedCalcmodeOwnerOwnerAces captures enum value "owner_aces"
	SettingsAclsExtendedCalcmodeOwnerOwnerAces string = "owner_aces"

	// SettingsAclsExtendedCalcmodeOwnerOwnerOnly captures enum value "owner_only"
	SettingsAclsExtendedCalcmodeOwnerOwnerOnly string = "owner_only"
)

// prop value enum
func (m *SettingsAclsExtended) validateCalcmodeOwnerEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeCalcmodeOwnerPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateCalcmodeOwner(formats strfmt.Registry) error {

	if swag.IsZero(m.CalcmodeOwner) { // not required
		return nil
	}

	// value enum
	if err := m.validateCalcmodeOwnerEnum("calcmode_owner", "body", m.CalcmodeOwner); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeChmodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["remove","replace","replace_users_and_groups","merge","deny","ignore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeChmodPropEnum = append(settingsAclsExtendedTypeChmodPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedChmodRemove captures enum value "remove"
	SettingsAclsExtendedChmodRemove string = "remove"

	// SettingsAclsExtendedChmodReplace captures enum value "replace"
	SettingsAclsExtendedChmodReplace string = "replace"

	// SettingsAclsExtendedChmodReplaceUsersAndGroups captures enum value "replace_users_and_groups"
	SettingsAclsExtendedChmodReplaceUsersAndGroups string = "replace_users_and_groups"

	// SettingsAclsExtendedChmodMerge captures enum value "merge"
	SettingsAclsExtendedChmodMerge string = "merge"

	// SettingsAclsExtendedChmodDeny captures enum value "deny"
	SettingsAclsExtendedChmodDeny string = "deny"

	// SettingsAclsExtendedChmodIgnore captures enum value "ignore"
	SettingsAclsExtendedChmodIgnore string = "ignore"
)

// prop value enum
func (m *SettingsAclsExtended) validateChmodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeChmodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateChmod(formats strfmt.Registry) error {

	if swag.IsZero(m.Chmod) { // not required
		return nil
	}

	// value enum
	if err := m.validateChmodEnum("chmod", "body", m.Chmod); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeChmod007PropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","remove"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeChmod007PropEnum = append(settingsAclsExtendedTypeChmod007PropEnum, v)
	}
}

const (

	// SettingsAclsExtendedChmod007Default captures enum value "default"
	SettingsAclsExtendedChmod007Default string = "default"

	// SettingsAclsExtendedChmod007Remove captures enum value "remove"
	SettingsAclsExtendedChmod007Remove string = "remove"
)

// prop value enum
func (m *SettingsAclsExtended) validateChmod007Enum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeChmod007PropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateChmod007(formats strfmt.Registry) error {

	if swag.IsZero(m.Chmod007) { // not required
		return nil
	}

	// value enum
	if err := m.validateChmod007Enum("chmod_007", "body", m.Chmod007); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeChmodInheritablePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["yes","no"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeChmodInheritablePropEnum = append(settingsAclsExtendedTypeChmodInheritablePropEnum, v)
	}
}

const (

	// SettingsAclsExtendedChmodInheritableYes captures enum value "yes"
	SettingsAclsExtendedChmodInheritableYes string = "yes"

	// SettingsAclsExtendedChmodInheritableNo captures enum value "no"
	SettingsAclsExtendedChmodInheritableNo string = "no"
)

// prop value enum
func (m *SettingsAclsExtended) validateChmodInheritableEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeChmodInheritablePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateChmodInheritable(formats strfmt.Registry) error {

	if swag.IsZero(m.ChmodInheritable) { // not required
		return nil
	}

	// value enum
	if err := m.validateChmodInheritableEnum("chmod_inheritable", "body", m.ChmodInheritable); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeChownPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["owner_group_and_acl","owner_group_only","ignore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeChownPropEnum = append(settingsAclsExtendedTypeChownPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedChownOwnerGroupAndACL captures enum value "owner_group_and_acl"
	SettingsAclsExtendedChownOwnerGroupAndACL string = "owner_group_and_acl"

	// SettingsAclsExtendedChownOwnerGroupOnly captures enum value "owner_group_only"
	SettingsAclsExtendedChownOwnerGroupOnly string = "owner_group_only"

	// SettingsAclsExtendedChownIgnore captures enum value "ignore"
	SettingsAclsExtendedChownIgnore string = "ignore"
)

// prop value enum
func (m *SettingsAclsExtended) validateChownEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeChownPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateChown(formats strfmt.Registry) error {

	if swag.IsZero(m.Chown) { // not required
		return nil
	}

	// value enum
	if err := m.validateChownEnum("chown", "body", m.Chown); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeCreateOverSmbPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["allow","disallow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeCreateOverSmbPropEnum = append(settingsAclsExtendedTypeCreateOverSmbPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedCreateOverSmbAllow captures enum value "allow"
	SettingsAclsExtendedCreateOverSmbAllow string = "allow"

	// SettingsAclsExtendedCreateOverSmbDisallow captures enum value "disallow"
	SettingsAclsExtendedCreateOverSmbDisallow string = "disallow"
)

// prop value enum
func (m *SettingsAclsExtended) validateCreateOverSmbEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeCreateOverSmbPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateCreateOverSmb(formats strfmt.Registry) error {

	if swag.IsZero(m.CreateOverSmb) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreateOverSmbEnum("create_over_smb", "body", m.CreateOverSmb); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeDosAttrPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny_smb","deny_smb_and_nfs"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeDosAttrPropEnum = append(settingsAclsExtendedTypeDosAttrPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedDosAttrDenySmb captures enum value "deny_smb"
	SettingsAclsExtendedDosAttrDenySmb string = "deny_smb"

	// SettingsAclsExtendedDosAttrDenySmbAndNfs captures enum value "deny_smb_and_nfs"
	SettingsAclsExtendedDosAttrDenySmbAndNfs string = "deny_smb_and_nfs"
)

// prop value enum
func (m *SettingsAclsExtended) validateDosAttrEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeDosAttrPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateDosAttr(formats strfmt.Registry) error {

	if swag.IsZero(m.DosAttr) { // not required
		return nil
	}

	// value enum
	if err := m.validateDosAttrEnum("dos_attr", "body", m.DosAttr); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeGroupOwnerInheritancePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["native","parent","creator"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeGroupOwnerInheritancePropEnum = append(settingsAclsExtendedTypeGroupOwnerInheritancePropEnum, v)
	}
}

const (

	// SettingsAclsExtendedGroupOwnerInheritanceNative captures enum value "native"
	SettingsAclsExtendedGroupOwnerInheritanceNative string = "native"

	// SettingsAclsExtendedGroupOwnerInheritanceParent captures enum value "parent"
	SettingsAclsExtendedGroupOwnerInheritanceParent string = "parent"

	// SettingsAclsExtendedGroupOwnerInheritanceCreator captures enum value "creator"
	SettingsAclsExtendedGroupOwnerInheritanceCreator string = "creator"
)

// prop value enum
func (m *SettingsAclsExtended) validateGroupOwnerInheritanceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeGroupOwnerInheritancePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateGroupOwnerInheritance(formats strfmt.Registry) error {

	if swag.IsZero(m.GroupOwnerInheritance) { // not required
		return nil
	}

	// value enum
	if err := m.validateGroupOwnerInheritanceEnum("group_owner_inheritance", "body", m.GroupOwnerInheritance); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeRwxPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["retain","full_control"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeRwxPropEnum = append(settingsAclsExtendedTypeRwxPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedRwxRetain captures enum value "retain"
	SettingsAclsExtendedRwxRetain string = "retain"

	// SettingsAclsExtendedRwxFullControl captures enum value "full_control"
	SettingsAclsExtendedRwxFullControl string = "full_control"
)

// prop value enum
func (m *SettingsAclsExtended) validateRwxEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeRwxPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateRwx(formats strfmt.Registry) error {

	if swag.IsZero(m.Rwx) { // not required
		return nil
	}

	// value enum
	if err := m.validateRwxEnum("rwx", "body", m.Rwx); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeSyntheticDeniesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","remove"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeSyntheticDeniesPropEnum = append(settingsAclsExtendedTypeSyntheticDeniesPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedSyntheticDeniesNone captures enum value "none"
	SettingsAclsExtendedSyntheticDeniesNone string = "none"

	// SettingsAclsExtendedSyntheticDeniesRemove captures enum value "remove"
	SettingsAclsExtendedSyntheticDeniesRemove string = "remove"
)

// prop value enum
func (m *SettingsAclsExtended) validateSyntheticDeniesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeSyntheticDeniesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateSyntheticDenies(formats strfmt.Registry) error {

	if swag.IsZero(m.SyntheticDenies) { // not required
		return nil
	}

	// value enum
	if err := m.validateSyntheticDeniesEnum("synthetic_denies", "body", m.SyntheticDenies); err != nil {
		return err
	}

	return nil
}

var settingsAclsExtendedTypeUtimesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["only_owner","owner_and_write"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsAclsExtendedTypeUtimesPropEnum = append(settingsAclsExtendedTypeUtimesPropEnum, v)
	}
}

const (

	// SettingsAclsExtendedUtimesOnlyOwner captures enum value "only_owner"
	SettingsAclsExtendedUtimesOnlyOwner string = "only_owner"

	// SettingsAclsExtendedUtimesOwnerAndWrite captures enum value "owner_and_write"
	SettingsAclsExtendedUtimesOwnerAndWrite string = "owner_and_write"
)

// prop value enum
func (m *SettingsAclsExtended) validateUtimesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsAclsExtendedTypeUtimesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsAclsExtended) validateUtimes(formats strfmt.Registry) error {

	if swag.IsZero(m.Utimes) { // not required
		return nil
	}

	// value enum
	if err := m.validateUtimesEnum("utimes", "body", m.Utimes); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsAclsExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsAclsExtended) UnmarshalBinary(b []byte) error {
	var res SettingsAclsExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
