// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ACLObject Acl object
// swagger:model AclObject
type ACLObject struct {

	// accessrights
	// Min Items: 0
	Accessrights []string `json:"accessrights"`

	// accesstype
	Accesstype string `json:"accesstype,omitempty"`

	// inherit flags
	// Min Items: 0
	InheritFlags []bool `json:"inherit_flags"`

	// op
	Op string `json:"op,omitempty"`

	// trustee
	Trustee *MemberObject `json:"trustee,omitempty"`
}

// Validate validates this Acl object
func (m *ACLObject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessrights(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInheritFlags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrustee(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ACLObject) validateAccessrights(formats strfmt.Registry) error {

	if swag.IsZero(m.Accessrights) { // not required
		return nil
	}

	iAccessrightsSize := int64(len(m.Accessrights))

	if err := validate.MinItems("accessrights", "body", iAccessrightsSize, 0); err != nil {
		return err
	}

	return nil
}

func (m *ACLObject) validateInheritFlags(formats strfmt.Registry) error {

	if swag.IsZero(m.InheritFlags) { // not required
		return nil
	}

	iInheritFlagsSize := int64(len(m.InheritFlags))

	if err := validate.MinItems("inherit_flags", "body", iInheritFlagsSize, 0); err != nil {
		return err
	}

	return nil
}

func (m *ACLObject) validateTrustee(formats strfmt.Registry) error {

	if swag.IsZero(m.Trustee) { // not required
		return nil
	}

	if m.Trustee != nil {
		if err := m.Trustee.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("trustee")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ACLObject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ACLObject) UnmarshalBinary(b []byte) error {
	var res ACLObject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
