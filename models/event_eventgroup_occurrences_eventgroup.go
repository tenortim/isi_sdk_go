// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// EventEventgroupOccurrencesEventgroup event eventgroup occurrences eventgroup
// swagger:model EventEventgroupOccurrencesEventgroup
type EventEventgroupOccurrencesEventgroup struct {

	// List of eventgroup IDs that may be causes of this occurrence.
	Causes [][]string `json:"causes"`

	// List of channels to which alerts are configured for this eventgroup
	Channels []string `json:"channels"`

	// Number of events linked to this eventgroup.
	EventCount int64 `json:"event_count,omitempty"`

	// Unique identifier of eventgroup instance.
	EventgroupInstance string `json:"eventgroup_instance,omitempty"`

	// Same as eventgroup_instance.
	ID string `json:"id,omitempty"`

	// True if eventgroup is marked as 'ignore'.
	Ignore bool `json:"ignore,omitempty"`

	// Time eventgroup was marked as 'ignore'.
	IgnoreTime int64 `json:"ignore_time,omitempty"`

	// Time the most recent event was added to this eventgroup.
	LastEvent int64 `json:"last_event,omitempty"`

	// When the eventgroup became resolved.
	ResolveTime int64 `json:"resolve_time,omitempty"`

	// True if eventgroup is resolved.
	Resolved bool `json:"resolved,omitempty"`

	// 'USER' if the eventgroup was marked resolved via PAPI <event_instance> if eventgroup was marked resolved as a result of an event.
	Resolver string `json:"resolver,omitempty"`

	// XXX description needed.
	Sequence int64 `json:"sequence,omitempty"`

	// Event Group severity.
	Severity string `json:"severity,omitempty"`

	// A collection of parameters defined per eventgroup_id.
	Specifier Empty `json:"specifier,omitempty"`

	// Time of first event linked to this eventgroup.
	TimeNoticed int64 `json:"time_noticed,omitempty"`
}

// Validate validates this event eventgroup occurrences eventgroup
func (m *EventEventgroupOccurrencesEventgroup) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EventEventgroupOccurrencesEventgroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventEventgroupOccurrencesEventgroup) UnmarshalBinary(b []byte) error {
	var res EventEventgroupOccurrencesEventgroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
