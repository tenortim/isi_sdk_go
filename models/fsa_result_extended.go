// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FsaResultExtended fsa result extended
// swagger:model FsaResultExtended
type FsaResultExtended struct {
	FsaResult

	// Unix Epoch time of start of results collection job.
	// Required: true
	BeginTime *int64 `json:"begin_time"`

	// Path to results database.
	ContentPath string `json:"content_path,omitempty"`

	// Resource to call with DELETE to remove results..
	DeleteLink string `json:"delete_link,omitempty"`

	// Unix Epoch time of end of results collection job.
	// Required: true
	EndTime *int64 `json:"end_time"`

	// State of the result set.
	// Required: true
	// Enum: [unknown work reduce publish]
	FsaState *string `json:"fsa_state"`

	// The system generated result set ID.
	// Required: true
	ID *int64 `json:"id"`

	// State information about the FSA Job.
	// Required: true
	JobState []string `json:"job_state"`

	// Resource to call to get result properties.
	// Required: true
	PropertiesLink *string `json:"properties_link"`

	// Size of the result set database in bytes.
	// Required: true
	Size *int64 `json:"size"`

	// FSA version used to create result set.
	// Required: true
	Version *int64 `json:"version"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *FsaResultExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 FsaResult
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.FsaResult = aO0

	// AO1
	var dataAO1 struct {
		BeginTime *int64 `json:"begin_time"`

		ContentPath string `json:"content_path,omitempty"`

		DeleteLink string `json:"delete_link,omitempty"`

		EndTime *int64 `json:"end_time"`

		FsaState *string `json:"fsa_state"`

		ID *int64 `json:"id"`

		JobState []string `json:"job_state"`

		PropertiesLink *string `json:"properties_link"`

		Size *int64 `json:"size"`

		Version *int64 `json:"version"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.BeginTime = dataAO1.BeginTime

	m.ContentPath = dataAO1.ContentPath

	m.DeleteLink = dataAO1.DeleteLink

	m.EndTime = dataAO1.EndTime

	m.FsaState = dataAO1.FsaState

	m.ID = dataAO1.ID

	m.JobState = dataAO1.JobState

	m.PropertiesLink = dataAO1.PropertiesLink

	m.Size = dataAO1.Size

	m.Version = dataAO1.Version

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m FsaResultExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.FsaResult)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		BeginTime *int64 `json:"begin_time"`

		ContentPath string `json:"content_path,omitempty"`

		DeleteLink string `json:"delete_link,omitempty"`

		EndTime *int64 `json:"end_time"`

		FsaState *string `json:"fsa_state"`

		ID *int64 `json:"id"`

		JobState []string `json:"job_state"`

		PropertiesLink *string `json:"properties_link"`

		Size *int64 `json:"size"`

		Version *int64 `json:"version"`
	}

	dataAO1.BeginTime = m.BeginTime

	dataAO1.ContentPath = m.ContentPath

	dataAO1.DeleteLink = m.DeleteLink

	dataAO1.EndTime = m.EndTime

	dataAO1.FsaState = m.FsaState

	dataAO1.ID = m.ID

	dataAO1.JobState = m.JobState

	dataAO1.PropertiesLink = m.PropertiesLink

	dataAO1.Size = m.Size

	dataAO1.Version = m.Version

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this fsa result extended
func (m *FsaResultExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with FsaResult
	if err := m.FsaResult.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBeginTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFsaState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJobState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePropertiesLink(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FsaResultExtended) validateBeginTime(formats strfmt.Registry) error {

	if err := validate.Required("begin_time", "body", m.BeginTime); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("end_time", "body", m.EndTime); err != nil {
		return err
	}

	return nil
}

var fsaResultExtendedTypeFsaStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unknown","work","reduce","publish"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fsaResultExtendedTypeFsaStatePropEnum = append(fsaResultExtendedTypeFsaStatePropEnum, v)
	}
}

// property enum
func (m *FsaResultExtended) validateFsaStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fsaResultExtendedTypeFsaStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FsaResultExtended) validateFsaState(formats strfmt.Registry) error {

	if err := validate.Required("fsa_state", "body", m.FsaState); err != nil {
		return err
	}

	// value enum
	if err := m.validateFsaStateEnum("fsa_state", "body", *m.FsaState); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validateJobState(formats strfmt.Registry) error {

	if err := validate.Required("job_state", "body", m.JobState); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validatePropertiesLink(formats strfmt.Registry) error {

	if err := validate.Required("properties_link", "body", m.PropertiesLink); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *FsaResultExtended) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FsaResultExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FsaResultExtended) UnmarshalBinary(b []byte) error {
	var res FsaResultExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
