// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryClientClientItem summary client client item
// swagger:model SummaryClientClientItem
type SummaryClientClientItem struct {

	// The class of the operation.
	// Required: true
	Class *string `json:"class"`

	// Rate of input (in bytes/second) for an operation since the last time isi statistics collected the data.
	// Required: true
	In *float64 `json:"in"`

	// Average input (received) bytes for an operation, in bytes.
	// Required: true
	InAvg *float64 `json:"in_avg"`

	// Maximum input (received) bytes for an operation, in bytes.
	// Required: true
	InMax *float64 `json:"in_max"`

	// Minimum input (received) bytes for an operation, in bytes.
	// Required: true
	InMin *float64 `json:"in_min"`

	// The IP address (in dotted-quad form) of the host receiving the operation request.
	// Required: true
	LocalAddr *string `json:"local_addr"`

	// The resolved text name of the LocalAddr, if resolution can be performed.
	// Required: true
	LocalName *string `json:"local_name"`

	// The node on which the operation was performed.
	Node int64 `json:"node,omitempty"`

	// The number of times an operation has been performed.
	// Required: true
	NumOperations *int64 `json:"num_operations"`

	// The rate (in ops/second) at which an operation has been performed.
	// Required: true
	OperationRate *float64 `json:"operation_rate"`

	// Rate of output (in bytes/second) for an operation since the last time isi statistics collected the data.
	// Required: true
	Out *float64 `json:"out"`

	// Average output (sent) bytes for an operation, in bytes.
	// Required: true
	OutAvg *float64 `json:"out_avg"`

	// Maximum output (sent) bytes for an operation, in bytes.
	// Required: true
	OutMax *float64 `json:"out_max"`

	// Minimum output (sent) bytes for an operation, in bytes.
	// Required: true
	OutMin *float64 `json:"out_min"`

	// The protocol of the operation.
	// Required: true
	Protocol *string `json:"protocol"`

	// The IP address (in dotted-quad form) of the host sending the operation request.
	// Required: true
	RemoteAddr *string `json:"remote_addr"`

	// The resolved text name of the RemoteAddr, if resolution can be performed.
	// Required: true
	RemoteName *string `json:"remote_name"`

	// Unix Epoch time in seconds of the request.
	// Required: true
	Time *int64 `json:"time"`

	// The average elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeAvg *float64 `json:"time_avg"`

	// The maximum elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeMax *float64 `json:"time_max"`

	// The minimum elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeMin *float64 `json:"time_min"`

	// User issuing the operation.
	User *GroupMember `json:"user,omitempty"`
}

// Validate validates this summary client client item
func (m *SummaryClientClientItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteAddr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryClientClientItem) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateIn(formats strfmt.Registry) error {

	if err := validate.Required("in", "body", m.In); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateInAvg(formats strfmt.Registry) error {

	if err := validate.Required("in_avg", "body", m.InAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateInMax(formats strfmt.Registry) error {

	if err := validate.Required("in_max", "body", m.InMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateInMin(formats strfmt.Registry) error {

	if err := validate.Required("in_min", "body", m.InMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateLocalAddr(formats strfmt.Registry) error {

	if err := validate.Required("local_addr", "body", m.LocalAddr); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateLocalName(formats strfmt.Registry) error {

	if err := validate.Required("local_name", "body", m.LocalName); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateNumOperations(formats strfmt.Registry) error {

	if err := validate.Required("num_operations", "body", m.NumOperations); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateOperationRate(formats strfmt.Registry) error {

	if err := validate.Required("operation_rate", "body", m.OperationRate); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateOut(formats strfmt.Registry) error {

	if err := validate.Required("out", "body", m.Out); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateOutAvg(formats strfmt.Registry) error {

	if err := validate.Required("out_avg", "body", m.OutAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateOutMax(formats strfmt.Registry) error {

	if err := validate.Required("out_max", "body", m.OutMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateOutMin(formats strfmt.Registry) error {

	if err := validate.Required("out_min", "body", m.OutMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateRemoteAddr(formats strfmt.Registry) error {

	if err := validate.Required("remote_addr", "body", m.RemoteAddr); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateRemoteName(formats strfmt.Registry) error {

	if err := validate.Required("remote_name", "body", m.RemoteName); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateTimeAvg(formats strfmt.Registry) error {

	if err := validate.Required("time_avg", "body", m.TimeAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateTimeMax(formats strfmt.Registry) error {

	if err := validate.Required("time_max", "body", m.TimeMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateTimeMin(formats strfmt.Registry) error {

	if err := validate.Required("time_min", "body", m.TimeMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryClientClientItem) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryClientClientItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryClientClientItem) UnmarshalBinary(b []byte) error {
	var res SummaryClientClientItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
