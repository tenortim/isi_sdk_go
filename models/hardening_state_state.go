// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardeningStateState hardening state state
// swagger:model HardeningStateState
type HardeningStateState struct {

	// Full path name of issues file. This file contains all issues found when the cluster configuration is checked against expected configuration.
	IssuesFile string `json:"issues_file,omitempty"`

	// This contains more information and details about the operation state.
	Message string `json:"message,omitempty"`

	// The state of the hardening operation. In case there is no operation currently going on, this will display the last state of operation.
	// Enum: [Disabled Checking_Before_Apply Issues_Found_Before_Apply Applying Enabled Checking_Before_Revert Issues_Found_Before_Revert Reverting Failed Resolving Issues_Resolved No_Issues_Found Resolved_failed Issues_Found_In_Report No_Issues_Found_In_Report Other]
	State string `json:"state,omitempty"`
}

// Validate validates this hardening state state
func (m *HardeningStateState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hardeningStateStateTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Disabled","Checking_Before_Apply","Issues_Found_Before_Apply","Applying","Enabled","Checking_Before_Revert","Issues_Found_Before_Revert","Reverting","Failed","Resolving","Issues_Resolved","No_Issues_Found","Resolved_failed","Issues_Found_In_Report","No_Issues_Found_In_Report","Other"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardeningStateStateTypeStatePropEnum = append(hardeningStateStateTypeStatePropEnum, v)
	}
}

const (

	// HardeningStateStateStateDisabled captures enum value "Disabled"
	HardeningStateStateStateDisabled string = "Disabled"

	// HardeningStateStateStateCheckingBeforeApply captures enum value "Checking_Before_Apply"
	HardeningStateStateStateCheckingBeforeApply string = "Checking_Before_Apply"

	// HardeningStateStateStateIssuesFoundBeforeApply captures enum value "Issues_Found_Before_Apply"
	HardeningStateStateStateIssuesFoundBeforeApply string = "Issues_Found_Before_Apply"

	// HardeningStateStateStateApplying captures enum value "Applying"
	HardeningStateStateStateApplying string = "Applying"

	// HardeningStateStateStateEnabled captures enum value "Enabled"
	HardeningStateStateStateEnabled string = "Enabled"

	// HardeningStateStateStateCheckingBeforeRevert captures enum value "Checking_Before_Revert"
	HardeningStateStateStateCheckingBeforeRevert string = "Checking_Before_Revert"

	// HardeningStateStateStateIssuesFoundBeforeRevert captures enum value "Issues_Found_Before_Revert"
	HardeningStateStateStateIssuesFoundBeforeRevert string = "Issues_Found_Before_Revert"

	// HardeningStateStateStateReverting captures enum value "Reverting"
	HardeningStateStateStateReverting string = "Reverting"

	// HardeningStateStateStateFailed captures enum value "Failed"
	HardeningStateStateStateFailed string = "Failed"

	// HardeningStateStateStateResolving captures enum value "Resolving"
	HardeningStateStateStateResolving string = "Resolving"

	// HardeningStateStateStateIssuesResolved captures enum value "Issues_Resolved"
	HardeningStateStateStateIssuesResolved string = "Issues_Resolved"

	// HardeningStateStateStateNoIssuesFound captures enum value "No_Issues_Found"
	HardeningStateStateStateNoIssuesFound string = "No_Issues_Found"

	// HardeningStateStateStateResolvedFailed captures enum value "Resolved_failed"
	HardeningStateStateStateResolvedFailed string = "Resolved_failed"

	// HardeningStateStateStateIssuesFoundInReport captures enum value "Issues_Found_In_Report"
	HardeningStateStateStateIssuesFoundInReport string = "Issues_Found_In_Report"

	// HardeningStateStateStateNoIssuesFoundInReport captures enum value "No_Issues_Found_In_Report"
	HardeningStateStateStateNoIssuesFoundInReport string = "No_Issues_Found_In_Report"

	// HardeningStateStateStateOther captures enum value "Other"
	HardeningStateStateStateOther string = "Other"
)

// prop value enum
func (m *HardeningStateState) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardeningStateStateTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardeningStateState) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardeningStateState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardeningStateState) UnmarshalBinary(b []byte) error {
	var res HardeningStateState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
