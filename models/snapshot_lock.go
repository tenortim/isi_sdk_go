// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotLock snapshot lock
// swagger:model SnapshotLock
type SnapshotLock struct {

	// The Unix Epoch time the snapshot lock will expire and be eligible for automatic deletion.
	// Maximum: 2.147483647e+09
	// Minimum: 1
	Expires int64 `json:"expires,omitempty"`
}

// Validate validates this snapshot lock
func (m *SnapshotLock) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExpires(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotLock) validateExpires(formats strfmt.Registry) error {

	if swag.IsZero(m.Expires) { // not required
		return nil
	}

	if err := validate.MinimumInt("expires", "body", int64(m.Expires), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("expires", "body", int64(m.Expires), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotLock) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotLock) UnmarshalBinary(b []byte) error {
	var res SnapshotLock
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
