// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DedupeDedupeSummarySummary dedupe dedupe summary summary
// swagger:model DedupeDedupeSummarySummary
type DedupeDedupeSummarySummary struct {

	// Size in bytes of a filesystem block.
	// Required: true
	BlockSize *float64 `json:"block_size"`

	// Estimated number of physical blocks deduped.
	// Required: true
	EstimatedPhysicalBlocks *float64 `json:"estimated_physical_blocks"`

	// Estimated number of physical blocks saved by dedupe.
	// Required: true
	EstimatedSavedBlocks *float64 `json:"estimated_saved_blocks"`

	// Number of logical blocks deduped.
	// Required: true
	LogicalBlocks *float64 `json:"logical_blocks"`

	// Number of logical blocks saved by dedupe.
	// Required: true
	SavedLogicalBlocks *float64 `json:"saved_logical_blocks"`

	// Total physical blocks in the cluster.
	// Required: true
	TotalBlocks *float64 `json:"total_blocks"`

	// Total physical blocks used in the cluster.
	// Required: true
	UsedBlocks *float64 `json:"used_blocks"`
}

// Validate validates this dedupe dedupe summary summary
func (m *DedupeDedupeSummarySummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlockSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedPhysicalBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEstimatedSavedBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSavedLogicalBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotalBlocks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedBlocks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DedupeDedupeSummarySummary) validateBlockSize(formats strfmt.Registry) error {

	if err := validate.Required("block_size", "body", m.BlockSize); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateEstimatedPhysicalBlocks(formats strfmt.Registry) error {

	if err := validate.Required("estimated_physical_blocks", "body", m.EstimatedPhysicalBlocks); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateEstimatedSavedBlocks(formats strfmt.Registry) error {

	if err := validate.Required("estimated_saved_blocks", "body", m.EstimatedSavedBlocks); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateLogicalBlocks(formats strfmt.Registry) error {

	if err := validate.Required("logical_blocks", "body", m.LogicalBlocks); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateSavedLogicalBlocks(formats strfmt.Registry) error {

	if err := validate.Required("saved_logical_blocks", "body", m.SavedLogicalBlocks); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateTotalBlocks(formats strfmt.Registry) error {

	if err := validate.Required("total_blocks", "body", m.TotalBlocks); err != nil {
		return err
	}

	return nil
}

func (m *DedupeDedupeSummarySummary) validateUsedBlocks(formats strfmt.Registry) error {

	if err := validate.Required("used_blocks", "body", m.UsedBlocks); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DedupeDedupeSummarySummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DedupeDedupeSummarySummary) UnmarshalBinary(b []byte) error {
	var res DedupeDedupeSummarySummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
