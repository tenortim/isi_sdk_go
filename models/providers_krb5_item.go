// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvidersKrb5Item Specifies properties for the Kerberos authentication provider.
// swagger:model ProvidersKrb5Item
type ProvidersKrb5Item struct {

	// Groupnet identifier.
	Groupnet string `json:"groupnet,omitempty"`

	// Specifies the key information for the Kerberos SPN.
	KeytabEntries []*ProvidersKrb5IDParamsKeytabEntry `json:"keytab_entries"`

	// Specifies the path to a keytab file to import.
	KeytabFile string `json:"keytab_file,omitempty"`

	// If true, keys are managed manually. If false, keys are managed through kadmin.
	ManualKeying bool `json:"manual_keying,omitempty"`

	// Specifies the Kerberos provider name.
	Name string `json:"name,omitempty"`

	// Specifies the Kerberos provider password.
	Password string `json:"password,omitempty"`

	// Specifies the name of realm.
	// Required: true
	Realm *string `json:"realm"`

	// Specifies the name of the user that performs kadmin tasks.
	User string `json:"user,omitempty"`
}

// Validate validates this providers krb5 item
func (m *ProvidersKrb5Item) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeytabEntries(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvidersKrb5Item) validateKeytabEntries(formats strfmt.Registry) error {

	if swag.IsZero(m.KeytabEntries) { // not required
		return nil
	}

	for i := 0; i < len(m.KeytabEntries); i++ {
		if swag.IsZero(m.KeytabEntries[i]) { // not required
			continue
		}

		if m.KeytabEntries[i] != nil {
			if err := m.KeytabEntries[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keytab_entries" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ProvidersKrb5Item) validateRealm(formats strfmt.Registry) error {

	if err := validate.Required("realm", "body", m.Realm); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvidersKrb5Item) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidersKrb5Item) UnmarshalBinary(b []byte) error {
	var res ProvidersKrb5Item
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
