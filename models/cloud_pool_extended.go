// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudPoolExtended cloud pool extended
// swagger:model CloudPoolExtended
type CloudPoolExtended struct {
	CloudPool

	// A unique name for this pool
	ID string `json:"id,omitempty"`

	// Indicates whether this pool is in a good state ("OK") or disabled ("disabled")
	// Enum: [OK disabled]
	State string `json:"state,omitempty"`

	// Gives further information to describe the state of this pool
	StateDetails string `json:"state_details,omitempty"`

	// The type of cloud protocol required.  E.g., "isilon" for EMC Isilon, "ecs" for EMC ECS Appliance, "virtustream" for Virtustream Storage Cloud, "azure" for Microsoft Azure and "s3" for Amazon S3
	// Enum: [isilon ecs virtustream azure s3 ran ecs2]
	Type string `json:"type,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CloudPoolExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CloudPool
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CloudPool = aO0

	// AO1
	var dataAO1 struct {
		ID string `json:"id,omitempty"`

		State string `json:"state,omitempty"`

		StateDetails string `json:"state_details,omitempty"`

		Type string `json:"type,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ID = dataAO1.ID

	m.State = dataAO1.State

	m.StateDetails = dataAO1.StateDetails

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CloudPoolExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CloudPool)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ID string `json:"id,omitempty"`

		State string `json:"state,omitempty"`

		StateDetails string `json:"state_details,omitempty"`

		Type string `json:"type,omitempty"`
	}

	dataAO1.ID = m.ID

	dataAO1.State = m.State

	dataAO1.StateDetails = m.StateDetails

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this cloud pool extended
func (m *CloudPoolExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CloudPool
	if err := m.CloudPool.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudPoolExtendedTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudPoolExtendedTypeStatePropEnum = append(cloudPoolExtendedTypeStatePropEnum, v)
	}
}

// property enum
func (m *CloudPoolExtended) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudPoolExtendedTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudPoolExtended) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var cloudPoolExtendedTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["isilon","ecs","virtustream","azure","s3","ran","ecs2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudPoolExtendedTypeTypePropEnum = append(cloudPoolExtendedTypeTypePropEnum, v)
	}
}

// property enum
func (m *CloudPoolExtended) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudPoolExtendedTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudPoolExtended) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudPoolExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudPoolExtended) UnmarshalBinary(b []byte) error {
	var res CloudPoolExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
