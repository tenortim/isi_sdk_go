// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryProtocolProtocolItem summary protocol protocol item
// swagger:model SummaryProtocolProtocolItem
type SummaryProtocolProtocolItem struct {

	// The class of the operation.
	// Required: true
	Class *string `json:"class"`

	// Rate of input (in bytes/second) for an operation since the last time isi statistics collected the data.
	// Required: true
	In *float64 `json:"in"`

	// Average input (received) bytes for an operation, in bytes.
	// Required: true
	InAvg *float64 `json:"in_avg"`

	// Maximum input (received) bytes for an operation, in bytes.
	// Required: true
	InMax *float64 `json:"in_max"`

	// Minimum input (received) bytes for an operation, in bytes.
	// Required: true
	InMin *float64 `json:"in_min"`

	// Standard deviation for input (received) bytes for an operation, in bytes.
	// Required: true
	InStandardDev *float64 `json:"in_standard_dev"`

	// The node on which the operation was performed.
	Node int64 `json:"node,omitempty"`

	// The operation performed.
	// Required: true
	Operation *string `json:"operation"`

	// The number of times an operation has been performed.
	// Required: true
	OperationCount *int64 `json:"operation_count"`

	// The rate (in ops/second) at which an operation has been performed.
	// Required: true
	OperationRate *float64 `json:"operation_rate"`

	// Rate of output (in bytes/second) for an operation since the last time isi statistics collected the data.
	// Required: true
	Out *float64 `json:"out"`

	// Average output (sent) bytes for an operation, in bytes.
	// Required: true
	OutAvg *float64 `json:"out_avg"`

	// Maximum output (sent) bytes for an operation, in bytes.
	// Required: true
	OutMax *float64 `json:"out_max"`

	// Minimum output (sent) bytes for an operation, in bytes.
	// Required: true
	OutMin *float64 `json:"out_min"`

	// Standard deviation for output (received) bytes for an operation, in bytes.
	// Required: true
	OutStandardDev *float64 `json:"out_standard_dev"`

	// The protocol of the operation.
	// Required: true
	Protocol *string `json:"protocol"`

	// Unix Epoch time in seconds of the request.
	// Required: true
	Time *int64 `json:"time"`

	// The average elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeAvg *float64 `json:"time_avg"`

	// The maximum elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeMax *float64 `json:"time_max"`

	// The minimum elapsed time (in microseconds) taken to complete an operation.
	// Required: true
	TimeMin *float64 `json:"time_min"`

	// The standard deviation time (in microseconds) taken to complete an operation.
	// Required: true
	TimeStandardDev *float64 `json:"time_standard_dev"`
}

// Validate validates this summary protocol protocol item
func (m *SummaryProtocolProtocolItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClass(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInStandardDev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutStandardDev(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeAvg(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMax(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeMin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeStandardDev(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryProtocolProtocolItem) validateClass(formats strfmt.Registry) error {

	if err := validate.Required("class", "body", m.Class); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateIn(formats strfmt.Registry) error {

	if err := validate.Required("in", "body", m.In); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateInAvg(formats strfmt.Registry) error {

	if err := validate.Required("in_avg", "body", m.InAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateInMax(formats strfmt.Registry) error {

	if err := validate.Required("in_max", "body", m.InMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateInMin(formats strfmt.Registry) error {

	if err := validate.Required("in_min", "body", m.InMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateInStandardDev(formats strfmt.Registry) error {

	if err := validate.Required("in_standard_dev", "body", m.InStandardDev); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOperationCount(formats strfmt.Registry) error {

	if err := validate.Required("operation_count", "body", m.OperationCount); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOperationRate(formats strfmt.Registry) error {

	if err := validate.Required("operation_rate", "body", m.OperationRate); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOut(formats strfmt.Registry) error {

	if err := validate.Required("out", "body", m.Out); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOutAvg(formats strfmt.Registry) error {

	if err := validate.Required("out_avg", "body", m.OutAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOutMax(formats strfmt.Registry) error {

	if err := validate.Required("out_max", "body", m.OutMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOutMin(formats strfmt.Registry) error {

	if err := validate.Required("out_min", "body", m.OutMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateOutStandardDev(formats strfmt.Registry) error {

	if err := validate.Required("out_standard_dev", "body", m.OutStandardDev); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateTimeAvg(formats strfmt.Registry) error {

	if err := validate.Required("time_avg", "body", m.TimeAvg); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateTimeMax(formats strfmt.Registry) error {

	if err := validate.Required("time_max", "body", m.TimeMax); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateTimeMin(formats strfmt.Registry) error {

	if err := validate.Required("time_min", "body", m.TimeMin); err != nil {
		return err
	}

	return nil
}

func (m *SummaryProtocolProtocolItem) validateTimeStandardDev(formats strfmt.Registry) error {

	if err := validate.Required("time_standard_dev", "body", m.TimeStandardDev); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryProtocolProtocolItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryProtocolProtocolItem) UnmarshalBinary(b []byte) error {
	var res SummaryProtocolProtocolItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
