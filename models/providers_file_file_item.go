// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvidersFileFileItem providers file file item
// swagger:model ProvidersFileFileItem
type ProvidersFileFileItem struct {

	// Enables authentication and identity mapping through the authentication provider.
	Authentication bool `json:"authentication,omitempty"`

	// Automatically creates a home directory on the first login.
	CreateHomeDirectory bool `json:"create_home_directory,omitempty"`

	// Enables the file provider.
	Enabled bool `json:"enabled,omitempty"`

	// Enables the provider to enumerate groups.
	EnumerateGroups bool `json:"enumerate_groups,omitempty"`

	// Enables the provider to enumerate users.
	EnumerateUsers bool `json:"enumerate_users,omitempty"`

	// Specifies the list of groups that can be resolved.
	FindableGroups []string `json:"findable_groups"`

	// Specifies the list of users that can be resolved.
	FindableUsers []string `json:"findable_users"`

	// Specifies the domain for this provider through which domains are qualified.
	GroupDomain string `json:"group_domain,omitempty"`

	// Specifies the location of the file that contains information about the group.
	GroupFile string `json:"group_file,omitempty"`

	// Specifies the path to the home directory template.
	HomeDirectoryTemplate string `json:"home_directory_template,omitempty"`

	// Specifies the file provider ID.
	ID string `json:"id,omitempty"`

	// Specifies the groups that can be viewed in the provider.
	ListableGroups []string `json:"listable_groups"`

	// Specifies the users that can be viewed in the provider.
	ListableUsers []string `json:"listable_users"`

	// Specifies the login shell path.
	LoginShell string `json:"login_shell,omitempty"`

	// Specifies the groups that can be modified in the provider.
	ModifiableGroups []string `json:"modifiable_groups"`

	// Specifies the users that can be modified in the provider.
	ModifiableUsers []string `json:"modifiable_users"`

	// Specifies the name of the file provider.
	Name string `json:"name,omitempty"`

	// Specifies the path to a netgroups replacement file.
	NetgroupFile string `json:"netgroup_file,omitempty"`

	// Normalizes group names to lowercase before look up.
	NormalizeGroups bool `json:"normalize_groups,omitempty"`

	// Normalizes user names to lowercase before look up.
	NormalizeUsers bool `json:"normalize_users,omitempty"`

	// Specifies which NTLM versions to support for users with NTLM-compatible credentials.
	// Enum: [all v2only none]
	NtlmSupport string `json:"ntlm_support,omitempty"`

	// Specifies the location of the file containing information about users.
	PasswordFile string `json:"password_file,omitempty"`

	// Specifies the domain for the provider.
	ProviderDomain string `json:"provider_domain,omitempty"`

	// If true, checks the provider for filtered lists of findable and unfindable users and groups.
	RestrictFindable bool `json:"restrict_findable,omitempty"`

	// If true, checks the provider for filtered lists of listable and unlistable users and groups.
	RestrictListable bool `json:"restrict_listable,omitempty"`

	// If true, checks the provider for filtered lists of modifiable and unmodifiable users and groups.
	RestrictModifiable bool `json:"restrict_modifiable,omitempty"`

	// Specifies the status of the provider.
	Status string `json:"status,omitempty"`

	// If true, indicates that this provider instance was created by OneFS and cannot be removed.
	System bool `json:"system,omitempty"`

	// Specifies groups that cannot be resolved by the provider.
	UnfindableGroups []string `json:"unfindable_groups"`

	// Specifies users that cannot be resolved by the provider.
	UnfindableUsers []string `json:"unfindable_users"`

	// Specifies a group that cannot be listed by the provider.
	UnlistableGroups []string `json:"unlistable_groups"`

	// Specifies a user that cannot be listed by the provider.
	UnlistableUsers []string `json:"unlistable_users"`

	// Specifies a group that cannot be modified by the provider.
	UnmodifiableGroups []string `json:"unmodifiable_groups"`

	// Specifies a user that cannot be modified by the provider.
	UnmodifiableUsers []string `json:"unmodifiable_users"`

	// Specifies the domain for this provider through which users are qualified.
	UserDomain string `json:"user_domain,omitempty"`
}

// Validate validates this providers file file item
func (m *ProvidersFileFileItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNtlmSupport(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var providersFileFileItemTypeNtlmSupportPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","v2only","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersFileFileItemTypeNtlmSupportPropEnum = append(providersFileFileItemTypeNtlmSupportPropEnum, v)
	}
}

const (

	// ProvidersFileFileItemNtlmSupportAll captures enum value "all"
	ProvidersFileFileItemNtlmSupportAll string = "all"

	// ProvidersFileFileItemNtlmSupportV2only captures enum value "v2only"
	ProvidersFileFileItemNtlmSupportV2only string = "v2only"

	// ProvidersFileFileItemNtlmSupportNone captures enum value "none"
	ProvidersFileFileItemNtlmSupportNone string = "none"
)

// prop value enum
func (m *ProvidersFileFileItem) validateNtlmSupportEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersFileFileItemTypeNtlmSupportPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersFileFileItem) validateNtlmSupport(formats strfmt.Registry) error {

	if swag.IsZero(m.NtlmSupport) { // not required
		return nil
	}

	// value enum
	if err := m.validateNtlmSupportEnum("ntlm_support", "body", m.NtlmSupport); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvidersFileFileItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidersFileFileItem) UnmarshalBinary(b []byte) error {
	var res ProvidersFileFileItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
