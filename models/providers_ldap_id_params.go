// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ProvidersLdapIDParams Specifies the properties for the LDAP authentication provider.
// swagger:model ProvidersLdapIdParams
type ProvidersLdapIDParams struct {

	// Specifies the attribute name used when searching for alternate security identities.
	AlternateSecurityIdentitiesAttribute string `json:"alternate_security_identities_attribute,omitempty"`

	// If true, enables authentication and identity management through the authentication provider.
	Authentication bool `json:"authentication,omitempty"`

	// If true, connects the provider to a random server.
	BalanceServers bool `json:"balance_servers,omitempty"`

	// Specifies the root of the tree in which to search identities.
	BaseDn string `json:"base_dn,omitempty"`

	// Specifies the distinguished name for binding to the LDAP server.
	BindDn string `json:"bind_dn,omitempty"`

	// Specifies which bind mechanism to use when connecting to an LDAP server. The only supported option is the 'simple' value.
	BindMechanism string `json:"bind_mechanism,omitempty"`

	// Specifies the password for the distinguished name for binding to the LDAP server.
	BindPassword string `json:"bind_password,omitempty"`

	// Specifies the timeout in seconds when binding to an LDAP server.
	BindTimeout int64 `json:"bind_timeout,omitempty"`

	// Specifies the path to the root certificates file.
	CertificateAuthorityFile string `json:"certificate_authority_file,omitempty"`

	// Specifies the time in seconds between provider online checks.
	CheckOnlineInterval int64 `json:"check_online_interval,omitempty"`

	// Specifies the canonical name.
	CnAttribute string `json:"cn_attribute,omitempty"`

	// Automatically create the home directory on the first login.
	CreateHomeDirectory bool `json:"create_home_directory,omitempty"`

	// Specifies the hashed password value.
	CryptPasswordAttribute string `json:"crypt_password_attribute,omitempty"`

	// Specifies the LDAP Email attribute.
	EmailAttribute string `json:"email_attribute,omitempty"`

	// If true, enables the LDAP provider.
	Enabled bool `json:"enabled,omitempty"`

	// If true, allows the provider to enumerate groups.
	EnumerateGroups bool `json:"enumerate_groups,omitempty"`

	// If true, allows the provider to enumerate users.
	EnumerateUsers bool `json:"enumerate_users,omitempty"`

	// Specifies the list of groups that can be resolved.
	FindableGroups []string `json:"findable_groups"`

	// Specifies the list of users that can be resolved.
	FindableUsers []string `json:"findable_users"`

	// Specifies the LDAP GECOS attribute.
	GecosAttribute string `json:"gecos_attribute,omitempty"`

	// Specifies the LDAP GID attribute.
	GidAttribute string `json:"gid_attribute,omitempty"`

	// Specifies the distinguished name of the entry where LDAP searches for groups are started.
	GroupBaseDn string `json:"group_base_dn,omitempty"`

	// Specifies the domain for this provider through which groups are qualified.
	GroupDomain string `json:"group_domain,omitempty"`

	// Specifies the LDAP filter for group objects.
	GroupFilter string `json:"group_filter,omitempty"`

	// Specifies the LDAP Group Members attribute.
	GroupMembersAttribute string `json:"group_members_attribute,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	GroupSearchScope string `json:"group_search_scope,omitempty"`

	// Specifies the path to the home directory template.
	HomeDirectoryTemplate string `json:"home_directory_template,omitempty"`

	// Specifies the LDAP Homedir attribute.
	HomedirAttribute string `json:"homedir_attribute,omitempty"`

	// If true, continues over secure connections even if identity checks fail.
	IgnoreTLSErrors bool `json:"ignore_tls_errors,omitempty"`

	// Specifies the groups that can be viewed in the provider.
	ListableGroups []string `json:"listable_groups"`

	// Specifies the users that can be viewed in the provider.
	ListableUsers []string `json:"listable_users"`

	// Specifies the login shell path.
	LoginShell string `json:"login_shell,omitempty"`

	// Specifies the LDAP Query Member Of attribute, which performs reverse membership queries.
	MemberOfAttribute string `json:"member_of_attribute,omitempty"`

	// Specifies the name of the LDAP provider.
	Name string `json:"name,omitempty"`

	// Specifies the LDAP UID attribute, which is used as the login name.
	NameAttribute string `json:"name_attribute,omitempty"`

	// Specifies the distinguished name of the entry where LDAP searches for netgroups are started.
	NetgroupBaseDn string `json:"netgroup_base_dn,omitempty"`

	// Specifies the LDAP filter for netgroup objects.
	NetgroupFilter string `json:"netgroup_filter,omitempty"`

	// Specifies the LDAP Netgroup Members attribute.
	NetgroupMembersAttribute string `json:"netgroup_members_attribute,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	NetgroupSearchScope string `json:"netgroup_search_scope,omitempty"`

	// Specifies the LDAP Netgroup Triple attribute.
	NetgroupTripleAttribute string `json:"netgroup_triple_attribute,omitempty"`

	// Normalizes group names to lowercase before look up.
	NormalizeGroups bool `json:"normalize_groups,omitempty"`

	// Normalizes user names to lowercase before look up.
	NormalizeUsers bool `json:"normalize_users,omitempty"`

	// Specifies the LDAP NT Password attribute.
	NtPasswordAttribute string `json:"nt_password_attribute,omitempty"`

	// Specifies which NTLM versions to support for users with NTLM-compatible credentials.
	NtlmSupport string `json:"ntlm_support,omitempty"`

	// Specifies the provider domain.
	ProviderDomain string `json:"provider_domain,omitempty"`

	// Determines whether to continue over a non-TLS connection.
	RequireSecureConnection bool `json:"require_secure_connection,omitempty"`

	// If true, checks the provider for filtered lists of findable and unfindable users and groups.
	RestrictFindable bool `json:"restrict_findable,omitempty"`

	// If true, checks the provider for filtered lists of listable and unlistable users and groups.
	RestrictListable bool `json:"restrict_listable,omitempty"`

	// Specifies the default depth from the base DN to perform LDAP searches.
	SearchScope string `json:"search_scope,omitempty"`

	// Specifies the search timeout period in seconds.
	SearchTimeout int64 `json:"search_timeout,omitempty"`

	// Specifies the server URIs.
	ServerUris []string `json:"server_uris"`

	// Specifies the the LDAP Shell attribute.
	ShellAttribute string `json:"shell_attribute,omitempty"`

	// Specifies the the LDAP UID Number attribute.
	UIDAttribute string `json:"uid_attribute,omitempty"`

	// Specifies the groups that cannot be resolved by the provider.
	UnfindableGroups []string `json:"unfindable_groups"`

	// Specifies users that cannot be resolved by the provider.
	UnfindableUsers []string `json:"unfindable_users"`

	// Sets the LDAP Unique Group Members attribute.
	UniqueGroupMembersAttribute string `json:"unique_group_members_attribute,omitempty"`

	// Specifies a group that cannot be listed by the provider.
	UnlistableGroups []string `json:"unlistable_groups"`

	// Specifies a user that cannot be listed by the provider.
	UnlistableUsers []string `json:"unlistable_users"`

	// Specifies the distinguished name of the entry at which to start LDAP searches for users.
	UserBaseDn string `json:"user_base_dn,omitempty"`

	// Specifies the domain for this provider through which users are qualified.
	UserDomain string `json:"user_domain,omitempty"`

	// Specifies the LDAP filter for user objects.
	UserFilter string `json:"user_filter,omitempty"`

	// Specifies the depth from the base DN to perform LDAP searches.
	UserSearchScope string `json:"user_search_scope,omitempty"`
}

// Validate validates this providers ldap Id params
func (m *ProvidersLdapIDParams) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProvidersLdapIDParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidersLdapIDParams) UnmarshalBinary(b []byte) error {
	var res ProvidersLdapIDParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
