// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkDnscacheExtended network dnscache extended
// swagger:model NetworkDnscacheExtended
type NetworkDnscacheExtended struct {

	// DNS cache entry limit
	// Maximum: 1.048576e+06
	// Minimum: 1024
	CacheEntryLimit int64 `json:"cache_entry_limit,omitempty"`

	// Timeout value for calls made to other nodes in the cluster
	// Maximum: 30
	// Minimum: 1
	ClusterTimeout int64 `json:"cluster_timeout,omitempty"`

	// Timeout value for calls made to the dns resolvers
	// Maximum: 30
	// Minimum: 1
	DNSTimeout int64 `json:"dns_timeout,omitempty"`

	// Lead time to refresh cache entries nearing expiration
	// Maximum: 60
	// Minimum: 0
	EagerRefresh *int64 `json:"eager_refresh,omitempty"`

	// Deltas for checking cbind cluster health
	// Maximum: 60
	// Minimum: 0
	TestpingDelta *int64 `json:"testping_delta,omitempty"`

	// Upper bound on ttl for cache hits
	// Maximum: 3600
	// Minimum: 0
	TTLMaxNoerror *int64 `json:"ttl_max_noerror,omitempty"`

	// Upper bound on ttl for nxdomain
	// Maximum: 3600
	// Minimum: 0
	TTLMaxNxdomain *int64 `json:"ttl_max_nxdomain,omitempty"`

	// Upper bound on ttl for non-nxdomain failures
	// Maximum: 3600
	// Minimum: 0
	TTLMaxOther *int64 `json:"ttl_max_other,omitempty"`

	// Upper bound on ttl for server failures
	// Maximum: 3600
	// Minimum: 0
	TTLMaxServfail *int64 `json:"ttl_max_servfail,omitempty"`

	// Lower bound on ttl for cache hits
	// Maximum: 3600
	// Minimum: 0
	TTLMinNoerror *int64 `json:"ttl_min_noerror,omitempty"`

	// Lower bound on ttl for nxdomain
	// Maximum: 3600
	// Minimum: 0
	TTLMinNxdomain *int64 `json:"ttl_min_nxdomain,omitempty"`

	// Lower bound on ttl for non-nxdomain failures
	// Maximum: 3600
	// Minimum: 0
	TTLMinOther *int64 `json:"ttl_min_other,omitempty"`

	// Lower bound on ttl for server failures
	// Maximum: 3600
	// Minimum: 0
	TTLMinServfail *int64 `json:"ttl_min_servfail,omitempty"`
}

// Validate validates this network dnscache extended
func (m *NetworkDnscacheExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacheEntryLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEagerRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestpingDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxNoerror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxNxdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxServfail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinNoerror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinNxdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinServfail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkDnscacheExtended) validateCacheEntryLimit(formats strfmt.Registry) error {

	if swag.IsZero(m.CacheEntryLimit) { // not required
		return nil
	}

	if err := validate.MinimumInt("cache_entry_limit", "body", int64(m.CacheEntryLimit), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cache_entry_limit", "body", int64(m.CacheEntryLimit), 1.048576e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateClusterTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterTimeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("cluster_timeout", "body", int64(m.ClusterTimeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cluster_timeout", "body", int64(m.ClusterTimeout), 30, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateDNSTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.DNSTimeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("dns_timeout", "body", int64(m.DNSTimeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("dns_timeout", "body", int64(m.DNSTimeout), 30, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateEagerRefresh(formats strfmt.Registry) error {

	if swag.IsZero(m.EagerRefresh) { // not required
		return nil
	}

	if err := validate.MinimumInt("eager_refresh", "body", int64(*m.EagerRefresh), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("eager_refresh", "body", int64(*m.EagerRefresh), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTestpingDelta(formats strfmt.Registry) error {

	if swag.IsZero(m.TestpingDelta) { // not required
		return nil
	}

	if err := validate.MinimumInt("testping_delta", "body", int64(*m.TestpingDelta), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("testping_delta", "body", int64(*m.TestpingDelta), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMaxNoerror(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMaxNoerror) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_max_noerror", "body", int64(*m.TTLMaxNoerror), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_noerror", "body", int64(*m.TTLMaxNoerror), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMaxNxdomain(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMaxNxdomain) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_max_nxdomain", "body", int64(*m.TTLMaxNxdomain), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_nxdomain", "body", int64(*m.TTLMaxNxdomain), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMaxOther(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMaxOther) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_max_other", "body", int64(*m.TTLMaxOther), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_other", "body", int64(*m.TTLMaxOther), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMaxServfail(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMaxServfail) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_max_servfail", "body", int64(*m.TTLMaxServfail), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_servfail", "body", int64(*m.TTLMaxServfail), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMinNoerror(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMinNoerror) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_min_noerror", "body", int64(*m.TTLMinNoerror), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_noerror", "body", int64(*m.TTLMinNoerror), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMinNxdomain(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMinNxdomain) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_min_nxdomain", "body", int64(*m.TTLMinNxdomain), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_nxdomain", "body", int64(*m.TTLMinNxdomain), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMinOther(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMinOther) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_min_other", "body", int64(*m.TTLMinOther), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_other", "body", int64(*m.TTLMinOther), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheExtended) validateTTLMinServfail(formats strfmt.Registry) error {

	if swag.IsZero(m.TTLMinServfail) { // not required
		return nil
	}

	if err := validate.MinimumInt("ttl_min_servfail", "body", int64(*m.TTLMinServfail), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_servfail", "body", int64(*m.TTLMinServfail), 3600, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkDnscacheExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkDnscacheExtended) UnmarshalBinary(b []byte) error {
	var res NetworkDnscacheExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
