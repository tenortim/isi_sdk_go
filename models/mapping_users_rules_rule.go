// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MappingUsersRulesRule mapping users rules rule
// swagger:model MappingUsersRulesRule
type MappingUsersRulesRule struct {

	// Specifies the operator to make rules on specified users or groups.
	// Enum: [append insert replace trim union]
	Operator string `json:"operator,omitempty"`

	// Specifies the properties for user mapping rules.
	Options *MappingUsersRulesRuleOptions `json:"options,omitempty"`

	// user1
	User1 *MappingUsersRulesRuleUser2 `json:"user1,omitempty"`

	// user2
	User2 *MappingUsersRulesRuleUser2 `json:"user2,omitempty"`
}

// Validate validates this mapping users rules rule
func (m *MappingUsersRulesRule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperator(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mappingUsersRulesRuleTypeOperatorPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["append","insert","replace","trim","union"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mappingUsersRulesRuleTypeOperatorPropEnum = append(mappingUsersRulesRuleTypeOperatorPropEnum, v)
	}
}

const (

	// MappingUsersRulesRuleOperatorAppend captures enum value "append"
	MappingUsersRulesRuleOperatorAppend string = "append"

	// MappingUsersRulesRuleOperatorInsert captures enum value "insert"
	MappingUsersRulesRuleOperatorInsert string = "insert"

	// MappingUsersRulesRuleOperatorReplace captures enum value "replace"
	MappingUsersRulesRuleOperatorReplace string = "replace"

	// MappingUsersRulesRuleOperatorTrim captures enum value "trim"
	MappingUsersRulesRuleOperatorTrim string = "trim"

	// MappingUsersRulesRuleOperatorUnion captures enum value "union"
	MappingUsersRulesRuleOperatorUnion string = "union"
)

// prop value enum
func (m *MappingUsersRulesRule) validateOperatorEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, mappingUsersRulesRuleTypeOperatorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *MappingUsersRulesRule) validateOperator(formats strfmt.Registry) error {

	if swag.IsZero(m.Operator) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperatorEnum("operator", "body", m.Operator); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersRulesRule) validateOptions(formats strfmt.Registry) error {

	if swag.IsZero(m.Options) { // not required
		return nil
	}

	if m.Options != nil {
		if err := m.Options.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("options")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersRulesRule) validateUser1(formats strfmt.Registry) error {

	if swag.IsZero(m.User1) { // not required
		return nil
	}

	if m.User1 != nil {
		if err := m.User1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user1")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersRulesRule) validateUser2(formats strfmt.Registry) error {

	if swag.IsZero(m.User2) { // not required
		return nil
	}

	if m.User2 != nil {
		if err := m.User2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user2")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MappingUsersRulesRule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MappingUsersRulesRule) UnmarshalBinary(b []byte) error {
	var res MappingUsersRulesRule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
