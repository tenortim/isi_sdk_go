// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// CloudAccount A cloud account object
// swagger:model CloudAccount
type CloudAccount struct {

	// (S3 only) The user id of the S3 account
	AccountID string `json:"account_id,omitempty"`

	// The username required to authenticate against the cloud service
	AccountUsername string `json:"account_username,omitempty"`

	// The guid of the cluster where this account was created
	BirthClusterID string `json:"birth_cluster_id,omitempty"`

	// Whether this account is explicitly enabled or disabled by a user
	Enabled bool `json:"enabled,omitempty"`

	// A valid authentication key for connecting to the cloud
	Key string `json:"key,omitempty"`

	// A unique name for this account
	Name string `json:"name,omitempty"`

	// Indicates whether to skip SSL certificate validation when connecting to the cloud
	SkipSslValidation bool `json:"skip_ssl_validation,omitempty"`

	// (S3 only) An appropriate region for the S3 account.  For example, faster access times may be gained by referencing a nearby region
	StorageRegion string `json:"storage_region,omitempty"`

	// (S3 only) The name of the bucket into which generated metrics reports are placed by the cloud service provider
	TelemetryBucket string `json:"telemetry_bucket,omitempty"`

	// A valid URI pointing to the location of the cloud storage
	URI string `json:"uri,omitempty"`
}

// Validate validates this cloud account
func (m *CloudAccount) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CloudAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudAccount) UnmarshalBinary(b []byte) error {
	var res CloudAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
