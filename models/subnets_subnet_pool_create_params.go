// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SubnetsSubnetPoolCreateParams subnets subnet pool create params
// swagger:model SubnetsSubnetPoolCreateParams
type SubnetsSubnetPoolCreateParams struct {

	// Name of a valid access zone to map IP address pool to the zone.
	// Min Length: 1
	AccessZone string `json:"access_zone,omitempty"`

	// OneFS supports the following NIC aggregation modes.
	// Enum: [roundrobin failover lacp fec]
	AggregationMode string `json:"aggregation_mode,omitempty"`

	// Specifies how IP address allocation is done among pool members.
	// Enum: [dynamic static]
	AllocMethod string `json:"alloc_method,omitempty"`

	// A description of the pool.
	// Max Length: 128
	Description string `json:"description,omitempty"`

	// List of interface members in this pool.
	Ifaces []*SubnetsSubnetPoolIface `json:"ifaces"`

	// The name of the pool. It must be unique throughout the given subnet.It's a required field with POST method.
	// Required: true
	// Max Length: 32
	Name *string `json:"name"`

	// List of IP address ranges in this pool.
	Ranges []*SubnetsSubnetPoolRange `json:"ranges"`

	// Rebalance policy..
	// Enum: [auto manual]
	RebalancePolicy string `json:"rebalance_policy,omitempty"`

	// Time delay in seconds before a node which has been                 automatically unsuspended becomes usable in SmartConnect                responses for pool zones.
	// Maximum: 86400
	// Minimum: 0
	ScAutoUnsuspendDelay *int64 `json:"sc_auto_unsuspend_delay,omitempty"`

	// SmartConnect client connection balancing policy.
	// Enum: [round_robin conn_count throughput cpu_usage]
	ScConnectPolicy string `json:"sc_connect_policy,omitempty"`

	// SmartConnect zone name for the pool.
	ScDNSZone string `json:"sc_dns_zone,omitempty"`

	// List of SmartConnect zone aliases (DNS names) to the pool.
	ScDNSZoneAliases []string `json:"sc_dns_zone_aliases"`

	// SmartConnect IP failover policy.
	// Enum: [round_robin conn_count throughput cpu_usage]
	ScFailoverPolicy string `json:"sc_failover_policy,omitempty"`

	// Name of SmartConnect service subnet for this pool.
	ScSubnet string `json:"sc_subnet,omitempty"`

	// Time to live value for SmartConnect DNS query responses in seconds.
	// Maximum: 2.147483647e+09
	// Minimum: 0
	ScTTL *int64 `json:"sc_ttl,omitempty"`

	// List of interface members in this pool.
	StaticRoutes []*SubnetsSubnetPoolStaticRoute `json:"static_routes"`
}

// Validate validates this subnets subnet pool create params
func (m *SubnetsSubnetPoolCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessZone(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAggregationMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllocMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIfaces(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRanges(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRebalancePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScAutoUnsuspendDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScConnectPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScFailoverPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScTTL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStaticRoutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateAccessZone(formats strfmt.Registry) error {

	if swag.IsZero(m.AccessZone) { // not required
		return nil
	}

	if err := validate.MinLength("access_zone", "body", string(m.AccessZone), 1); err != nil {
		return err
	}

	return nil
}

var subnetsSubnetPoolCreateParamsTypeAggregationModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["roundrobin","failover","lacp","fec"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetsSubnetPoolCreateParamsTypeAggregationModePropEnum = append(subnetsSubnetPoolCreateParamsTypeAggregationModePropEnum, v)
	}
}

const (

	// SubnetsSubnetPoolCreateParamsAggregationModeRoundrobin captures enum value "roundrobin"
	SubnetsSubnetPoolCreateParamsAggregationModeRoundrobin string = "roundrobin"

	// SubnetsSubnetPoolCreateParamsAggregationModeFailover captures enum value "failover"
	SubnetsSubnetPoolCreateParamsAggregationModeFailover string = "failover"

	// SubnetsSubnetPoolCreateParamsAggregationModeLacp captures enum value "lacp"
	SubnetsSubnetPoolCreateParamsAggregationModeLacp string = "lacp"

	// SubnetsSubnetPoolCreateParamsAggregationModeFec captures enum value "fec"
	SubnetsSubnetPoolCreateParamsAggregationModeFec string = "fec"
)

// prop value enum
func (m *SubnetsSubnetPoolCreateParams) validateAggregationModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subnetsSubnetPoolCreateParamsTypeAggregationModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateAggregationMode(formats strfmt.Registry) error {

	if swag.IsZero(m.AggregationMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateAggregationModeEnum("aggregation_mode", "body", m.AggregationMode); err != nil {
		return err
	}

	return nil
}

var subnetsSubnetPoolCreateParamsTypeAllocMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["dynamic","static"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetsSubnetPoolCreateParamsTypeAllocMethodPropEnum = append(subnetsSubnetPoolCreateParamsTypeAllocMethodPropEnum, v)
	}
}

const (

	// SubnetsSubnetPoolCreateParamsAllocMethodDynamic captures enum value "dynamic"
	SubnetsSubnetPoolCreateParamsAllocMethodDynamic string = "dynamic"

	// SubnetsSubnetPoolCreateParamsAllocMethodStatic captures enum value "static"
	SubnetsSubnetPoolCreateParamsAllocMethodStatic string = "static"
)

// prop value enum
func (m *SubnetsSubnetPoolCreateParams) validateAllocMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subnetsSubnetPoolCreateParamsTypeAllocMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateAllocMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.AllocMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateAllocMethodEnum("alloc_method", "body", m.AllocMethod); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MaxLength("description", "body", string(m.Description), 128); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateIfaces(formats strfmt.Registry) error {

	if swag.IsZero(m.Ifaces) { // not required
		return nil
	}

	for i := 0; i < len(m.Ifaces); i++ {
		if swag.IsZero(m.Ifaces[i]) { // not required
			continue
		}

		if m.Ifaces[i] != nil {
			if err := m.Ifaces[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ifaces" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 32); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateRanges(formats strfmt.Registry) error {

	if swag.IsZero(m.Ranges) { // not required
		return nil
	}

	for i := 0; i < len(m.Ranges); i++ {
		if swag.IsZero(m.Ranges[i]) { // not required
			continue
		}

		if m.Ranges[i] != nil {
			if err := m.Ranges[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ranges" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var subnetsSubnetPoolCreateParamsTypeRebalancePolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","manual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetsSubnetPoolCreateParamsTypeRebalancePolicyPropEnum = append(subnetsSubnetPoolCreateParamsTypeRebalancePolicyPropEnum, v)
	}
}

const (

	// SubnetsSubnetPoolCreateParamsRebalancePolicyAuto captures enum value "auto"
	SubnetsSubnetPoolCreateParamsRebalancePolicyAuto string = "auto"

	// SubnetsSubnetPoolCreateParamsRebalancePolicyManual captures enum value "manual"
	SubnetsSubnetPoolCreateParamsRebalancePolicyManual string = "manual"
)

// prop value enum
func (m *SubnetsSubnetPoolCreateParams) validateRebalancePolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subnetsSubnetPoolCreateParamsTypeRebalancePolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateRebalancePolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.RebalancePolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateRebalancePolicyEnum("rebalance_policy", "body", m.RebalancePolicy); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateScAutoUnsuspendDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.ScAutoUnsuspendDelay) { // not required
		return nil
	}

	if err := validate.MinimumInt("sc_auto_unsuspend_delay", "body", int64(*m.ScAutoUnsuspendDelay), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sc_auto_unsuspend_delay", "body", int64(*m.ScAutoUnsuspendDelay), 86400, false); err != nil {
		return err
	}

	return nil
}

var subnetsSubnetPoolCreateParamsTypeScConnectPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["round_robin","conn_count","throughput","cpu_usage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetsSubnetPoolCreateParamsTypeScConnectPolicyPropEnum = append(subnetsSubnetPoolCreateParamsTypeScConnectPolicyPropEnum, v)
	}
}

const (

	// SubnetsSubnetPoolCreateParamsScConnectPolicyRoundRobin captures enum value "round_robin"
	SubnetsSubnetPoolCreateParamsScConnectPolicyRoundRobin string = "round_robin"

	// SubnetsSubnetPoolCreateParamsScConnectPolicyConnCount captures enum value "conn_count"
	SubnetsSubnetPoolCreateParamsScConnectPolicyConnCount string = "conn_count"

	// SubnetsSubnetPoolCreateParamsScConnectPolicyThroughput captures enum value "throughput"
	SubnetsSubnetPoolCreateParamsScConnectPolicyThroughput string = "throughput"

	// SubnetsSubnetPoolCreateParamsScConnectPolicyCPUUsage captures enum value "cpu_usage"
	SubnetsSubnetPoolCreateParamsScConnectPolicyCPUUsage string = "cpu_usage"
)

// prop value enum
func (m *SubnetsSubnetPoolCreateParams) validateScConnectPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subnetsSubnetPoolCreateParamsTypeScConnectPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateScConnectPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ScConnectPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateScConnectPolicyEnum("sc_connect_policy", "body", m.ScConnectPolicy); err != nil {
		return err
	}

	return nil
}

var subnetsSubnetPoolCreateParamsTypeScFailoverPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["round_robin","conn_count","throughput","cpu_usage"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		subnetsSubnetPoolCreateParamsTypeScFailoverPolicyPropEnum = append(subnetsSubnetPoolCreateParamsTypeScFailoverPolicyPropEnum, v)
	}
}

const (

	// SubnetsSubnetPoolCreateParamsScFailoverPolicyRoundRobin captures enum value "round_robin"
	SubnetsSubnetPoolCreateParamsScFailoverPolicyRoundRobin string = "round_robin"

	// SubnetsSubnetPoolCreateParamsScFailoverPolicyConnCount captures enum value "conn_count"
	SubnetsSubnetPoolCreateParamsScFailoverPolicyConnCount string = "conn_count"

	// SubnetsSubnetPoolCreateParamsScFailoverPolicyThroughput captures enum value "throughput"
	SubnetsSubnetPoolCreateParamsScFailoverPolicyThroughput string = "throughput"

	// SubnetsSubnetPoolCreateParamsScFailoverPolicyCPUUsage captures enum value "cpu_usage"
	SubnetsSubnetPoolCreateParamsScFailoverPolicyCPUUsage string = "cpu_usage"
)

// prop value enum
func (m *SubnetsSubnetPoolCreateParams) validateScFailoverPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, subnetsSubnetPoolCreateParamsTypeScFailoverPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateScFailoverPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.ScFailoverPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateScFailoverPolicyEnum("sc_failover_policy", "body", m.ScFailoverPolicy); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateScTTL(formats strfmt.Registry) error {

	if swag.IsZero(m.ScTTL) { // not required
		return nil
	}

	if err := validate.MinimumInt("sc_ttl", "body", int64(*m.ScTTL), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sc_ttl", "body", int64(*m.ScTTL), 2.147483647e+09, false); err != nil {
		return err
	}

	return nil
}

func (m *SubnetsSubnetPoolCreateParams) validateStaticRoutes(formats strfmt.Registry) error {

	if swag.IsZero(m.StaticRoutes) { // not required
		return nil
	}

	for i := 0; i < len(m.StaticRoutes); i++ {
		if swag.IsZero(m.StaticRoutes[i]) { // not required
			continue
		}

		if m.StaticRoutes[i] != nil {
			if err := m.StaticRoutes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("static_routes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SubnetsSubnetPoolCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SubnetsSubnetPoolCreateParams) UnmarshalBinary(b []byte) error {
	var res SubnetsSubnetPoolCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
