// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotSchedule snapshot schedule
// swagger:model SnapshotSchedule
type SnapshotSchedule struct {

	// Alias name to create for each snapshot.
	Alias string `json:"alias,omitempty"`

	// Time in seconds added to creation time to construction expiration time.
	// Minimum: 0
	Duration *int64 `json:"duration,omitempty"`

	// The schedule name.
	Name string `json:"name,omitempty"`

	// The /ifs path snapshotted.
	Path string `json:"path,omitempty"`

	// Pattern expanded with strftime to create snapshot names.
	Pattern string `json:"pattern,omitempty"`

	// The isidate compatible natural language description of the schedule.
	Schedule string `json:"schedule,omitempty"`
}

// Validate validates this snapshot schedule
func (m *SnapshotSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotSchedule) validateDuration(formats strfmt.Registry) error {

	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if err := validate.MinimumInt("duration", "body", int64(*m.Duration), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotSchedule) UnmarshalBinary(b []byte) error {
	var res SnapshotSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
