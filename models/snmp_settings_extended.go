// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnmpSettingsExtended SNMP settings.
// swagger:model SnmpSettingsExtended
type SnmpSettingsExtended struct {

	// The read-only community name.  @DEFAULT reverts this field to its default value.
	// Min Length: 1
	ReadOnlyCommunity string `json:"read_only_community,omitempty"`

	// Whether the SNMP service is enabled.
	Service bool `json:"service,omitempty"`

	// Whether SNMP v1 and v2c protocols are enabled.  @DEFAULT reverts this field to its default value.
	SnmpV1V2cAccess bool `json:"snmp_v1_v2c_access,omitempty"`

	// Whether SNMP v3 is enabled.  @DEFAULT reverts this field to its default value.
	SnmpV3Access bool `json:"snmp_v3_access,omitempty"`

	// This field allows a client to change the SNMP v3 authentication  password. There is always a password set.  @DEFAULT reverts this field to its default value.
	// Max Length: 39
	// Min Length: 8
	SnmpV3Password string `json:"snmp_v3_password,omitempty"`

	// The read-only user for SNMP v3 read requests.  @DEFAULT reverts this field to its default value.
	// Min Length: 1
	SnmpV3ReadOnlyUser string `json:"snmp_v3_read_only_user,omitempty"`

	// Contact information for the system owner.  This must be a valid email address.  @DEFAULT reverts this field to its default value.
	// Min Length: 1
	// Pattern: ^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$
	SystemContact string `json:"system_contact,omitempty"`

	// A location name for the SNMP system.  @DEFAULT reverts this field to its default value.
	// Min Length: 1
	SystemLocation string `json:"system_location,omitempty"`
}

// Validate validates this snmp settings extended
func (m *SnmpSettingsExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReadOnlyCommunity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpV3Password(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnmpV3ReadOnlyUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemContact(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnmpSettingsExtended) validateReadOnlyCommunity(formats strfmt.Registry) error {

	if swag.IsZero(m.ReadOnlyCommunity) { // not required
		return nil
	}

	if err := validate.MinLength("read_only_community", "body", string(m.ReadOnlyCommunity), 1); err != nil {
		return err
	}

	return nil
}

func (m *SnmpSettingsExtended) validateSnmpV3Password(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpV3Password) { // not required
		return nil
	}

	if err := validate.MinLength("snmp_v3_password", "body", string(m.SnmpV3Password), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("snmp_v3_password", "body", string(m.SnmpV3Password), 39); err != nil {
		return err
	}

	return nil
}

func (m *SnmpSettingsExtended) validateSnmpV3ReadOnlyUser(formats strfmt.Registry) error {

	if swag.IsZero(m.SnmpV3ReadOnlyUser) { // not required
		return nil
	}

	if err := validate.MinLength("snmp_v3_read_only_user", "body", string(m.SnmpV3ReadOnlyUser), 1); err != nil {
		return err
	}

	return nil
}

func (m *SnmpSettingsExtended) validateSystemContact(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemContact) { // not required
		return nil
	}

	if err := validate.MinLength("system_contact", "body", string(m.SystemContact), 1); err != nil {
		return err
	}

	if err := validate.Pattern("system_contact", "body", string(m.SystemContact), `^[a-z0-9._%+-]+@[a-z0-9.-]+\.[a-z]{2,4}$`); err != nil {
		return err
	}

	return nil
}

func (m *SnmpSettingsExtended) validateSystemLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.SystemLocation) { // not required
		return nil
	}

	if err := validate.MinLength("system_location", "body", string(m.SystemLocation), 1); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnmpSettingsExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnmpSettingsExtended) UnmarshalBinary(b []byte) error {
	var res SnmpSettingsExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
