// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MappingUsersLookupMappingItemUser mapping users lookup mapping item user
// swagger:model MappingUsersLookupMappingItemUser
type MappingUsersLookupMappingItemUser struct {

	// Specifies the distinguished name for the user.
	Dn string `json:"dn,omitempty"`

	// Specifies the DNS domain.
	DNSDomain string `json:"dns_domain,omitempty"`

	// Specifies the domain that the object is part of.
	Domain string `json:"domain,omitempty"`

	// Specifies an email address.
	Email string `json:"email,omitempty"`

	// True, if the authenticated user is enabled.
	// Required: true
	Enabled *bool `json:"enabled"`

	// True, if the authenticated user has expired.
	// Required: true
	Expired *bool `json:"expired"`

	// Specifies the Unix Epoch time at which the authenticated user will expire.
	Expiry int64 `json:"expiry,omitempty"`

	// Specifies the GECOS value, which is usually the full name.
	Gecos string `json:"gecos,omitempty"`

	// True, if the GID was generated.
	GeneratedGid bool `json:"generated_gid,omitempty"`

	// True, if the UID was generated.
	GeneratedUID bool `json:"generated_uid,omitempty"`

	// True, if the UPN was generated.
	GeneratedUpn bool `json:"generated_upn,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Gid *GroupMember `json:"gid,omitempty"`

	// Specifies a home directory for the user.
	HomeDirectory string `json:"home_directory,omitempty"`

	// Specifies the user or group ID.
	// Required: true
	ID *string `json:"id"`

	// If true, indicates that the account is locked.
	// Required: true
	Locked *bool `json:"locked"`

	// Specifies the maximum time in seconds allowed before the password expires.
	MaxPasswordAge int64 `json:"max_password_age,omitempty"`

	// member of
	MemberOf []*GroupMember `json:"member_of"`

	// Specifies a user or group name.
	// Required: true
	Name *string `json:"name"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	OnDiskGroupIdentity *GroupMember `json:"on_disk_group_identity,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	OnDiskUserIdentity *GroupMember `json:"on_disk_user_identity,omitempty"`

	// If true, the password has expired.
	// Required: true
	PasswordExpired *bool `json:"password_expired"`

	// If true, the password is allowed to expire.
	// Required: true
	PasswordExpires *bool `json:"password_expires"`

	// Specifies the time in Unix Epoch seconds that the password will expire.
	PasswordExpiry int64 `json:"password_expiry,omitempty"`

	// Specifies the last time the password was set.
	PasswordLastSet int64 `json:"password_last_set,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	PrimaryGroupSid *GroupMember `json:"primary_group_sid,omitempty"`

	// Prompts the user to change their password at the next login.
	// Required: true
	PromptPasswordChange *bool `json:"prompt_password_change"`

	// Specifies the authentication provider that the object belongs to.
	Provider string `json:"provider,omitempty"`

	// Specifies a user or group name.
	SamAccountName string `json:"sam_account_name,omitempty"`

	// Specifies a path to the shell for the user.
	Shell string `json:"shell,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Sid *GroupMember `json:"sid,omitempty"`

	// Specifies the object type.
	// Required: true
	Type *string `json:"type"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	UID *GroupMember `json:"uid,omitempty"`

	// Specifies a principal name for the user.
	Upn string `json:"upn,omitempty"`

	// Specifies whether the password for the user can be changed.
	// Required: true
	UserCanChangePassword *bool `json:"user_can_change_password"`
}

// Validate validates this mapping users lookup mapping item user
func (m *MappingUsersLookupMappingItemUser) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemberOf(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDiskGroupIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnDiskUserIdentity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpired(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordExpires(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryGroupSid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePromptPasswordChange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSid(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserCanChangePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateExpired(formats strfmt.Registry) error {

	if err := validate.Required("expired", "body", m.Expired); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateGid(formats strfmt.Registry) error {

	if swag.IsZero(m.Gid) { // not required
		return nil
	}

	if m.Gid != nil {
		if err := m.Gid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateLocked(formats strfmt.Registry) error {

	if err := validate.Required("locked", "body", m.Locked); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateMemberOf(formats strfmt.Registry) error {

	if swag.IsZero(m.MemberOf) { // not required
		return nil
	}

	for i := 0; i < len(m.MemberOf); i++ {
		if swag.IsZero(m.MemberOf[i]) { // not required
			continue
		}

		if m.MemberOf[i] != nil {
			if err := m.MemberOf[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("member_of" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateOnDiskGroupIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDiskGroupIdentity) { // not required
		return nil
	}

	if m.OnDiskGroupIdentity != nil {
		if err := m.OnDiskGroupIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_disk_group_identity")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateOnDiskUserIdentity(formats strfmt.Registry) error {

	if swag.IsZero(m.OnDiskUserIdentity) { // not required
		return nil
	}

	if m.OnDiskUserIdentity != nil {
		if err := m.OnDiskUserIdentity.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("on_disk_user_identity")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validatePasswordExpired(formats strfmt.Registry) error {

	if err := validate.Required("password_expired", "body", m.PasswordExpired); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validatePasswordExpires(formats strfmt.Registry) error {

	if err := validate.Required("password_expires", "body", m.PasswordExpires); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validatePrimaryGroupSid(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryGroupSid) { // not required
		return nil
	}

	if m.PrimaryGroupSid != nil {
		if err := m.PrimaryGroupSid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_group_sid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validatePromptPasswordChange(formats strfmt.Registry) error {

	if err := validate.Required("prompt_password_change", "body", m.PromptPasswordChange); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateSid(formats strfmt.Registry) error {

	if swag.IsZero(m.Sid) { // not required
		return nil
	}

	if m.Sid != nil {
		if err := m.Sid.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateUID(formats strfmt.Registry) error {

	if swag.IsZero(m.UID) { // not required
		return nil
	}

	if m.UID != nil {
		if err := m.UID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("uid")
			}
			return err
		}
	}

	return nil
}

func (m *MappingUsersLookupMappingItemUser) validateUserCanChangePassword(formats strfmt.Registry) error {

	if err := validate.Required("user_can_change_password", "body", m.UserCanChangePassword); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MappingUsersLookupMappingItemUser) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MappingUsersLookupMappingItemUser) UnmarshalBinary(b []byte) error {
	var res MappingUsersLookupMappingItemUser
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
