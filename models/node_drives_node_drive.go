// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeDrivesNodeDrive node drives node drive
// swagger:model NodeDrivesNodeDrive
type NodeDrivesNodeDrive struct {

	// Numerical representation of this drive's bay.
	Baynum int64 `json:"baynum,omitempty"`

	// Number of blocks on this drive.
	Blocks int64 `json:"blocks,omitempty"`

	// The chassis number which contains this drive.
	Chassis int64 `json:"chassis,omitempty"`

	// This drive's device name.
	Devname string `json:"devname,omitempty"`

	// Drive firmware information.
	Firmware *NodeDrivesNodeDriveFirmware `json:"firmware,omitempty"`

	// Drive_d's handle representation for this drive
	Handle int64 `json:"handle,omitempty"`

	// String representtation of this drive's interface type.
	InterfaceType string `json:"interface_type,omitempty"`

	// This drive's logical drive number in IFS.
	Lnum int64 `json:"lnum,omitempty"`

	// String representation of this drive's physical location.
	Locnstr string `json:"locnstr,omitempty"`

	// Size of a logical block on this drive.
	LogicalBlockLength int64 `json:"logical_block_length,omitempty"`

	// String representation of this drive's media type.
	MediaType string `json:"media_type,omitempty"`

	// This drive's manufacturer and model.
	Model string `json:"model,omitempty"`

	// Size of a physical block on this drive.
	PhysicalBlockLength int64 `json:"physical_block_length,omitempty"`

	// Indicates whether this drive is physically present in the node.
	Present bool `json:"present,omitempty"`

	// This drive's purpose in the DRV state machine.
	Purpose string `json:"purpose,omitempty"`

	// Description of this drive's purpose.
	PurposeDescription string `json:"purpose_description,omitempty"`

	// Serial number for this drive.
	Serial string `json:"serial,omitempty"`

	// This drive's state as presented to the UI.
	UIState string `json:"ui_state,omitempty"`

	// The drive's 'worldwide name' from its NAA identifiers.
	Wwn string `json:"wwn,omitempty"`

	// This drive's x-axis grid location.
	XLoc int64 `json:"x_loc,omitempty"`

	// This drive's y-axis grid location.
	YLoc int64 `json:"y_loc,omitempty"`
}

// Validate validates this node drives node drive
func (m *NodeDrivesNodeDrive) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirmware(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeDrivesNodeDrive) validateFirmware(formats strfmt.Registry) error {

	if swag.IsZero(m.Firmware) { // not required
		return nil
	}

	if m.Firmware != nil {
		if err := m.Firmware.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firmware")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeDrivesNodeDrive) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeDrivesNodeDrive) UnmarshalBinary(b []byte) error {
	var res NodeDrivesNodeDrive
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
