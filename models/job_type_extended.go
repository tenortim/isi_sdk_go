// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// JobTypeExtended job type extended
// swagger:model JobTypeExtended
type JobTypeExtended struct {
	JobType

	// Whether multiple instances of this job type may run simultaneously.
	// Required: true
	AllowMultipleInstances *bool `json:"allow_multiple_instances"`

	// Brief description of the job type.
	// Required: true
	Description *string `json:"description"`

	// Whether the job type is enabled and able to run.
	// Required: true
	Enabled *bool `json:"enabled"`

	// The set(s) of mutually-exclusive job types to which this job belongs.  No job in this set may run with any other job in this set.  Obsolete; this value will always be an empty string, as exclusion sets are no longer a job type property.
	// Required: true
	ExclusionSet *string `json:"exclusion_set"`

	// Whether this job type is normally visible in the UI.
	// Required: true
	Hidden *bool `json:"hidden"`

	// Job type ID.
	// Required: true
	ID *string `json:"id"`

	// Default impact policy of this job type.
	// Required: true
	Policy *string `json:"policy"`

	// Default priority of this job type; lower numbers preempt higher numbers.
	// Required: true
	// Maximum: 10
	// Minimum: 1
	Priority *int64 `json:"priority"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *JobTypeExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 JobType
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.JobType = aO0

	// AO1
	var dataAO1 struct {
		AllowMultipleInstances *bool `json:"allow_multiple_instances"`

		Description *string `json:"description"`

		Enabled *bool `json:"enabled"`

		ExclusionSet *string `json:"exclusion_set"`

		Hidden *bool `json:"hidden"`

		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Priority *int64 `json:"priority"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AllowMultipleInstances = dataAO1.AllowMultipleInstances

	m.Description = dataAO1.Description

	m.Enabled = dataAO1.Enabled

	m.ExclusionSet = dataAO1.ExclusionSet

	m.Hidden = dataAO1.Hidden

	m.ID = dataAO1.ID

	m.Policy = dataAO1.Policy

	m.Priority = dataAO1.Priority

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m JobTypeExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.JobType)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AllowMultipleInstances *bool `json:"allow_multiple_instances"`

		Description *string `json:"description"`

		Enabled *bool `json:"enabled"`

		ExclusionSet *string `json:"exclusion_set"`

		Hidden *bool `json:"hidden"`

		ID *string `json:"id"`

		Policy *string `json:"policy"`

		Priority *int64 `json:"priority"`
	}

	dataAO1.AllowMultipleInstances = m.AllowMultipleInstances

	dataAO1.Description = m.Description

	dataAO1.Enabled = m.Enabled

	dataAO1.ExclusionSet = m.ExclusionSet

	dataAO1.Hidden = m.Hidden

	dataAO1.ID = m.ID

	dataAO1.Policy = m.Policy

	dataAO1.Priority = m.Priority

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this job type extended
func (m *JobTypeExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with JobType
	if err := m.JobType.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAllowMultipleInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExclusionSet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHidden(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePriority(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *JobTypeExtended) validateAllowMultipleInstances(formats strfmt.Registry) error {

	if err := validate.Required("allow_multiple_instances", "body", m.AllowMultipleInstances); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validateExclusionSet(formats strfmt.Registry) error {

	if err := validate.Required("exclusion_set", "body", m.ExclusionSet); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validateHidden(formats strfmt.Registry) error {

	if err := validate.Required("hidden", "body", m.Hidden); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validatePolicy(formats strfmt.Registry) error {

	if err := validate.Required("policy", "body", m.Policy); err != nil {
		return err
	}

	return nil
}

func (m *JobTypeExtended) validatePriority(formats strfmt.Registry) error {

	if err := validate.Required("priority", "body", m.Priority); err != nil {
		return err
	}

	if err := validate.MinimumInt("priority", "body", int64(*m.Priority), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("priority", "body", int64(*m.Priority), 10, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *JobTypeExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *JobTypeExtended) UnmarshalBinary(b []byte) error {
	var res JobTypeExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
