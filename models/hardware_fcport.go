// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareFcport hardware fcport
// swagger:model HardwareFcport
type HardwareFcport struct {

	// The unique display id
	ID string `json:"id,omitempty"`

	// rate
	// Enum: [auto 1 2 4 8]
	Rate string `json:"rate,omitempty"`

	// State of the port
	// Enum: [enable disable]
	State string `json:"state,omitempty"`

	// topology
	// Enum: [auto ptp loop]
	Topology string `json:"topology,omitempty"`

	// World wide node name of the port
	Wwnn string `json:"wwnn,omitempty"`

	// World wide port name of the port
	Wwpn string `json:"wwpn,omitempty"`
}

// Validate validates this hardware fcport
func (m *HardwareFcport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopology(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hardwareFcportTypeRatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","1","2","4","8"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareFcportTypeRatePropEnum = append(hardwareFcportTypeRatePropEnum, v)
	}
}

const (

	// HardwareFcportRateAuto captures enum value "auto"
	HardwareFcportRateAuto string = "auto"

	// HardwareFcportRateNr1 captures enum value "1"
	HardwareFcportRateNr1 string = "1"

	// HardwareFcportRateNr2 captures enum value "2"
	HardwareFcportRateNr2 string = "2"

	// HardwareFcportRateNr4 captures enum value "4"
	HardwareFcportRateNr4 string = "4"

	// HardwareFcportRateNr8 captures enum value "8"
	HardwareFcportRateNr8 string = "8"
)

// prop value enum
func (m *HardwareFcport) validateRateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareFcportTypeRatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareFcport) validateRate(formats strfmt.Registry) error {

	if swag.IsZero(m.Rate) { // not required
		return nil
	}

	// value enum
	if err := m.validateRateEnum("rate", "body", m.Rate); err != nil {
		return err
	}

	return nil
}

var hardwareFcportTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enable","disable"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareFcportTypeStatePropEnum = append(hardwareFcportTypeStatePropEnum, v)
	}
}

const (

	// HardwareFcportStateEnable captures enum value "enable"
	HardwareFcportStateEnable string = "enable"

	// HardwareFcportStateDisable captures enum value "disable"
	HardwareFcportStateDisable string = "disable"
)

// prop value enum
func (m *HardwareFcport) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareFcportTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareFcport) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

var hardwareFcportTypeTopologyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["auto","ptp","loop"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareFcportTypeTopologyPropEnum = append(hardwareFcportTypeTopologyPropEnum, v)
	}
}

const (

	// HardwareFcportTopologyAuto captures enum value "auto"
	HardwareFcportTopologyAuto string = "auto"

	// HardwareFcportTopologyPtp captures enum value "ptp"
	HardwareFcportTopologyPtp string = "ptp"

	// HardwareFcportTopologyLoop captures enum value "loop"
	HardwareFcportTopologyLoop string = "loop"
)

// prop value enum
func (m *HardwareFcport) validateTopologyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareFcportTypeTopologyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareFcport) validateTopology(formats strfmt.Registry) error {

	if swag.IsZero(m.Topology) { // not required
		return nil
	}

	// value enum
	if err := m.validateTopologyEnum("topology", "body", m.Topology); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareFcport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareFcport) UnmarshalBinary(b []byte) error {
	var res HardwareFcport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
