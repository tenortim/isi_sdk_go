// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummarySystemSystemItem summary system system item
// swagger:model SummarySystemSystemItem
type SummarySystemSystemItem struct {

	// The percentage CPU utilization.
	// Required: true
	CPU *float64 `json:"cpu"`

	// Traffic to disk (in bytes/sec).
	// Required: true
	DiskIn *float64 `json:"disk_in"`

	// Traffic from disk (in bytes/sec).
	// Required: true
	DiskOut *float64 `json:"disk_out"`

	// The total throughput (in bytes/sec) for FTP operations.
	// Required: true
	Ftp *float64 `json:"ftp"`

	// The total throughput (in bytes/second) for HDFS operations.
	// Required: true
	Hdfs *float64 `json:"hdfs"`

	// The total throughput (in bytes/sec) for HTTP operations.
	// Required: true
	HTTP *float64 `json:"http"`

	// The total throughput (in bytes/sec) for ISCSI operations.
	Iscsi float64 `json:"iscsi,omitempty"`

	// Incoming network traffic (in bytes/sec) for all operations.
	// Required: true
	NetIn *float64 `json:"net_in"`

	// Outgoing network traffic (in bytes/sec) for all operations.
	// Required: true
	NetOut *float64 `json:"net_out"`

	// The total throughput (in bytes/sec) for NFS (NFS3 & NFS4) operations.
	// Required: true
	Nfs *float64 `json:"nfs"`

	// Node ID/LNN, 'All' for cluster.
	// Required: true
	Node *string `json:"node"`

	// The total throughput (in bytes/sec) for SMB (SMB1 & SMB2) operations.
	// Required: true
	Smb *float64 `json:"smb"`

	// Unix Epoch time in seconds of the request.
	// Required: true
	Time *int64 `json:"time"`

	// The total throughput (in bytes/sec) for all protocols listed.
	// Required: true
	Total *float64 `json:"total"`
}

// Validate validates this summary system system item
func (m *SummarySystemSystemItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDiskOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFtp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHTTP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetOut(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmb(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummarySystemSystemItem) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateDiskIn(formats strfmt.Registry) error {

	if err := validate.Required("disk_in", "body", m.DiskIn); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateDiskOut(formats strfmt.Registry) error {

	if err := validate.Required("disk_out", "body", m.DiskOut); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateFtp(formats strfmt.Registry) error {

	if err := validate.Required("ftp", "body", m.Ftp); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateHdfs(formats strfmt.Registry) error {

	if err := validate.Required("hdfs", "body", m.Hdfs); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateHTTP(formats strfmt.Registry) error {

	if err := validate.Required("http", "body", m.HTTP); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateNetIn(formats strfmt.Registry) error {

	if err := validate.Required("net_in", "body", m.NetIn); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateNetOut(formats strfmt.Registry) error {

	if err := validate.Required("net_out", "body", m.NetOut); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateNfs(formats strfmt.Registry) error {

	if err := validate.Required("nfs", "body", m.Nfs); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateNode(formats strfmt.Registry) error {

	if err := validate.Required("node", "body", m.Node); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateSmb(formats strfmt.Registry) error {

	if err := validate.Required("smb", "body", m.Smb); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

func (m *SummarySystemSystemItem) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummarySystemSystemItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummarySystemSystemItem) UnmarshalBinary(b []byte) error {
	var res SummarySystemSystemItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
