// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventChannelParameters event channel parameters
// swagger:model EventChannelParameters
type EventChannelParameters struct {

	// Email addresses to send to.
	Address []string `json:"address"`

	// Batching criterion.
	// Enum: [NONE ALL CATEGORY SEVERITY]
	Batch string `json:"batch,omitempty"`

	// Period over which batching is to be performed.
	BatchPeriod int64 `json:"batch_period,omitempty"`

	// Path to custom notification template.
	CustomTemplate string `json:"custom_template,omitempty"`

	// Email address to use as from.
	SendAs string `json:"send_as,omitempty"`

	// SMTP relay host.
	SMTPHost string `json:"smtp_host,omitempty"`

	// Password for SMTP authentication - only if smtp_use_auth true.
	SMTPPassword string `json:"smtp_password,omitempty"`

	// SMTP relay port - optional defaults to 25.
	SMTPPort int64 `json:"smtp_port,omitempty"`

	// Encryption protocol to use for SMTP.
	// Enum: [NONE STARTTLS]
	SMTPSecurity string `json:"smtp_security,omitempty"`

	// Use SMTP authentication - optional defaulst to false.
	SMTPUseAuth bool `json:"smtp_use_auth,omitempty"`

	// Username for SMTP authentication - only if smtp_use_auth true.
	SMTPUsername string `json:"smtp_username,omitempty"`

	// Subject for emails.
	Subject string `json:"subject,omitempty"`
}

// Validate validates this event channel parameters
func (m *EventChannelParameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBatch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSMTPSecurity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventChannelParametersTypeBatchPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","ALL","CATEGORY","SEVERITY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventChannelParametersTypeBatchPropEnum = append(eventChannelParametersTypeBatchPropEnum, v)
	}
}

const (

	// EventChannelParametersBatchNONE captures enum value "NONE"
	EventChannelParametersBatchNONE string = "NONE"

	// EventChannelParametersBatchALL captures enum value "ALL"
	EventChannelParametersBatchALL string = "ALL"

	// EventChannelParametersBatchCATEGORY captures enum value "CATEGORY"
	EventChannelParametersBatchCATEGORY string = "CATEGORY"

	// EventChannelParametersBatchSEVERITY captures enum value "SEVERITY"
	EventChannelParametersBatchSEVERITY string = "SEVERITY"
)

// prop value enum
func (m *EventChannelParameters) validateBatchEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventChannelParametersTypeBatchPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventChannelParameters) validateBatch(formats strfmt.Registry) error {

	if swag.IsZero(m.Batch) { // not required
		return nil
	}

	// value enum
	if err := m.validateBatchEnum("batch", "body", m.Batch); err != nil {
		return err
	}

	return nil
}

var eventChannelParametersTypeSMTPSecurityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","STARTTLS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventChannelParametersTypeSMTPSecurityPropEnum = append(eventChannelParametersTypeSMTPSecurityPropEnum, v)
	}
}

const (

	// EventChannelParametersSMTPSecurityNONE captures enum value "NONE"
	EventChannelParametersSMTPSecurityNONE string = "NONE"

	// EventChannelParametersSMTPSecuritySTARTTLS captures enum value "STARTTLS"
	EventChannelParametersSMTPSecuritySTARTTLS string = "STARTTLS"
)

// prop value enum
func (m *EventChannelParameters) validateSMTPSecurityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventChannelParametersTypeSMTPSecurityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventChannelParameters) validateSMTPSecurity(formats strfmt.Registry) error {

	if swag.IsZero(m.SMTPSecurity) { // not required
		return nil
	}

	// value enum
	if err := m.validateSMTPSecurityEnum("smtp_security", "body", m.SMTPSecurity); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventChannelParameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventChannelParameters) UnmarshalBinary(b []byte) error {
	var res EventChannelParameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
