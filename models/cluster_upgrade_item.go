// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ClusterUpgradeItem The settings necessary to start an upgrade.
// swagger:model ClusterUpgradeItem
type ClusterUpgradeItem struct {

	// The location (path) of the upgrade image which must be within /ifs.
	InstallImagePath string `json:"install_image_path,omitempty"`

	// The nodes (to be) scheduled for upgrade ordered by queue position number. Null if the cluster_state is 'partially upgraded' or upgrade_type is 'simultaneous'. One of the following values: [<lnn-1>, <lnn-2>, ... ], 'All', null
	NodesToRollingUpgrade []int64 `json:"nodes_to_rolling_upgrade"`

	// Used to indicate that the pre-upgrade check should be skipped
	SkipOptional bool `json:"skip_optional,omitempty"`

	// The type of upgrade to perform. One of the following values: 'rolling', 'simultaneous'
	UpgradeType string `json:"upgrade_type,omitempty"`
}

// Validate validates this cluster upgrade item
func (m *ClusterUpgradeItem) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterUpgradeItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterUpgradeItem) UnmarshalBinary(b []byte) error {
	var res ClusterUpgradeItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
