// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HTTPSettingsSettings Http settings settings
// swagger:model HttpSettingsSettings
type HTTPSettingsSettings struct {

	// Enable Access Control Authentication
	AccessControl bool `json:"access_control,omitempty"`

	// Enable Basic Authentication
	BasicAuthentication bool `json:"basic_authentication,omitempty"`

	// Enable DAV specification
	Dav bool `json:"dav,omitempty"`

	// Enable HTTP access logging
	EnableAccessLog bool `json:"enable_access_log,omitempty"`

	// Enable Integrated Authentication
	IntegratedAuthentication bool `json:"integrated_authentication,omitempty"`

	// Document root directory. Must be within /ifs.
	ServerRoot string `json:"server_root,omitempty"`

	// Enable/disable the HTTP service or redirect to WebUI.
	// Enum: [enabled disabled redirect]
	Service string `json:"service,omitempty"`
}

// Validate validates this Http settings settings
func (m *HTTPSettingsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var httpSettingsSettingsTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enabled","disabled","redirect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		httpSettingsSettingsTypeServicePropEnum = append(httpSettingsSettingsTypeServicePropEnum, v)
	}
}

const (

	// HTTPSettingsSettingsServiceEnabled captures enum value "enabled"
	HTTPSettingsSettingsServiceEnabled string = "enabled"

	// HTTPSettingsSettingsServiceDisabled captures enum value "disabled"
	HTTPSettingsSettingsServiceDisabled string = "disabled"

	// HTTPSettingsSettingsServiceRedirect captures enum value "redirect"
	HTTPSettingsSettingsServiceRedirect string = "redirect"
)

// prop value enum
func (m *HTTPSettingsSettings) validateServiceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, httpSettingsSettingsTypeServicePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HTTPSettingsSettings) validateService(formats strfmt.Registry) error {

	if swag.IsZero(m.Service) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HTTPSettingsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HTTPSettingsSettings) UnmarshalBinary(b []byte) error {
	var res HTTPSettingsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
