// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReportSubreportPolicy report subreport policy
// swagger:model ReportSubreportPolicy
type ReportSubreportPolicy struct {

	// If 'copy', source files will be copied to the target cluster.  If 'sync', the target directory will be made an image of the source directory:  Files and directories that have been deleted on the source, have been moved within the target directory, or no longer match the selection criteria will be deleted from the target directory.
	// Enum: [copy sync]
	Action string `json:"action,omitempty"`

	// A file matching pattern, organized as an OR'ed set of AND'ed file criteria, for example ((a AND b) OR (x AND y)) used to define a set of files with specific properties.  Policies of type 'sync' cannot use 'path' or time criteria in their matching patterns, but policies of type 'copy' can use all listed criteria.
	FileMatchingPattern *ReportSubreportPolicyFileMatchingPattern `json:"file_matching_pattern,omitempty"`

	// User-assigned name of this sync policy.
	Name string `json:"name,omitempty"`

	// Directories that will be excluded from the sync.  Modifying this field will result in a full synchronization of all data.
	SourceExcludeDirectories []string `json:"source_exclude_directories"`

	// Directories that will be included in the sync.  Modifying this field will result in a full synchronization of all data.
	SourceIncludeDirectories []string `json:"source_include_directories"`

	// The root directory on the source cluster the files will be synced from.  Modifying this field will result in a full synchronization of all data.
	SourceRootPath string `json:"source_root_path,omitempty"`

	// Hostname or IP address of sync target cluster.  Modifying the target cluster host can result in the policy being unrunnable if the new target does not match the current target association.
	TargetHost string `json:"target_host,omitempty"`

	// Absolute filesystem path on the target cluster for the sync destination.
	TargetPath string `json:"target_path,omitempty"`
}

// Validate validates this report subreport policy
func (m *ReportSubreportPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileMatchingPattern(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var reportSubreportPolicyTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["copy","sync"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		reportSubreportPolicyTypeActionPropEnum = append(reportSubreportPolicyTypeActionPropEnum, v)
	}
}

const (

	// ReportSubreportPolicyActionCopy captures enum value "copy"
	ReportSubreportPolicyActionCopy string = "copy"

	// ReportSubreportPolicyActionSync captures enum value "sync"
	ReportSubreportPolicyActionSync string = "sync"
)

// prop value enum
func (m *ReportSubreportPolicy) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, reportSubreportPolicyTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ReportSubreportPolicy) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *ReportSubreportPolicy) validateFileMatchingPattern(formats strfmt.Registry) error {

	if swag.IsZero(m.FileMatchingPattern) { // not required
		return nil
	}

	if m.FileMatchingPattern != nil {
		if err := m.FileMatchingPattern.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("file_matching_pattern")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReportSubreportPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReportSubreportPolicy) UnmarshalBinary(b []byte) error {
	var res ReportSubreportPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
