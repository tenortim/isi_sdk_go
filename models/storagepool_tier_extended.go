// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragepoolTierExtended storagepool tier extended
// swagger:model StoragepoolTierExtended
type StoragepoolTierExtended struct {
	StoragepoolTier

	// The system ID given to the tier.
	// Required: true
	ID *int64 `json:"id"`

	// The nodes that are part of this tier.
	// Required: true
	Lnns []int64 `json:"lnns"`

	// The tier name.
	// Required: true
	Name *string `json:"name"`

	// Total pool usage.
	// Required: true
	Usage *StoragepoolTierUsage `json:"usage"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *StoragepoolTierExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 StoragepoolTier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.StoragepoolTier = aO0

	// AO1
	var dataAO1 struct {
		ID *int64 `json:"id"`

		Lnns []int64 `json:"lnns"`

		Name *string `json:"name"`

		Usage *StoragepoolTierUsage `json:"usage"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ID = dataAO1.ID

	m.Lnns = dataAO1.Lnns

	m.Name = dataAO1.Name

	m.Usage = dataAO1.Usage

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m StoragepoolTierExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.StoragepoolTier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ID *int64 `json:"id"`

		Lnns []int64 `json:"lnns"`

		Name *string `json:"name"`

		Usage *StoragepoolTierUsage `json:"usage"`
	}

	dataAO1.ID = m.ID

	dataAO1.Lnns = m.Lnns

	dataAO1.Name = m.Name

	dataAO1.Usage = m.Usage

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this storagepool tier extended
func (m *StoragepoolTierExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with StoragepoolTier
	if err := m.StoragepoolTier.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLnns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragepoolTierExtended) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolTierExtended) validateLnns(formats strfmt.Registry) error {

	if err := validate.Required("lnns", "body", m.Lnns); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolTierExtended) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolTierExtended) validateUsage(formats strfmt.Registry) error {

	if err := validate.Required("usage", "body", m.Usage); err != nil {
		return err
	}

	if m.Usage != nil {
		if err := m.Usage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usage")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragepoolTierExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragepoolTierExtended) UnmarshalBinary(b []byte) error {
	var res StoragepoolTierExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
