// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventAlertCondition Specifies under what conditions and over which channel an alert should be sent
// swagger:model EventAlertCondition
type EventAlertCondition struct {

	// Event Group categories to be alerted
	Categories []string `json:"categories"`

	// Channels for alert
	ChannelIds []int64 `json:"channel_ids"`

	// Trigger condition for alert
	// Enum: [NEW NEW EVENTS ONGOING SEVERITY INCREASE SEVERITY DECREASE RESOLVED]
	Condition string `json:"condition,omitempty"`

	// Event Group IDs to be alerted
	EventgroupIds []string `json:"eventgroup_ids"`

	// Required with ONGOING condition only, period in seconds between alerts of ongoing conditions
	Interval int64 `json:"interval,omitempty"`

	// Required with NEW EVENTS condition only, limits the number of alerts sent as events are added
	Limit int64 `json:"limit,omitempty"`

	// Severities to be alerted
	Severities []string `json:"severities"`

	// Any eventgroup lasting less than this many seconds is deemed transient and will not generate alerts under this condition.
	Transient int64 `json:"transient,omitempty"`
}

// Validate validates this event alert condition
func (m *EventAlertCondition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverities(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var eventAlertConditionTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","NEW EVENTS","ONGOING","SEVERITY INCREASE","SEVERITY DECREASE","RESOLVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventAlertConditionTypeConditionPropEnum = append(eventAlertConditionTypeConditionPropEnum, v)
	}
}

const (

	// EventAlertConditionConditionNEW captures enum value "NEW"
	EventAlertConditionConditionNEW string = "NEW"

	// EventAlertConditionConditionNEWEVENTS captures enum value "NEW EVENTS"
	EventAlertConditionConditionNEWEVENTS string = "NEW EVENTS"

	// EventAlertConditionConditionONGOING captures enum value "ONGOING"
	EventAlertConditionConditionONGOING string = "ONGOING"

	// EventAlertConditionConditionSEVERITYINCREASE captures enum value "SEVERITY INCREASE"
	EventAlertConditionConditionSEVERITYINCREASE string = "SEVERITY INCREASE"

	// EventAlertConditionConditionSEVERITYDECREASE captures enum value "SEVERITY DECREASE"
	EventAlertConditionConditionSEVERITYDECREASE string = "SEVERITY DECREASE"

	// EventAlertConditionConditionRESOLVED captures enum value "RESOLVED"
	EventAlertConditionConditionRESOLVED string = "RESOLVED"
)

// prop value enum
func (m *EventAlertCondition) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventAlertConditionTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventAlertCondition) validateCondition(formats strfmt.Registry) error {

	if swag.IsZero(m.Condition) { // not required
		return nil
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", m.Condition); err != nil {
		return err
	}

	return nil
}

var eventAlertConditionSeveritiesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["emergency","critical","warning","information"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventAlertConditionSeveritiesItemsEnum = append(eventAlertConditionSeveritiesItemsEnum, v)
	}
}

func (m *EventAlertCondition) validateSeveritiesItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventAlertConditionSeveritiesItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventAlertCondition) validateSeverities(formats strfmt.Registry) error {

	if swag.IsZero(m.Severities) { // not required
		return nil
	}

	for i := 0; i < len(m.Severities); i++ {

		// value enum
		if err := m.validateSeveritiesItemsEnum("severities"+"."+strconv.Itoa(i), "body", m.Severities[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventAlertCondition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventAlertCondition) UnmarshalBinary(b []byte) error {
	var res EventAlertCondition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
