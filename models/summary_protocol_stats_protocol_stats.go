// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SummaryProtocolStatsProtocolStats summary protocol stats protocol stats
// swagger:model SummaryProtocolStatsProtocol-Stats
type SummaryProtocolStatsProtocolStats struct {

	// cpu
	CPU *SummaryProtocolStatsProtocolStatsCPU `json:"cpu,omitempty"`

	// disk
	Disk *SummaryProtocolStatsProtocolStatsDisk `json:"disk,omitempty"`

	// network
	Network *SummaryProtocolStatsProtocolStatsNetwork `json:"network,omitempty"`

	// onefs
	Onefs *SummaryProtocolStatsProtocolStatsOnefs `json:"onefs,omitempty"`

	// A single protocol for which statistics should be reported.
	// Required: true
	Protocol *SummaryProtocolStatsProtocolStatsProtocol `json:"protocol"`

	// Unix Epoch time in seconds of the request.
	// Required: true
	Time *int64 `json:"time"`
}

// Validate validates this summary protocol stats protocol stats
func (m *SummaryProtocolStatsProtocolStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisk(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnefs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if m.CPU != nil {
		if err := m.CPU.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cpu")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateDisk(formats strfmt.Registry) error {

	if swag.IsZero(m.Disk) { // not required
		return nil
	}

	if m.Disk != nil {
		if err := m.Disk.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("disk")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateOnefs(formats strfmt.Registry) error {

	if swag.IsZero(m.Onefs) { // not required
		return nil
	}

	if m.Onefs != nil {
		if err := m.Onefs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onefs")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	if m.Protocol != nil {
		if err := m.Protocol.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("protocol")
			}
			return err
		}
	}

	return nil
}

func (m *SummaryProtocolStatsProtocolStats) validateTime(formats strfmt.Registry) error {

	if err := validate.Required("time", "body", m.Time); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SummaryProtocolStatsProtocolStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SummaryProtocolStatsProtocolStats) UnmarshalBinary(b []byte) error {
	var res SummaryProtocolStatsProtocolStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
