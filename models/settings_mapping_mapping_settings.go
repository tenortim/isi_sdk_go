// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// SettingsMappingMappingSettings settings mapping mapping settings
// swagger:model SettingsMappingMappingSettings
type SettingsMappingMappingSettings struct {

	// Specifies the cache expiry in seconds of the idmapper.
	CacheEntryExpiry int64 `json:"cache_entry_expiry,omitempty"`

	// If true, allocates GIDs from a fixed range.
	GidRangeEnabled bool `json:"gid_range_enabled,omitempty"`

	// Specifies the ending number for a fixed range from which GIDs are allocated.
	GidRangeMax int64 `json:"gid_range_max,omitempty"`

	// Specifies the starting number for a fixed range from which GIDs are allocated.
	GidRangeMin int64 `json:"gid_range_min,omitempty"`

	// Specifies the next GID to allocate.
	GidRangeNext int64 `json:"gid_range_next,omitempty"`

	// If true, allocates UIDs from a fixed range.
	UIDRangeEnabled bool `json:"uid_range_enabled,omitempty"`

	// Specifies the ending number for a fixed range from which UIDs are allocated.
	UIDRangeMax int64 `json:"uid_range_max,omitempty"`

	// Specifies the starting number for a fixed range from which UIDs are allocated.
	UIDRangeMin int64 `json:"uid_range_min,omitempty"`

	// Specifies the next UID to allocate.
	UIDRangeNext int64 `json:"uid_range_next,omitempty"`
}

// Validate validates this settings mapping mapping settings
func (m *SettingsMappingMappingSettings) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SettingsMappingMappingSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsMappingMappingSettings) UnmarshalBinary(b []byte) error {
	var res SettingsMappingMappingSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
