// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntivirusQuarantine The quarantine status of a file in /ifs.
// swagger:model AntivirusQuarantine
type AntivirusQuarantine struct {

	// Path of this file, starting with /ifs.
	// Required: true
	File *string `json:"file"`

	// The ICAP Service Tag (ISTag) recorded for this file during the last scan, or null if no tag was recorded.  For more information about ISTags, see https://tools.ietf.org/html/rfc3507.
	LastIstag string `json:"last_istag,omitempty"`

	// The date and time this file was last scanned for viruses, as a UNIX timestamp.  If null, the file has never been scanned.
	LastScan int64 `json:"last_scan,omitempty"`

	// If true, this file is quarantined.  If false, the file is not quarantined.
	// Required: true
	Quarantined *bool `json:"quarantined"`

	// The result of the last scan on this file.  This string is usually one of: never_scanned, clean, quarantined, repaired, truncated, infected_no_action_taken, skipped_per_settings.  However, a longer string starting with 'unknown_status' and describing the details can also appear in uncommon edge cases.
	// Required: true
	ScanResult *string `json:"scan_result"`

	// The scanning status of this file.  If 'current', the file was scanned with the most up-to-date virus defintions.  If 'not_current', it has either not been scanned, been modified since the last scan, or the virus definitions are not current.
	// Required: true
	// Enum: [current not_current]
	ScanStatus *string `json:"scan_status"`
}

// Validate validates this antivirus quarantine
func (m *AntivirusQuarantine) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuarantined(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanResult(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntivirusQuarantine) validateFile(formats strfmt.Registry) error {

	if err := validate.Required("file", "body", m.File); err != nil {
		return err
	}

	return nil
}

func (m *AntivirusQuarantine) validateQuarantined(formats strfmt.Registry) error {

	if err := validate.Required("quarantined", "body", m.Quarantined); err != nil {
		return err
	}

	return nil
}

func (m *AntivirusQuarantine) validateScanResult(formats strfmt.Registry) error {

	if err := validate.Required("scan_result", "body", m.ScanResult); err != nil {
		return err
	}

	return nil
}

var antivirusQuarantineTypeScanStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["current","not_current"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		antivirusQuarantineTypeScanStatusPropEnum = append(antivirusQuarantineTypeScanStatusPropEnum, v)
	}
}

const (

	// AntivirusQuarantineScanStatusCurrent captures enum value "current"
	AntivirusQuarantineScanStatusCurrent string = "current"

	// AntivirusQuarantineScanStatusNotCurrent captures enum value "not_current"
	AntivirusQuarantineScanStatusNotCurrent string = "not_current"
)

// prop value enum
func (m *AntivirusQuarantine) validateScanStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, antivirusQuarantineTypeScanStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AntivirusQuarantine) validateScanStatus(formats strfmt.Registry) error {

	if err := validate.Required("scan_status", "body", m.ScanStatus); err != nil {
		return err
	}

	// value enum
	if err := m.validateScanStatusEnum("scan_status", "body", *m.ScanStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntivirusQuarantine) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntivirusQuarantine) UnmarshalBinary(b []byte) error {
	var res AntivirusQuarantine
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
