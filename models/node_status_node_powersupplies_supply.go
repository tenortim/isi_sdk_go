// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeStatusNodePowersuppliesSupply node status node powersupplies supply
// swagger:model NodeStatusNodePowersuppliesSupply
type NodeStatusNodePowersuppliesSupply struct {

	// Which node chassis is this power supply in.
	Chassis int64 `json:"chassis,omitempty"`

	// The current firmware revision of this power supply.
	Firmware string `json:"firmware,omitempty"`

	// Is this power supply in a failure state.
	Good string `json:"good,omitempty"`

	// Identifying index for this power supply.
	// Required: true
	ID *int64 `json:"id"`

	// Complete identifying string for this power supply.
	Name string `json:"name,omitempty"`

	// A descriptive status string for this power supply.
	Status string `json:"status,omitempty"`

	// The type of this power supply.
	Type string `json:"type,omitempty"`
}

// Validate validates this node status node powersupplies supply
func (m *NodeStatusNodePowersuppliesSupply) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeStatusNodePowersuppliesSupply) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusNodePowersuppliesSupply) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusNodePowersuppliesSupply) UnmarshalBinary(b []byte) error {
	var res NodeStatusNodePowersuppliesSupply
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
