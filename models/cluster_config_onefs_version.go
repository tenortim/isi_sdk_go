// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterConfigOnefsVersion cluster config onefs version
// swagger:model ClusterConfigOnefsVersion
type ClusterConfigOnefsVersion struct {

	// OneFS build string.
	// Required: true
	Build *string `json:"build"`

	// Cluster copyright information.
	// Required: true
	Copyright *string `json:"copyright"`

	// Timestamp of release date.
	// Required: true
	Reldate *int64 `json:"reldate"`

	// Kernel release number.
	// Required: true
	Release *string `json:"release"`

	// OneFS build number.
	// Required: true
	Revision *string `json:"revision"`

	// Kernel release type.
	// Required: true
	Type *string `json:"type"`

	// Kernel full version information.
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this cluster config onefs version
func (m *ClusterConfigOnefsVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuild(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCopyright(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReldate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelease(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterConfigOnefsVersion) validateBuild(formats strfmt.Registry) error {

	if err := validate.Required("build", "body", m.Build); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateCopyright(formats strfmt.Registry) error {

	if err := validate.Required("copyright", "body", m.Copyright); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateReldate(formats strfmt.Registry) error {

	if err := validate.Required("reldate", "body", m.Reldate); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateRelease(formats strfmt.Registry) error {

	if err := validate.Required("release", "body", m.Release); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ClusterConfigOnefsVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterConfigOnefsVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterConfigOnefsVersion) UnmarshalBinary(b []byte) error {
	var res ClusterConfigOnefsVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
