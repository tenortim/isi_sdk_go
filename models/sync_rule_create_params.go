// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncRuleCreateParams sync rule create params
// swagger:model SyncRuleCreateParams
type SyncRuleCreateParams struct {
	SyncRule

	// Amount the specified system resource type is limited by this rule.  Units are kb/s for bandwidth, files/s for file-count, processing percentage used for cpu, or percentage of maximum available workers.
	// Required: true
	Limit *int64 `json:"limit"`

	// The type of system resource this rule limits.
	// Required: true
	// Enum: [bandwidth file_count cpu worker]
	Type *string `json:"type"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *SyncRuleCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 SyncRule
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.SyncRule = aO0

	// AO1
	var dataAO1 struct {
		Limit *int64 `json:"limit"`

		Type *string `json:"type"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Limit = dataAO1.Limit

	m.Type = dataAO1.Type

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m SyncRuleCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.SyncRule)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		Limit *int64 `json:"limit"`

		Type *string `json:"type"`
	}

	dataAO1.Limit = m.Limit

	dataAO1.Type = m.Type

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this sync rule create params
func (m *SyncRuleCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with SyncRule
	if err := m.SyncRule.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SyncRuleCreateParams) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

var syncRuleCreateParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bandwidth","file_count","cpu","worker"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncRuleCreateParamsTypeTypePropEnum = append(syncRuleCreateParamsTypeTypePropEnum, v)
	}
}

// property enum
func (m *SyncRuleCreateParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncRuleCreateParamsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncRuleCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncRuleCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncRuleCreateParams) UnmarshalBinary(b []byte) error {
	var res SyncRuleCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
