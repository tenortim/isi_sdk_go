// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettingsGlobalGlobalSettings settings global global settings
// swagger:model SettingsGlobalGlobalSettings
type SettingsGlobalGlobalSettings struct {

	// Specifies the number of times to retry an ID allocation before failing.
	AllocRetries int64 `json:"alloc_retries,omitempty"`

	// If true, allocates GIDs from a fixed range.
	GidRangeEnabled bool `json:"gid_range_enabled,omitempty"`

	// Specifies the ending number for a fixed range from which GIDs are allocated.
	GidRangeMax int64 `json:"gid_range_max,omitempty"`

	// Specifies the starting number for a fixed range from which GIDs are allocated.
	GidRangeMin int64 `json:"gid_range_min,omitempty"`

	// Specifies the next GID to allocate.
	GidRangeNext int64 `json:"gid_range_next,omitempty"`

	// Specifies the user iD for a group when requested by the kernel.
	GroupUID int64 `json:"group_uid,omitempty"`

	// Specifies which providers are loaded by the authentication daemon (lsassd).
	LoadProviders []string `json:"load_providers"`

	// Starts the RID in the local domain to map a UID and a GID.
	MinMappedRid int64 `json:"min_mapped_rid,omitempty"`

	// Specifies an alternative GID when the kernel is unable to retrieve a GID for a persona.
	NullGid int64 `json:"null_gid,omitempty"`

	// Specifies an alternative UID when the kernel is unable to retrieve a UID for a persona.
	NullUID int64 `json:"null_uid,omitempty"`

	// Specifies the type of identity that is stored on disk.
	OnDiskIdentity string `json:"on_disk_identity,omitempty"`

	// Specifies the minimum amount of time in milliseconds to wait before performing an oprestart.
	RPCBlockTime int64 `json:"rpc_block_time,omitempty"`

	// Specifies the maximum number of outstanding RPC requests.
	RPCMaxRequests int64 `json:"rpc_max_requests,omitempty"`

	// Specifies the maximum amount of time in seconds to wait for an idmap response.
	RPCTimeout int64 `json:"rpc_timeout,omitempty"`

	// If true, sends NTLMv2 responses.
	SendNtlmv2 bool `json:"send_ntlmv2,omitempty"`

	// Specifies the space replacement character.
	SpaceReplacement string `json:"space_replacement,omitempty"`

	// Specifies the minimum GID to attempt to look up in the idmap database.
	SystemGidThreshold int64 `json:"system_gid_threshold,omitempty"`

	// Specifies the minimum UID to attempt to look up in the idmap database.
	SystemUIDThreshold int64 `json:"system_uid_threshold,omitempty"`

	// If true, allocates UIDs from a fixed range.
	UIDRangeEnabled bool `json:"uid_range_enabled,omitempty"`

	// Specifies the ending number for a fixed range from which UIDs are allocated.
	UIDRangeMax int64 `json:"uid_range_max,omitempty"`

	// Specifies the starting number for a fixed range from which UIDs are allocated.
	UIDRangeMin int64 `json:"uid_range_min,omitempty"`

	// Specifies the next UID to allocate.
	UIDRangeNext int64 `json:"uid_range_next,omitempty"`

	// Specifies the GID for the unknown (anonymous) group.
	UnknownGid int64 `json:"unknown_gid,omitempty"`

	// Specifies the UID for the unknown (anonymous) user.
	UnknownUID int64 `json:"unknown_uid,omitempty"`

	// Specifies the maximum size (in bytes) of the security object cache in the authentication daemon.
	UserObjectCacheSize int64 `json:"user_object_cache_size,omitempty"`

	// Specifies the NetBIOS workgroup or domain.
	Workgroup string `json:"workgroup,omitempty"`
}

// Validate validates this settings global global settings
func (m *SettingsGlobalGlobalSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLoadProviders(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var settingsGlobalGlobalSettingsLoadProvidersItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveDirectory","Local","Nss","File","Nis","Ldap","Krb5"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settingsGlobalGlobalSettingsLoadProvidersItemsEnum = append(settingsGlobalGlobalSettingsLoadProvidersItemsEnum, v)
	}
}

func (m *SettingsGlobalGlobalSettings) validateLoadProvidersItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, settingsGlobalGlobalSettingsLoadProvidersItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SettingsGlobalGlobalSettings) validateLoadProviders(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadProviders) { // not required
		return nil
	}

	for i := 0; i < len(m.LoadProviders); i++ {

		// value enum
		if err := m.validateLoadProvidersItemsEnum("load_providers"+"."+strconv.Itoa(i), "body", m.LoadProviders[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsGlobalGlobalSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsGlobalGlobalSettings) UnmarshalBinary(b []byte) error {
	var res SettingsGlobalGlobalSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
