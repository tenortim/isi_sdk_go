// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NdmpDumpdate ndmp dumpdate
// swagger:model NdmpDumpdate
type NdmpDumpdate struct {

	// The backup time since epoch.
	Date int64 `json:"date,omitempty"`

	// The unique display id.
	ID string `json:"id,omitempty"`

	// The level of the backup.
	// Maximum: 10
	// Minimum: 0
	Level *int64 `json:"level,omitempty"`

	// The path spedificed by NDMP environment variable FILESYSTEM.
	Path string `json:"path,omitempty"`

	// The snapshot ID used for a faster incremental backup. 0 means a regular backup.
	Snapid int64 `json:"snapid,omitempty"`
}

// Validate validates this ndmp dumpdate
func (m *NdmpDumpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NdmpDumpdate) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	if err := validate.MinimumInt("level", "body", int64(*m.Level), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("level", "body", int64(*m.Level), 10, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NdmpDumpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NdmpDumpdate) UnmarshalBinary(b []byte) error {
	var res NdmpDumpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
