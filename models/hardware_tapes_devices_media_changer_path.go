// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareTapesDevicesMediaChangerPath hardware tapes devices media changer path
// swagger:model HardwareTapesDevicesMediaChangerPath
type HardwareTapesDevicesMediaChangerPath struct {

	// Logic unit number of the device on the path
	LUN int64 `json:"LUN,omitempty"`

	// Device driver file name
	Devname string `json:"devname,omitempty"`

	// Number of open
	Opencount int64 `json:"opencount,omitempty"`

	// Pass through device driver file name
	Passname string `json:"passname,omitempty"`

	// Path of the device
	Path string `json:"path,omitempty"`

	// Port ID on the path
	Portid string `json:"portid,omitempty"`

	// path state
	// Enum: [active inactive]
	State string `json:"state,omitempty"`

	// World wide port name
	Wwpn string `json:"wwpn,omitempty"`
}

// Validate validates this hardware tapes devices media changer path
func (m *HardwareTapesDevicesMediaChangerPath) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var hardwareTapesDevicesMediaChangerPathTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["active","inactive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareTapesDevicesMediaChangerPathTypeStatePropEnum = append(hardwareTapesDevicesMediaChangerPathTypeStatePropEnum, v)
	}
}

const (

	// HardwareTapesDevicesMediaChangerPathStateActive captures enum value "active"
	HardwareTapesDevicesMediaChangerPathStateActive string = "active"

	// HardwareTapesDevicesMediaChangerPathStateInactive captures enum value "inactive"
	HardwareTapesDevicesMediaChangerPathStateInactive string = "inactive"
)

// prop value enum
func (m *HardwareTapesDevicesMediaChangerPath) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareTapesDevicesMediaChangerPathTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareTapesDevicesMediaChangerPath) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareTapesDevicesMediaChangerPath) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareTapesDevicesMediaChangerPath) UnmarshalBinary(b []byte) error {
	var res HardwareTapesDevicesMediaChangerPath
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
