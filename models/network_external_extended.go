// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkExternalExtended network external extended
// swagger:model NetworkExternalExtended
type NetworkExternalExtended struct {

	// Enable or disable Source Based Routing (Defaults to false)
	Sbr bool `json:"sbr,omitempty"`

	// Delay in seconds for IP rebalance.
	// Maximum: 10
	// Minimum: 0
	ScRebalanceDelay *int64 `json:"sc_rebalance_delay,omitempty"`

	// List of client TCP ports.
	TCPPorts []*int64 `json:"tcp_ports"`
}

// Validate validates this network external extended
func (m *NetworkExternalExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScRebalanceDelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPPorts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkExternalExtended) validateScRebalanceDelay(formats strfmt.Registry) error {

	if swag.IsZero(m.ScRebalanceDelay) { // not required
		return nil
	}

	if err := validate.MinimumInt("sc_rebalance_delay", "body", int64(*m.ScRebalanceDelay), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("sc_rebalance_delay", "body", int64(*m.ScRebalanceDelay), 10, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkExternalExtended) validateTCPPorts(formats strfmt.Registry) error {

	if swag.IsZero(m.TCPPorts) { // not required
		return nil
	}

	for i := 0; i < len(m.TCPPorts); i++ {
		if swag.IsZero(m.TCPPorts[i]) { // not required
			continue
		}

		if err := validate.MinimumInt("tcp_ports"+"."+strconv.Itoa(i), "body", int64(*m.TCPPorts[i]), 0, false); err != nil {
			return err
		}

		if err := validate.MaximumInt("tcp_ports"+"."+strconv.Itoa(i), "body", int64(*m.TCPPorts[i]), 65535, false); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkExternalExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkExternalExtended) UnmarshalBinary(b []byte) error {
	var res NetworkExternalExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
