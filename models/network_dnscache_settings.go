// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkDnscacheSettings network dnscache settings
// swagger:model NetworkDnscacheSettings
type NetworkDnscacheSettings struct {

	// DNS cache entry limit
	// Required: true
	// Maximum: 1.048576e+06
	// Minimum: 1024
	CacheEntryLimit *int64 `json:"cache_entry_limit"`

	// Timeout value for calls made to other nodes in the cluster
	// Required: true
	// Maximum: 30
	// Minimum: 1
	ClusterTimeout *int64 `json:"cluster_timeout"`

	// Timeout value for calls made to the dns resolvers
	// Required: true
	// Maximum: 30
	// Minimum: 1
	DNSTimeout *int64 `json:"dns_timeout"`

	// Lead time to refresh cache entries nearing expiration
	// Required: true
	// Maximum: 60
	// Minimum: 0
	EagerRefresh *int64 `json:"eager_refresh"`

	// Deltas for checking cbind cluster health
	// Required: true
	// Maximum: 60
	// Minimum: 0
	TestpingDelta *int64 `json:"testping_delta"`

	// Upper bound on ttl for cache hits
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMaxNoerror *int64 `json:"ttl_max_noerror"`

	// Upper bound on ttl for nxdomain
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMaxNxdomain *int64 `json:"ttl_max_nxdomain"`

	// Upper bound on ttl for non-nxdomain failures
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMaxOther *int64 `json:"ttl_max_other"`

	// Upper bound on ttl for server failures
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMaxServfail *int64 `json:"ttl_max_servfail"`

	// Lower bound on ttl for cache hits
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMinNoerror *int64 `json:"ttl_min_noerror"`

	// Lower bound on ttl for nxdomain
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMinNxdomain *int64 `json:"ttl_min_nxdomain"`

	// Lower bound on ttl for non-nxdomain failures
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMinOther *int64 `json:"ttl_min_other"`

	// Lower bound on ttl for server failures
	// Required: true
	// Maximum: 3600
	// Minimum: 0
	TTLMinServfail *int64 `json:"ttl_min_servfail"`
}

// Validate validates this network dnscache settings
func (m *NetworkDnscacheSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacheEntryLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEagerRefresh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestpingDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxNoerror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxNxdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMaxServfail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinNoerror(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinNxdomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinOther(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTTLMinServfail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkDnscacheSettings) validateCacheEntryLimit(formats strfmt.Registry) error {

	if err := validate.Required("cache_entry_limit", "body", m.CacheEntryLimit); err != nil {
		return err
	}

	if err := validate.MinimumInt("cache_entry_limit", "body", int64(*m.CacheEntryLimit), 1024, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cache_entry_limit", "body", int64(*m.CacheEntryLimit), 1.048576e+06, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateClusterTimeout(formats strfmt.Registry) error {

	if err := validate.Required("cluster_timeout", "body", m.ClusterTimeout); err != nil {
		return err
	}

	if err := validate.MinimumInt("cluster_timeout", "body", int64(*m.ClusterTimeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("cluster_timeout", "body", int64(*m.ClusterTimeout), 30, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateDNSTimeout(formats strfmt.Registry) error {

	if err := validate.Required("dns_timeout", "body", m.DNSTimeout); err != nil {
		return err
	}

	if err := validate.MinimumInt("dns_timeout", "body", int64(*m.DNSTimeout), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("dns_timeout", "body", int64(*m.DNSTimeout), 30, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateEagerRefresh(formats strfmt.Registry) error {

	if err := validate.Required("eager_refresh", "body", m.EagerRefresh); err != nil {
		return err
	}

	if err := validate.MinimumInt("eager_refresh", "body", int64(*m.EagerRefresh), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("eager_refresh", "body", int64(*m.EagerRefresh), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTestpingDelta(formats strfmt.Registry) error {

	if err := validate.Required("testping_delta", "body", m.TestpingDelta); err != nil {
		return err
	}

	if err := validate.MinimumInt("testping_delta", "body", int64(*m.TestpingDelta), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("testping_delta", "body", int64(*m.TestpingDelta), 60, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMaxNoerror(formats strfmt.Registry) error {

	if err := validate.Required("ttl_max_noerror", "body", m.TTLMaxNoerror); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_max_noerror", "body", int64(*m.TTLMaxNoerror), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_noerror", "body", int64(*m.TTLMaxNoerror), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMaxNxdomain(formats strfmt.Registry) error {

	if err := validate.Required("ttl_max_nxdomain", "body", m.TTLMaxNxdomain); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_max_nxdomain", "body", int64(*m.TTLMaxNxdomain), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_nxdomain", "body", int64(*m.TTLMaxNxdomain), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMaxOther(formats strfmt.Registry) error {

	if err := validate.Required("ttl_max_other", "body", m.TTLMaxOther); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_max_other", "body", int64(*m.TTLMaxOther), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_other", "body", int64(*m.TTLMaxOther), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMaxServfail(formats strfmt.Registry) error {

	if err := validate.Required("ttl_max_servfail", "body", m.TTLMaxServfail); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_max_servfail", "body", int64(*m.TTLMaxServfail), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_max_servfail", "body", int64(*m.TTLMaxServfail), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMinNoerror(formats strfmt.Registry) error {

	if err := validate.Required("ttl_min_noerror", "body", m.TTLMinNoerror); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_min_noerror", "body", int64(*m.TTLMinNoerror), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_noerror", "body", int64(*m.TTLMinNoerror), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMinNxdomain(formats strfmt.Registry) error {

	if err := validate.Required("ttl_min_nxdomain", "body", m.TTLMinNxdomain); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_min_nxdomain", "body", int64(*m.TTLMinNxdomain), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_nxdomain", "body", int64(*m.TTLMinNxdomain), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMinOther(formats strfmt.Registry) error {

	if err := validate.Required("ttl_min_other", "body", m.TTLMinOther); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_min_other", "body", int64(*m.TTLMinOther), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_other", "body", int64(*m.TTLMinOther), 3600, false); err != nil {
		return err
	}

	return nil
}

func (m *NetworkDnscacheSettings) validateTTLMinServfail(formats strfmt.Registry) error {

	if err := validate.Required("ttl_min_servfail", "body", m.TTLMinServfail); err != nil {
		return err
	}

	if err := validate.MinimumInt("ttl_min_servfail", "body", int64(*m.TTLMinServfail), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("ttl_min_servfail", "body", int64(*m.TTLMinServfail), 3600, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkDnscacheSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkDnscacheSettings) UnmarshalBinary(b []byte) error {
	var res NetworkDnscacheSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
