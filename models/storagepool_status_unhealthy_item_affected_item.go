// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StoragepoolStatusUnhealthyItemAffectedItem storagepool status unhealthy item affected item
// swagger:model StoragepoolStatusUnhealthyItemAffectedItem
type StoragepoolStatusUnhealthyItemAffectedItem struct {

	// device
	Device *StoragepoolStatusUnprovisionedItem `json:"device,omitempty"`

	// Whether or not the device is currently down.
	// Required: true
	Down *bool `json:"down"`

	// Whether or not the device is currently being repaired.
	// Required: true
	Restriping *bool `json:"restriping"`

	// Whether or not the device is currently smartfailed.
	// Required: true
	Smartfailed *bool `json:"smartfailed"`

	// The type of affected device.
	// Required: true
	// Enum: [node drive]
	Type *string `json:"type"`
}

// Validate validates this storagepool status unhealthy item affected item
func (m *StoragepoolStatusUnhealthyItemAffectedItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRestriping(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartfailed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateDevice(formats strfmt.Registry) error {

	if swag.IsZero(m.Device) { // not required
		return nil
	}

	if m.Device != nil {
		if err := m.Device.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("device")
			}
			return err
		}
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateDown(formats strfmt.Registry) error {

	if err := validate.Required("down", "body", m.Down); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateRestriping(formats strfmt.Registry) error {

	if err := validate.Required("restriping", "body", m.Restriping); err != nil {
		return err
	}

	return nil
}

func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateSmartfailed(formats strfmt.Registry) error {

	if err := validate.Required("smartfailed", "body", m.Smartfailed); err != nil {
		return err
	}

	return nil
}

var storagepoolStatusUnhealthyItemAffectedItemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["node","drive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		storagepoolStatusUnhealthyItemAffectedItemTypeTypePropEnum = append(storagepoolStatusUnhealthyItemAffectedItemTypeTypePropEnum, v)
	}
}

const (

	// StoragepoolStatusUnhealthyItemAffectedItemTypeNode captures enum value "node"
	StoragepoolStatusUnhealthyItemAffectedItemTypeNode string = "node"

	// StoragepoolStatusUnhealthyItemAffectedItemTypeDrive captures enum value "drive"
	StoragepoolStatusUnhealthyItemAffectedItemTypeDrive string = "drive"
)

// prop value enum
func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, storagepoolStatusUnhealthyItemAffectedItemTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StoragepoolStatusUnhealthyItemAffectedItem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StoragepoolStatusUnhealthyItemAffectedItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StoragepoolStatusUnhealthyItemAffectedItem) UnmarshalBinary(b []byte) error {
	var res StoragepoolStatusUnhealthyItemAffectedItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
