// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudJobsFilesFile cloud jobs files file
// swagger:model CloudJobsFilesFile
type CloudJobsFilesFile struct {

	// ID number of the file within the job
	// Minimum: 1
	ID int64 `json:"id,omitempty"`

	// File path
	// Max Length: 1024
	// Min Length: 1
	Name string `json:"name,omitempty"`

	// State of file.
	// Enum: [waiting running paused canceled completed error none pending]
	State string `json:"state,omitempty"`
}

// Validate validates this cloud jobs files file
func (m *CloudJobsFilesFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudJobsFilesFile) validateID(formats strfmt.Registry) error {

	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("id", "body", int64(m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CloudJobsFilesFile) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 1024); err != nil {
		return err
	}

	return nil
}

var cloudJobsFilesFileTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["waiting","running","paused","canceled","completed","error","none","pending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudJobsFilesFileTypeStatePropEnum = append(cloudJobsFilesFileTypeStatePropEnum, v)
	}
}

const (

	// CloudJobsFilesFileStateWaiting captures enum value "waiting"
	CloudJobsFilesFileStateWaiting string = "waiting"

	// CloudJobsFilesFileStateRunning captures enum value "running"
	CloudJobsFilesFileStateRunning string = "running"

	// CloudJobsFilesFileStatePaused captures enum value "paused"
	CloudJobsFilesFileStatePaused string = "paused"

	// CloudJobsFilesFileStateCanceled captures enum value "canceled"
	CloudJobsFilesFileStateCanceled string = "canceled"

	// CloudJobsFilesFileStateCompleted captures enum value "completed"
	CloudJobsFilesFileStateCompleted string = "completed"

	// CloudJobsFilesFileStateError captures enum value "error"
	CloudJobsFilesFileStateError string = "error"

	// CloudJobsFilesFileStateNone captures enum value "none"
	CloudJobsFilesFileStateNone string = "none"

	// CloudJobsFilesFileStatePending captures enum value "pending"
	CloudJobsFilesFileStatePending string = "pending"
)

// prop value enum
func (m *CloudJobsFilesFile) validateStateEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudJobsFilesFileTypeStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudJobsFilesFile) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudJobsFilesFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudJobsFilesFile) UnmarshalBinary(b []byte) error {
	var res CloudJobsFilesFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
