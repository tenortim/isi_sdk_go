// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AntivirusSettingsSettings antivirus settings settings
// swagger:model AntivirusSettingsSettings
type AntivirusSettingsSettings struct {

	// Allow access when scanning fails.
	FailOpen bool `json:"fail_open,omitempty"`

	// Glob patterns for leaf filenames.
	GlobFilters []string `json:"glob_filters"`

	// Enable glob filters.
	GlobFiltersEnabled bool `json:"glob_filters_enabled,omitempty"`

	// If true, only scan files matching a glob filter. If false, only scan files that don't match a glob filter.
	GlobFiltersInclude bool `json:"glob_filters_include,omitempty"`

	// Paths to include in realtime scans.
	PathPrefixes []string `json:"path_prefixes"`

	// Try to quarantine files when threats are found.
	Quarantine bool `json:"quarantine,omitempty"`

	// Try to repair files when threats are found.
	Repair bool `json:"repair,omitempty"`

	// Amount of time in seconds until old reporting data is purged.
	// Minimum: 0
	ReportExpiry *int64 `json:"report_expiry,omitempty"`

	// Scan files when apps close them.
	ScanOnClose bool `json:"scan_on_close,omitempty"`

	// Scan files on access.
	ScanOnOpen bool `json:"scan_on_open,omitempty"`

	// Skip scanning files larger than this.
	// Minimum: 0
	ScanSizeMaximum *int64 `json:"scan_size_maximum,omitempty"`

	// Whether the antivirus service is enabled.
	Service bool `json:"service,omitempty"`

	// Try to truncate files when threats are found.
	Truncate bool `json:"truncate,omitempty"`
}

// Validate validates this antivirus settings settings
func (m *AntivirusSettingsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePathPrefixes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReportExpiry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScanSizeMaximum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AntivirusSettingsSettings) validatePathPrefixes(formats strfmt.Registry) error {

	if swag.IsZero(m.PathPrefixes) { // not required
		return nil
	}

	for i := 0; i < len(m.PathPrefixes); i++ {

		if err := validate.Pattern("path_prefixes"+"."+strconv.Itoa(i), "body", string(m.PathPrefixes[i]), `^/ifs.*`); err != nil {
			return err
		}

	}

	return nil
}

func (m *AntivirusSettingsSettings) validateReportExpiry(formats strfmt.Registry) error {

	if swag.IsZero(m.ReportExpiry) { // not required
		return nil
	}

	if err := validate.MinimumInt("report_expiry", "body", int64(*m.ReportExpiry), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *AntivirusSettingsSettings) validateScanSizeMaximum(formats strfmt.Registry) error {

	if swag.IsZero(m.ScanSizeMaximum) { // not required
		return nil
	}

	if err := validate.MinimumInt("scan_size_maximum", "body", int64(*m.ScanSizeMaximum), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AntivirusSettingsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AntivirusSettingsSettings) UnmarshalBinary(b []byte) error {
	var res AntivirusSettingsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
