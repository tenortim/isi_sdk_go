// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettingsCharacterEncodingsSettings settings character encodings settings
// swagger:model SettingsCharacterEncodingsSettings
type SettingsCharacterEncodingsSettings struct {

	// Current character encoding.
	// Required: true
	CurrentEncoding *string `json:"current-encoding"`

	// Default character encoding.
	// Required: true
	DefaultEncoding *string `json:"default-encoding"`

	// A list of supported encoding values.
	// Required: true
	Encodings []string `json:"encodings"`
}

// Validate validates this settings character encodings settings
func (m *SettingsCharacterEncodingsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefaultEncoding(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncodings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettingsCharacterEncodingsSettings) validateCurrentEncoding(formats strfmt.Registry) error {

	if err := validate.Required("current-encoding", "body", m.CurrentEncoding); err != nil {
		return err
	}

	return nil
}

func (m *SettingsCharacterEncodingsSettings) validateDefaultEncoding(formats strfmt.Registry) error {

	if err := validate.Required("default-encoding", "body", m.DefaultEncoding); err != nil {
		return err
	}

	return nil
}

func (m *SettingsCharacterEncodingsSettings) validateEncodings(formats strfmt.Registry) error {

	if err := validate.Required("encodings", "body", m.Encodings); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettingsCharacterEncodingsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettingsCharacterEncodingsSettings) UnmarshalBinary(b []byte) error {
	var res SettingsCharacterEncodingsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
