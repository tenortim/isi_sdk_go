// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WormDomain worm domain
// swagger:model WormDomain
type WormDomain struct {

	// Specifies the autocommit time period for the domain in seconds.  After a file is in the domain without being modified for the specified time period, the file is automatically committed. If this parameter is set to null, there is no autocommit time, and files must be committed manually.
	// Minimum: 0
	AutocommitOffset *int64 `json:"autocommit_offset,omitempty"`

	// default retention
	DefaultRetention string `json:"default_retention,omitempty"`

	// max retention
	MaxRetention string `json:"max_retention,omitempty"`

	// min retention
	MinRetention string `json:"min_retention,omitempty"`

	// Specifies the override retention date for the domain. If this date is later than the retention date for any committed file, the file will remain protected until the override retention date.
	// Minimum: 0
	OverrideDate *int64 `json:"override_date,omitempty"`

	// When this value is set to 'on', files in this domain can be deleted through the privileged delete feature. If this value is set to 'disabled', privileged file deletes are permanently disabled and cannot be turned on again.
	// Enum: [on off disabled]
	PrivilegedDelete string `json:"privileged_delete,omitempty"`

	// Specifies whether the domain is an enterprise domain or a compliance domain. Compliance domains can not be created on enterprise clusters. Enterprise and compliance domains can be created on compliance clusters.
	// Enum: [enterprise compliance]
	Type string `json:"type,omitempty"`
}

// Validate validates this worm domain
func (m *WormDomain) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutocommitOffset(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideDate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivilegedDelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WormDomain) validateAutocommitOffset(formats strfmt.Registry) error {

	if swag.IsZero(m.AutocommitOffset) { // not required
		return nil
	}

	if err := validate.MinimumInt("autocommit_offset", "body", int64(*m.AutocommitOffset), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *WormDomain) validateOverrideDate(formats strfmt.Registry) error {

	if swag.IsZero(m.OverrideDate) { // not required
		return nil
	}

	if err := validate.MinimumInt("override_date", "body", int64(*m.OverrideDate), 0, false); err != nil {
		return err
	}

	return nil
}

var wormDomainTypePrivilegedDeletePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["on","off","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wormDomainTypePrivilegedDeletePropEnum = append(wormDomainTypePrivilegedDeletePropEnum, v)
	}
}

const (

	// WormDomainPrivilegedDeleteOn captures enum value "on"
	WormDomainPrivilegedDeleteOn string = "on"

	// WormDomainPrivilegedDeleteOff captures enum value "off"
	WormDomainPrivilegedDeleteOff string = "off"

	// WormDomainPrivilegedDeleteDisabled captures enum value "disabled"
	WormDomainPrivilegedDeleteDisabled string = "disabled"
)

// prop value enum
func (m *WormDomain) validatePrivilegedDeleteEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wormDomainTypePrivilegedDeletePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WormDomain) validatePrivilegedDelete(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivilegedDelete) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivilegedDeleteEnum("privileged_delete", "body", m.PrivilegedDelete); err != nil {
		return err
	}

	return nil
}

var wormDomainTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["enterprise","compliance"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wormDomainTypeTypePropEnum = append(wormDomainTypeTypePropEnum, v)
	}
}

const (

	// WormDomainTypeEnterprise captures enum value "enterprise"
	WormDomainTypeEnterprise string = "enterprise"

	// WormDomainTypeCompliance captures enum value "compliance"
	WormDomainTypeCompliance string = "compliance"
)

// prop value enum
func (m *WormDomain) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, wormDomainTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WormDomain) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *WormDomain) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WormDomain) UnmarshalBinary(b []byte) error {
	var res WormDomain
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
