// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaQuotaUsage quota quota usage
// swagger:model QuotaQuotaUsage
type QuotaQuotaUsage struct {

	// Number of inodes (filesystem entities) used by governed data.
	// Required: true
	Inodes *int64 `json:"inodes"`

	// Apparent bytes used by governed data.
	// Required: true
	Logical *int64 `json:"logical"`

	// Bytes used for governed data and filesystem overhead.
	// Required: true
	Physical *int64 `json:"physical"`
}

// Validate validates this quota quota usage
func (m *QuotaQuotaUsage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInodes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysical(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaQuotaUsage) validateInodes(formats strfmt.Registry) error {

	if err := validate.Required("inodes", "body", m.Inodes); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaUsage) validateLogical(formats strfmt.Registry) error {

	if err := validate.Required("logical", "body", m.Logical); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaUsage) validatePhysical(formats strfmt.Registry) error {

	if err := validate.Required("physical", "body", m.Physical); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaQuotaUsage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaQuotaUsage) UnmarshalBinary(b []byte) error {
	var res QuotaQuotaUsage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
