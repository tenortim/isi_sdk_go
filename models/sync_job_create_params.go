// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SyncJobCreateParams sync job create params
// swagger:model SyncJobCreateParams
type SyncJobCreateParams struct {

	// The action to be taken by this job.
	// Enum: [resync_prep allow_write allow_write_revert test]
	Action string `json:"action,omitempty"`

	// The ID or Name of the policy
	// Required: true
	ID *string `json:"id"`

	// Only valid for allow_write, and allow_write_revert; specify the desired logging level, will be stored in the logs for isi_migrate, defaults to 'info'.
	// Enum: [fatal error notice info copy debug trace]
	LogLevel string `json:"log_level,omitempty"`

	// An optional snapshot to copy/sync from.
	SourceSnapshot string `json:"source_snapshot,omitempty"`

	// Only valid for allow_write, and allow_write_revert; specify the desired workers per node, defaults to 3.
	WorkersPerNode int64 `json:"workers_per_node,omitempty"`
}

// Validate validates this sync job create params
func (m *SyncJobCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var syncJobCreateParamsTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["resync_prep","allow_write","allow_write_revert","test"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncJobCreateParamsTypeActionPropEnum = append(syncJobCreateParamsTypeActionPropEnum, v)
	}
}

const (

	// SyncJobCreateParamsActionResyncPrep captures enum value "resync_prep"
	SyncJobCreateParamsActionResyncPrep string = "resync_prep"

	// SyncJobCreateParamsActionAllowWrite captures enum value "allow_write"
	SyncJobCreateParamsActionAllowWrite string = "allow_write"

	// SyncJobCreateParamsActionAllowWriteRevert captures enum value "allow_write_revert"
	SyncJobCreateParamsActionAllowWriteRevert string = "allow_write_revert"

	// SyncJobCreateParamsActionTest captures enum value "test"
	SyncJobCreateParamsActionTest string = "test"
)

// prop value enum
func (m *SyncJobCreateParams) validateActionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncJobCreateParamsTypeActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncJobCreateParams) validateAction(formats strfmt.Registry) error {

	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", m.Action); err != nil {
		return err
	}

	return nil
}

func (m *SyncJobCreateParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var syncJobCreateParamsTypeLogLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["fatal","error","notice","info","copy","debug","trace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		syncJobCreateParamsTypeLogLevelPropEnum = append(syncJobCreateParamsTypeLogLevelPropEnum, v)
	}
}

const (

	// SyncJobCreateParamsLogLevelFatal captures enum value "fatal"
	SyncJobCreateParamsLogLevelFatal string = "fatal"

	// SyncJobCreateParamsLogLevelError captures enum value "error"
	SyncJobCreateParamsLogLevelError string = "error"

	// SyncJobCreateParamsLogLevelNotice captures enum value "notice"
	SyncJobCreateParamsLogLevelNotice string = "notice"

	// SyncJobCreateParamsLogLevelInfo captures enum value "info"
	SyncJobCreateParamsLogLevelInfo string = "info"

	// SyncJobCreateParamsLogLevelCopy captures enum value "copy"
	SyncJobCreateParamsLogLevelCopy string = "copy"

	// SyncJobCreateParamsLogLevelDebug captures enum value "debug"
	SyncJobCreateParamsLogLevelDebug string = "debug"

	// SyncJobCreateParamsLogLevelTrace captures enum value "trace"
	SyncJobCreateParamsLogLevelTrace string = "trace"
)

// prop value enum
func (m *SyncJobCreateParams) validateLogLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, syncJobCreateParamsTypeLogLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SyncJobCreateParams) validateLogLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.LogLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateLogLevelEnum("log_level", "body", m.LogLevel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SyncJobCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SyncJobCreateParams) UnmarshalBinary(b []byte) error {
	var res SyncJobCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
