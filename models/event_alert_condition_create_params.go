// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EventAlertConditionCreateParams event alert condition create params
// swagger:model EventAlertConditionCreateParams
type EventAlertConditionCreateParams struct {
	EventAlertConditionsAlertCondition

	// Channels for alert
	// Required: true
	ChannelIds []int64 `json:"channel_ids"`

	// Trigger condition for alert
	// Required: true
	// Enum: [NEW NEW EVENTS ONGOING SEVERITY INCREASE SEVERITY DECREASE RESOLVED]
	Condition *string `json:"condition"`

	// Unique identifier.
	// Required: true
	Name *string `json:"name"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *EventAlertConditionCreateParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 EventAlertConditionsAlertCondition
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.EventAlertConditionsAlertCondition = aO0

	// AO1
	var dataAO1 struct {
		ChannelIds []int64 `json:"channel_ids"`

		Condition *string `json:"condition"`

		Name *string `json:"name"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ChannelIds = dataAO1.ChannelIds

	m.Condition = dataAO1.Condition

	m.Name = dataAO1.Name

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m EventAlertConditionCreateParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.EventAlertConditionsAlertCondition)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		ChannelIds []int64 `json:"channel_ids"`

		Condition *string `json:"condition"`

		Name *string `json:"name"`
	}

	dataAO1.ChannelIds = m.ChannelIds

	dataAO1.Condition = m.Condition

	dataAO1.Name = m.Name

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this event alert condition create params
func (m *EventAlertConditionCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with EventAlertConditionsAlertCondition
	if err := m.EventAlertConditionsAlertCondition.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChannelIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCondition(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EventAlertConditionCreateParams) validateChannelIds(formats strfmt.Registry) error {

	if err := validate.Required("channel_ids", "body", m.ChannelIds); err != nil {
		return err
	}

	return nil
}

var eventAlertConditionCreateParamsTypeConditionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEW","NEW EVENTS","ONGOING","SEVERITY INCREASE","SEVERITY DECREASE","RESOLVED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		eventAlertConditionCreateParamsTypeConditionPropEnum = append(eventAlertConditionCreateParamsTypeConditionPropEnum, v)
	}
}

// property enum
func (m *EventAlertConditionCreateParams) validateConditionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, eventAlertConditionCreateParamsTypeConditionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EventAlertConditionCreateParams) validateCondition(formats strfmt.Registry) error {

	if err := validate.Required("condition", "body", m.Condition); err != nil {
		return err
	}

	// value enum
	if err := m.validateConditionEnum("condition", "body", *m.Condition); err != nil {
		return err
	}

	return nil
}

func (m *EventAlertConditionCreateParams) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EventAlertConditionCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EventAlertConditionCreateParams) UnmarshalBinary(b []byte) error {
	var res EventAlertConditionCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
