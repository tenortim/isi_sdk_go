// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbSettingsShareSettings smb settings share settings
// swagger:model SmbSettingsShareSettings
type SmbSettingsShareSettings struct {

	// Only enumerate files and folders the requesting user has access to.
	AccessBasedEnumeration bool `json:"access_based_enumeration,omitempty"`

	// Access-based enumeration on only the root directory of the share.
	AccessBasedEnumerationRootOnly bool `json:"access_based_enumeration_root_only,omitempty"`

	// Allow deletion of read-only files in the share.
	AllowDeleteReadonly bool `json:"allow_delete_readonly,omitempty"`

	// Allows users to execute files they have read rights for.
	AllowExecuteAlways bool `json:"allow_execute_always,omitempty"`

	// Persistent open timeout for the share.
	// Minimum: 2
	CaTimeout int64 `json:"ca_timeout,omitempty"`

	// Specify the level of write-integrity on continuously available shares.
	// Enum: [none write-read-coherent full]
	CaWriteIntegrity string `json:"ca_write_integrity,omitempty"`

	// Specify level of change notification alerts on the share.
	// Enum: [all norecurse none]
	ChangeNotify string `json:"change_notify,omitempty"`

	// Set the create permissions for new files and directories in share.
	// Enum: [default acl inherit mode bits use create mask and mode]
	CreatePermissions string `json:"create_permissions,omitempty"`

	// Client-side caching policy for the shares.
	// Enum: [manual documents programs none]
	CscPolicy string `json:"csc_policy,omitempty"`

	// Unix umask or mode bits.
	// Maximum: 511
	// Minimum: 0
	DirectoryCreateMask *int64 `json:"directory_create_mask,omitempty"`

	// Unix umask or mode bits.
	// Maximum: 511
	// Minimum: 0
	DirectoryCreateMode *int64 `json:"directory_create_mode,omitempty"`

	// Unix umask or mode bits.
	// Maximum: 511
	// Minimum: 0
	FileCreateMask *int64 `json:"file_create_mask,omitempty"`

	// Unix umask or mode bits.
	// Maximum: 511
	// Minimum: 0
	FileCreateMode *int64 `json:"file_create_mode,omitempty"`

	// Specifies the list of file extensions.
	FileFilterExtensions []string `json:"file_filter_extensions"`

	// Specifies if filter list is for deny or allow. Default is deny.
	// Enum: [deny allow]
	FileFilterType string `json:"file_filter_type,omitempty"`

	// Enables file filtering on the share.
	FileFilteringEnabled bool `json:"file_filtering_enabled,omitempty"`

	// Hide files and directories that begin with a period '.'.
	HideDotFiles bool `json:"hide_dot_files,omitempty"`

	// An ACL expressing which hosts are allowed access. A deny clause must be the final entry.
	HostACL []string `json:"host_acl"`

	// Specify the condition in which user access is done as the guest account.
	// Enum: [always bad user never]
	ImpersonateGuest string `json:"impersonate_guest,omitempty"`

	// User account to be used as guest account.
	ImpersonateUser string `json:"impersonate_user,omitempty"`

	// Specifies the wchar_t starting point for automatic byte mangling.
	// Maximum: 65535
	// Minimum: 256
	MangleByteStart int64 `json:"mangle_byte_start,omitempty"`

	// Character mangle map.
	MangleMap []string `json:"mangle_map"`

	// Support NTFS ACLs on files and directories.
	NtfsACLSupport bool `json:"ntfs_acl_support,omitempty"`

	// Allow oplock requests.
	Oplocks bool `json:"oplocks,omitempty"`

	// Specifies if persistent opens would do strict lockout on the share.
	StrictCaLockout bool `json:"strict_ca_lockout,omitempty"`

	// Handle SMB flush operations.
	StrictFlush bool `json:"strict_flush,omitempty"`

	// Specifies whether byte range locks contend against SMB I/O.
	StrictLocking bool `json:"strict_locking,omitempty"`

	// Name of the access zone in which to update settings
	Zone string `json:"zone,omitempty"`
}

// Validate validates this smb settings share settings
func (m *SmbSettingsShareSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCaTimeout(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaWriteIntegrity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateChangeNotify(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatePermissions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCscPolicy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectoryCreateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirectoryCreateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileCreateMask(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileCreateMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileFilterType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImpersonateGuest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMangleByteStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateCaTimeout(formats strfmt.Registry) error {

	if swag.IsZero(m.CaTimeout) { // not required
		return nil
	}

	if err := validate.MinimumInt("ca_timeout", "body", int64(m.CaTimeout), 2, false); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeCaWriteIntegrityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["none","write-read-coherent","full"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeCaWriteIntegrityPropEnum = append(smbSettingsShareSettingsTypeCaWriteIntegrityPropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsCaWriteIntegrityNone captures enum value "none"
	SmbSettingsShareSettingsCaWriteIntegrityNone string = "none"

	// SmbSettingsShareSettingsCaWriteIntegrityWriteReadCoherent captures enum value "write-read-coherent"
	SmbSettingsShareSettingsCaWriteIntegrityWriteReadCoherent string = "write-read-coherent"

	// SmbSettingsShareSettingsCaWriteIntegrityFull captures enum value "full"
	SmbSettingsShareSettingsCaWriteIntegrityFull string = "full"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateCaWriteIntegrityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeCaWriteIntegrityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateCaWriteIntegrity(formats strfmt.Registry) error {

	if swag.IsZero(m.CaWriteIntegrity) { // not required
		return nil
	}

	// value enum
	if err := m.validateCaWriteIntegrityEnum("ca_write_integrity", "body", m.CaWriteIntegrity); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeChangeNotifyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["all","norecurse","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeChangeNotifyPropEnum = append(smbSettingsShareSettingsTypeChangeNotifyPropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsChangeNotifyAll captures enum value "all"
	SmbSettingsShareSettingsChangeNotifyAll string = "all"

	// SmbSettingsShareSettingsChangeNotifyNorecurse captures enum value "norecurse"
	SmbSettingsShareSettingsChangeNotifyNorecurse string = "norecurse"

	// SmbSettingsShareSettingsChangeNotifyNone captures enum value "none"
	SmbSettingsShareSettingsChangeNotifyNone string = "none"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateChangeNotifyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeChangeNotifyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateChangeNotify(formats strfmt.Registry) error {

	if swag.IsZero(m.ChangeNotify) { // not required
		return nil
	}

	// value enum
	if err := m.validateChangeNotifyEnum("change_notify", "body", m.ChangeNotify); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeCreatePermissionsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default acl","inherit mode bits","use create mask and mode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeCreatePermissionsPropEnum = append(smbSettingsShareSettingsTypeCreatePermissionsPropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsCreatePermissionsDefaultACL captures enum value "default acl"
	SmbSettingsShareSettingsCreatePermissionsDefaultACL string = "default acl"

	// SmbSettingsShareSettingsCreatePermissionsInheritModeBits captures enum value "inherit mode bits"
	SmbSettingsShareSettingsCreatePermissionsInheritModeBits string = "inherit mode bits"

	// SmbSettingsShareSettingsCreatePermissionsUseCreateMaskAndMode captures enum value "use create mask and mode"
	SmbSettingsShareSettingsCreatePermissionsUseCreateMaskAndMode string = "use create mask and mode"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateCreatePermissionsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeCreatePermissionsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateCreatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatePermissions) { // not required
		return nil
	}

	// value enum
	if err := m.validateCreatePermissionsEnum("create_permissions", "body", m.CreatePermissions); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeCscPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["manual","documents","programs","none"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeCscPolicyPropEnum = append(smbSettingsShareSettingsTypeCscPolicyPropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsCscPolicyManual captures enum value "manual"
	SmbSettingsShareSettingsCscPolicyManual string = "manual"

	// SmbSettingsShareSettingsCscPolicyDocuments captures enum value "documents"
	SmbSettingsShareSettingsCscPolicyDocuments string = "documents"

	// SmbSettingsShareSettingsCscPolicyPrograms captures enum value "programs"
	SmbSettingsShareSettingsCscPolicyPrograms string = "programs"

	// SmbSettingsShareSettingsCscPolicyNone captures enum value "none"
	SmbSettingsShareSettingsCscPolicyNone string = "none"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateCscPolicyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeCscPolicyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateCscPolicy(formats strfmt.Registry) error {

	if swag.IsZero(m.CscPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateCscPolicyEnum("csc_policy", "body", m.CscPolicy); err != nil {
		return err
	}

	return nil
}

func (m *SmbSettingsShareSettings) validateDirectoryCreateMask(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectoryCreateMask) { // not required
		return nil
	}

	if err := validate.MinimumInt("directory_create_mask", "body", int64(*m.DirectoryCreateMask), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("directory_create_mask", "body", int64(*m.DirectoryCreateMask), 511, false); err != nil {
		return err
	}

	return nil
}

func (m *SmbSettingsShareSettings) validateDirectoryCreateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectoryCreateMode) { // not required
		return nil
	}

	if err := validate.MinimumInt("directory_create_mode", "body", int64(*m.DirectoryCreateMode), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("directory_create_mode", "body", int64(*m.DirectoryCreateMode), 511, false); err != nil {
		return err
	}

	return nil
}

func (m *SmbSettingsShareSettings) validateFileCreateMask(formats strfmt.Registry) error {

	if swag.IsZero(m.FileCreateMask) { // not required
		return nil
	}

	if err := validate.MinimumInt("file_create_mask", "body", int64(*m.FileCreateMask), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("file_create_mask", "body", int64(*m.FileCreateMask), 511, false); err != nil {
		return err
	}

	return nil
}

func (m *SmbSettingsShareSettings) validateFileCreateMode(formats strfmt.Registry) error {

	if swag.IsZero(m.FileCreateMode) { // not required
		return nil
	}

	if err := validate.MinimumInt("file_create_mode", "body", int64(*m.FileCreateMode), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("file_create_mode", "body", int64(*m.FileCreateMode), 511, false); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeFileFilterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["deny","allow"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeFileFilterTypePropEnum = append(smbSettingsShareSettingsTypeFileFilterTypePropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsFileFilterTypeDeny captures enum value "deny"
	SmbSettingsShareSettingsFileFilterTypeDeny string = "deny"

	// SmbSettingsShareSettingsFileFilterTypeAllow captures enum value "allow"
	SmbSettingsShareSettingsFileFilterTypeAllow string = "allow"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateFileFilterTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeFileFilterTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateFileFilterType(formats strfmt.Registry) error {

	if swag.IsZero(m.FileFilterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileFilterTypeEnum("file_filter_type", "body", m.FileFilterType); err != nil {
		return err
	}

	return nil
}

var smbSettingsShareSettingsTypeImpersonateGuestPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","bad user","never"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbSettingsShareSettingsTypeImpersonateGuestPropEnum = append(smbSettingsShareSettingsTypeImpersonateGuestPropEnum, v)
	}
}

const (

	// SmbSettingsShareSettingsImpersonateGuestAlways captures enum value "always"
	SmbSettingsShareSettingsImpersonateGuestAlways string = "always"

	// SmbSettingsShareSettingsImpersonateGuestBadUser captures enum value "bad user"
	SmbSettingsShareSettingsImpersonateGuestBadUser string = "bad user"

	// SmbSettingsShareSettingsImpersonateGuestNever captures enum value "never"
	SmbSettingsShareSettingsImpersonateGuestNever string = "never"
)

// prop value enum
func (m *SmbSettingsShareSettings) validateImpersonateGuestEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbSettingsShareSettingsTypeImpersonateGuestPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbSettingsShareSettings) validateImpersonateGuest(formats strfmt.Registry) error {

	if swag.IsZero(m.ImpersonateGuest) { // not required
		return nil
	}

	// value enum
	if err := m.validateImpersonateGuestEnum("impersonate_guest", "body", m.ImpersonateGuest); err != nil {
		return err
	}

	return nil
}

func (m *SmbSettingsShareSettings) validateMangleByteStart(formats strfmt.Registry) error {

	if swag.IsZero(m.MangleByteStart) { // not required
		return nil
	}

	if err := validate.MinimumInt("mangle_byte_start", "body", int64(m.MangleByteStart), 256, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("mangle_byte_start", "body", int64(m.MangleByteStart), 65535, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbSettingsShareSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbSettingsShareSettings) UnmarshalBinary(b []byte) error {
	var res SmbSettingsShareSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
