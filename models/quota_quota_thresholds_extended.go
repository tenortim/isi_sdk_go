// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// QuotaQuotaThresholdsExtended quota quota thresholds extended
// swagger:model QuotaQuotaThresholdsExtended
type QuotaQuotaThresholdsExtended struct {
	QuotaQuotaThresholds

	// True if the advisory threshold has been hit.
	AdvisoryExceeded bool `json:"advisory_exceeded,omitempty"`

	// Time at which advisory threshold was hit.
	AdvisoryLastExceeded int64 `json:"advisory_last_exceeded,omitempty"`

	// True if the hard threshold has been hit.
	HardExceeded bool `json:"hard_exceeded,omitempty"`

	// Time at which hard threshold was hit.
	HardLastExceeded int64 `json:"hard_last_exceeded,omitempty"`

	// True if the soft threshold has been hit.
	SoftExceeded bool `json:"soft_exceeded,omitempty"`

	// Time at which soft threshold was hit
	SoftLastExceeded int64 `json:"soft_last_exceeded,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *QuotaQuotaThresholdsExtended) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 QuotaQuotaThresholds
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.QuotaQuotaThresholds = aO0

	// AO1
	var dataAO1 struct {
		AdvisoryExceeded bool `json:"advisory_exceeded,omitempty"`

		AdvisoryLastExceeded int64 `json:"advisory_last_exceeded,omitempty"`

		HardExceeded bool `json:"hard_exceeded,omitempty"`

		HardLastExceeded int64 `json:"hard_last_exceeded,omitempty"`

		SoftExceeded bool `json:"soft_exceeded,omitempty"`

		SoftLastExceeded int64 `json:"soft_last_exceeded,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.AdvisoryExceeded = dataAO1.AdvisoryExceeded

	m.AdvisoryLastExceeded = dataAO1.AdvisoryLastExceeded

	m.HardExceeded = dataAO1.HardExceeded

	m.HardLastExceeded = dataAO1.HardLastExceeded

	m.SoftExceeded = dataAO1.SoftExceeded

	m.SoftLastExceeded = dataAO1.SoftLastExceeded

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m QuotaQuotaThresholdsExtended) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.QuotaQuotaThresholds)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	var dataAO1 struct {
		AdvisoryExceeded bool `json:"advisory_exceeded,omitempty"`

		AdvisoryLastExceeded int64 `json:"advisory_last_exceeded,omitempty"`

		HardExceeded bool `json:"hard_exceeded,omitempty"`

		HardLastExceeded int64 `json:"hard_last_exceeded,omitempty"`

		SoftExceeded bool `json:"soft_exceeded,omitempty"`

		SoftLastExceeded int64 `json:"soft_last_exceeded,omitempty"`
	}

	dataAO1.AdvisoryExceeded = m.AdvisoryExceeded

	dataAO1.AdvisoryLastExceeded = m.AdvisoryLastExceeded

	dataAO1.HardExceeded = m.HardExceeded

	dataAO1.HardLastExceeded = m.HardLastExceeded

	dataAO1.SoftExceeded = m.SoftExceeded

	dataAO1.SoftLastExceeded = m.SoftLastExceeded

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)

	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this quota quota thresholds extended
func (m *QuotaQuotaThresholdsExtended) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with QuotaQuotaThresholds
	if err := m.QuotaQuotaThresholds.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *QuotaQuotaThresholdsExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaQuotaThresholdsExtended) UnmarshalBinary(b []byte) error {
	var res QuotaQuotaThresholdsExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
