// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ChangelistLins changelist lins
// swagger:model ChangelistLins
type ChangelistLins struct {

	// atime
	Atime *ChangelistLinsCtime `json:"atime,omitempty"`

	// ctime
	Ctime *ChangelistLinsCtime `json:"ctime,omitempty"`

	// The LIN number of the file associated with the entry.
	// Required: true
	ID *string `json:"id"`

	// mtime
	Mtime *ChangelistLinsCtime `json:"mtime,omitempty"`

	// The path to the file associated with the entry.
	// Required: true
	Path *string `json:"path"`

	// The size of the file associated with the entry.
	// Required: true
	Size *int64 `json:"size"`

	// Type of file.
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this changelist lins
func (m *ChangelistLins) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAtime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCtime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMtime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ChangelistLins) validateAtime(formats strfmt.Registry) error {

	if swag.IsZero(m.Atime) { // not required
		return nil
	}

	if m.Atime != nil {
		if err := m.Atime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("atime")
			}
			return err
		}
	}

	return nil
}

func (m *ChangelistLins) validateCtime(formats strfmt.Registry) error {

	if swag.IsZero(m.Ctime) { // not required
		return nil
	}

	if m.Ctime != nil {
		if err := m.Ctime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ctime")
			}
			return err
		}
	}

	return nil
}

func (m *ChangelistLins) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ChangelistLins) validateMtime(formats strfmt.Registry) error {

	if swag.IsZero(m.Mtime) { // not required
		return nil
	}

	if m.Mtime != nil {
		if err := m.Mtime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mtime")
			}
			return err
		}
	}

	return nil
}

func (m *ChangelistLins) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *ChangelistLins) validateSize(formats strfmt.Registry) error {

	if err := validate.Required("size", "body", m.Size); err != nil {
		return err
	}

	return nil
}

func (m *ChangelistLins) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ChangelistLins) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ChangelistLins) UnmarshalBinary(b []byte) error {
	var res ChangelistLins
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
