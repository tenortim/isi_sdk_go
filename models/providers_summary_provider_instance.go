// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProvidersSummaryProviderInstance providers summary provider instance
// swagger:model ProvidersSummaryProviderInstance
type ProvidersSummaryProviderInstance struct {

	// Specifies the server through which the provider serves authentication requests. Null if no server is set or is not applicable for that provider.
	ActiveServer string `json:"active_server,omitempty"`

	// The Nodes Site.
	ClientSite string `json:"client_site,omitempty"`

	// connections
	Connections []*ProvidersSummaryProviderInstanceConnection `json:"connections"`

	// The DC Site.
	DcSite string `json:"dc_site,omitempty"`

	// Specifies the Active Directory forest. Null if not applicable.
	Forest string `json:"forest,omitempty"`

	// The groupnet the provider is in.
	Groupnet string `json:"groupnet,omitempty"`

	// Specifies the ID of the provider.
	ID string `json:"id,omitempty"`

	// Specifies the name of the provider.
	Name string `json:"name,omitempty"`

	// Indicates the status of the provider.
	// Enum: [offline active online initializing joining disabled]
	Status string `json:"status,omitempty"`

	// Specifies the type of provider.
	// Enum: [file ldap local nis ads krb5 unknown]
	Type string `json:"type,omitempty"`
}

// Validate validates this providers summary provider instance
func (m *ProvidersSummaryProviderInstance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnections(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProvidersSummaryProviderInstance) validateConnections(formats strfmt.Registry) error {

	if swag.IsZero(m.Connections) { // not required
		return nil
	}

	for i := 0; i < len(m.Connections); i++ {
		if swag.IsZero(m.Connections[i]) { // not required
			continue
		}

		if m.Connections[i] != nil {
			if err := m.Connections[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("connections" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var providersSummaryProviderInstanceTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["offline","active","online","initializing","joining","disabled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersSummaryProviderInstanceTypeStatusPropEnum = append(providersSummaryProviderInstanceTypeStatusPropEnum, v)
	}
}

const (

	// ProvidersSummaryProviderInstanceStatusOffline captures enum value "offline"
	ProvidersSummaryProviderInstanceStatusOffline string = "offline"

	// ProvidersSummaryProviderInstanceStatusActive captures enum value "active"
	ProvidersSummaryProviderInstanceStatusActive string = "active"

	// ProvidersSummaryProviderInstanceStatusOnline captures enum value "online"
	ProvidersSummaryProviderInstanceStatusOnline string = "online"

	// ProvidersSummaryProviderInstanceStatusInitializing captures enum value "initializing"
	ProvidersSummaryProviderInstanceStatusInitializing string = "initializing"

	// ProvidersSummaryProviderInstanceStatusJoining captures enum value "joining"
	ProvidersSummaryProviderInstanceStatusJoining string = "joining"

	// ProvidersSummaryProviderInstanceStatusDisabled captures enum value "disabled"
	ProvidersSummaryProviderInstanceStatusDisabled string = "disabled"
)

// prop value enum
func (m *ProvidersSummaryProviderInstance) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersSummaryProviderInstanceTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersSummaryProviderInstance) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

var providersSummaryProviderInstanceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["file","ldap","local","nis","ads","krb5","unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		providersSummaryProviderInstanceTypeTypePropEnum = append(providersSummaryProviderInstanceTypeTypePropEnum, v)
	}
}

const (

	// ProvidersSummaryProviderInstanceTypeFile captures enum value "file"
	ProvidersSummaryProviderInstanceTypeFile string = "file"

	// ProvidersSummaryProviderInstanceTypeLdap captures enum value "ldap"
	ProvidersSummaryProviderInstanceTypeLdap string = "ldap"

	// ProvidersSummaryProviderInstanceTypeLocal captures enum value "local"
	ProvidersSummaryProviderInstanceTypeLocal string = "local"

	// ProvidersSummaryProviderInstanceTypeNis captures enum value "nis"
	ProvidersSummaryProviderInstanceTypeNis string = "nis"

	// ProvidersSummaryProviderInstanceTypeAds captures enum value "ads"
	ProvidersSummaryProviderInstanceTypeAds string = "ads"

	// ProvidersSummaryProviderInstanceTypeKrb5 captures enum value "krb5"
	ProvidersSummaryProviderInstanceTypeKrb5 string = "krb5"

	// ProvidersSummaryProviderInstanceTypeUnknown captures enum value "unknown"
	ProvidersSummaryProviderInstanceTypeUnknown string = "unknown"
)

// prop value enum
func (m *ProvidersSummaryProviderInstance) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, providersSummaryProviderInstanceTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ProvidersSummaryProviderInstance) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProvidersSummaryProviderInstance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProvidersSummaryProviderInstance) UnmarshalBinary(b []byte) error {
	var res ProvidersSummaryProviderInstance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
