// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ClusterFirmwareUpgradeItem The settings necessary to start a firmware upgrade.
// swagger:model ClusterFirmwareUpgradeItem
type ClusterFirmwareUpgradeItem struct {

	// Exclude the specified devices in the firmware upgrade.
	ExcludeDevice string `json:"exclude_device,omitempty"`

	// Include the specified device type in the firmware upgrade.
	ExcludeType string `json:"exclude_type,omitempty"`

	// Include the specified devices in the firmware upgrade.
	IncludeDevice string `json:"include_device,omitempty"`

	// Include the specified device type in the firmware upgrade.
	IncludeType string `json:"include_type,omitempty"`

	// Do not burn the firmware.
	NoBurn bool `json:"no_burn,omitempty"`

	// Do not reboot the node after an upgrade
	NoReboot bool `json:"no_reboot,omitempty"`

	// Do not verify the firmware upgrade after an upgrade.
	NoVerify bool `json:"no_verify,omitempty"`

	// The nodes scheduled for upgrade. Order in array determines queue position number. 'All' and null option will upgrade all nodes in <lnn> order.
	NodesToUpgrade []int64 `json:"nodes_to_upgrade"`
}

// Validate validates this cluster firmware upgrade item
func (m *ClusterFirmwareUpgradeItem) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterFirmwareUpgradeItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterFirmwareUpgradeItem) UnmarshalBinary(b []byte) error {
	var res ClusterFirmwareUpgradeItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
