// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StatisticsKeyPolicy statistics key policy
// swagger:model StatisticsKeyPolicy
type StatisticsKeyPolicy struct {

	// Time between samples in seconds.
	// Required: true
	Interval *int64 `json:"interval"`

	// If true, history is persisted.
	// Required: true
	Persistent *bool `json:"persistent"`

	// Time in seconds to keep data.
	// Required: true
	Retention *int64 `json:"retention"`
}

// Validate validates this statistics key policy
func (m *StatisticsKeyPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInterval(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersistent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StatisticsKeyPolicy) validateInterval(formats strfmt.Registry) error {

	if err := validate.Required("interval", "body", m.Interval); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKeyPolicy) validatePersistent(formats strfmt.Registry) error {

	if err := validate.Required("persistent", "body", m.Persistent); err != nil {
		return err
	}

	return nil
}

func (m *StatisticsKeyPolicy) validateRetention(formats strfmt.Registry) error {

	if err := validate.Required("retention", "body", m.Retention); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StatisticsKeyPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StatisticsKeyPolicy) UnmarshalBinary(b []byte) error {
	var res StatisticsKeyPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
