// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsExport Specifies configuration values for NFS exports.
// swagger:model NfsExport
type NfsExport struct {

	// True if all directories under the specified paths are mountable.
	AllDirs bool `json:"all_dirs,omitempty"`

	// Specifies the block size returned by the NFS statfs procedure.
	BlockSize int64 `json:"block_size,omitempty"`

	// True if the client can set file times through the NFS set attribute request. This parameter does not affect server behavior, but is included to accommoate legacy client requirements.
	CanSetTime bool `json:"can_set_time,omitempty"`

	// True if the case is ignored for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	CaseInsensitive bool `json:"case_insensitive,omitempty"`

	// True if the case is preserved for file names. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	CasePreserving bool `json:"case_preserving,omitempty"`

	// True if the superuser can change file ownership. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	ChownRestricted bool `json:"chown_restricted,omitempty"`

	// Specifies the clients with root access to the export.
	Clients []string `json:"clients"`

	// True if NFS  commit  requests execute asynchronously.
	CommitAsynchronous bool `json:"commit_asynchronous,omitempty"`

	// Specifies the user-defined string that is used to identify the export.
	Description string `json:"description,omitempty"`

	// Specifies the preferred size for directory read operations. This value is used to advise the client of optimal settings for the server, but is not enforced.
	DirectoryTransferSize int64 `json:"directory_transfer_size,omitempty"`

	// Specifies the default character set encoding of the clients connecting to the export, unless otherwise specified.
	Encoding string `json:"encoding,omitempty"`

	// Specifies the reported maximum number of links to a file. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	LinkMax int64 `json:"link_max,omitempty"`

	// User and group mapping.
	MapAll *NfsExportMapAll `json:"map_all,omitempty"`

	// User and group mapping.
	MapFailure *NfsExportMapAll `json:"map_failure,omitempty"`

	// True if user mappings query the OneFS user database. When set to false, user mappings only query local authentication.
	MapFull bool `json:"map_full,omitempty"`

	// True if incoming user IDs (UIDs) are mapped to users in the OneFS user database. When set to false, incoming UIDs are applied directly to file operations.
	MapLookupUID bool `json:"map_lookup_uid,omitempty"`

	// User and group mapping.
	MapNonRoot *NfsExportMapAll `json:"map_non_root,omitempty"`

	// Determines whether searches for users specified in 'map_all', 'map_root' or 'map_nonroot' are retried if the search fails.
	MapRetry bool `json:"map_retry,omitempty"`

	// User and group mapping.
	MapRoot *NfsExportMapAll `json:"map_root,omitempty"`

	// Specifies the maximum file size for any file accessed from the export. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	MaxFileSize int64 `json:"max_file_size,omitempty"`

	// Specifies the reported maximum length of a file name. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	NameMaxSize int64 `json:"name_max_size,omitempty"`

	// True if long file names result in an error. This parameter does not affect server behavior, but is included to accommodate legacy client requirements.
	NoTruncate bool `json:"no_truncate,omitempty"`

	// Specifies the paths under /ifs that are exported.
	Paths []string `json:"paths"`

	// True if the export is set to read-only.
	ReadOnly bool `json:"read_only,omitempty"`

	// Specifies the clients with read-only access to the export.
	ReadOnlyClients []string `json:"read_only_clients"`

	// Specifies the maximum buffer size that clients should use on NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	ReadTransferMaxSize int64 `json:"read_transfer_max_size,omitempty"`

	// Specifies the preferred multiple size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	ReadTransferMultiple int64 `json:"read_transfer_multiple,omitempty"`

	// Specifies the preferred size for NFS read requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	ReadTransferSize int64 `json:"read_transfer_size,omitempty"`

	// Specifies the clients with both read and write access to the export, even when the export is set to read-only.
	ReadWriteClients []string `json:"read_write_clients"`

	// True if 'readdirplus' requests are enabled. Enabling this property might improve network performance and is only available for NFSv3.
	Readdirplus bool `json:"readdirplus,omitempty"`

	// Sets the number of directory entries that are prefetched when a 'readdirplus' request is processed. (Deprecated.)
	ReaddirplusPrefetch int64 `json:"readdirplus_prefetch,omitempty"`

	// Limits the size of file identifiers returned by NFSv3+ to 32-bit values.
	Return32bitFileIds bool `json:"return_32bit_file_ids,omitempty"`

	// Clients that have root access to the export.
	RootClients []string `json:"root_clients"`

	// Specifies the authentication types that are supported for this export.
	SecurityFlavors []string `json:"security_flavors"`

	// True if set attribute operations execute asynchronously.
	SetattrAsynchronous bool `json:"setattr_asynchronous,omitempty"`

	// Specifies the snapshot for all mounts.
	Snapshot string `json:"snapshot,omitempty"`

	// True if symlinks are supported. This value is used to advise the client of optimal settings for the server, but is not enforced.
	Symlinks bool `json:"symlinks,omitempty"`

	// Specifies the resolution of all time values that are returned to the clients
	TimeDelta float64 `json:"time_delta,omitempty"`

	// Specifies the synchronization type.
	WriteDatasyncAction string `json:"write_datasync_action,omitempty"`

	// Specifies the synchronization type.
	WriteDatasyncReply string `json:"write_datasync_reply,omitempty"`

	// Specifies the synchronization type.
	WriteFilesyncAction string `json:"write_filesync_action,omitempty"`

	// Specifies the synchronization type.
	WriteFilesyncReply string `json:"write_filesync_reply,omitempty"`

	// Specifies the maximum buffer size that clients should use on NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	WriteTransferMaxSize int64 `json:"write_transfer_max_size,omitempty"`

	// Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	WriteTransferMultiple int64 `json:"write_transfer_multiple,omitempty"`

	// Specifies the preferred multiple size for NFS write requests. This value is used to advise the client of optimal settings for the server, but is not enforced.
	WriteTransferSize int64 `json:"write_transfer_size,omitempty"`

	// Specifies the synchronization type.
	WriteUnstableAction string `json:"write_unstable_action,omitempty"`

	// Specifies the synchronization type.
	WriteUnstableReply string `json:"write_unstable_reply,omitempty"`

	// Specifies the zone in which the export is valid.
	Zone string `json:"zone,omitempty"`
}

// Validate validates this nfs export
func (m *NfsExport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMapAll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapFailure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapNonRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMapRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityFlavors(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsExport) validateMapAll(formats strfmt.Registry) error {

	if swag.IsZero(m.MapAll) { // not required
		return nil
	}

	if m.MapAll != nil {
		if err := m.MapAll.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map_all")
			}
			return err
		}
	}

	return nil
}

func (m *NfsExport) validateMapFailure(formats strfmt.Registry) error {

	if swag.IsZero(m.MapFailure) { // not required
		return nil
	}

	if m.MapFailure != nil {
		if err := m.MapFailure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map_failure")
			}
			return err
		}
	}

	return nil
}

func (m *NfsExport) validateMapNonRoot(formats strfmt.Registry) error {

	if swag.IsZero(m.MapNonRoot) { // not required
		return nil
	}

	if m.MapNonRoot != nil {
		if err := m.MapNonRoot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map_non_root")
			}
			return err
		}
	}

	return nil
}

func (m *NfsExport) validateMapRoot(formats strfmt.Registry) error {

	if swag.IsZero(m.MapRoot) { // not required
		return nil
	}

	if m.MapRoot != nil {
		if err := m.MapRoot.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("map_root")
			}
			return err
		}
	}

	return nil
}

var nfsExportSecurityFlavorsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["unix","krb5","krb5i","krb5p"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nfsExportSecurityFlavorsItemsEnum = append(nfsExportSecurityFlavorsItemsEnum, v)
	}
}

func (m *NfsExport) validateSecurityFlavorsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nfsExportSecurityFlavorsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *NfsExport) validateSecurityFlavors(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityFlavors) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityFlavors); i++ {

		// value enum
		if err := m.validateSecurityFlavorsItemsEnum("security_flavors"+"."+strconv.Itoa(i), "body", m.SecurityFlavors[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsExport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsExport) UnmarshalBinary(b []byte) error {
	var res NfsExport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
