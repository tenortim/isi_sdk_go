// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodeStatusNodePowersupplies node status node powersupplies
// swagger:model NodeStatusNodePowersupplies
type NodeStatusNodePowersupplies struct {

	// Count of how many power supplies are supported.
	Count int64 `json:"count,omitempty"`

	// Count of how many power supplies have failed.
	Failures int64 `json:"failures,omitempty"`

	// Does this node have a CFF power supply.
	HasCff bool `json:"has_cff,omitempty"`

	// A descriptive status string for this node's power supplies.
	Status string `json:"status,omitempty"`

	// List of this node's power supplies.
	Supplies []*NodeStatusNodePowersuppliesSupply `json:"supplies"`

	// Does this node support CFF power supplies.
	SupportsCff bool `json:"supports_cff,omitempty"`
}

// Validate validates this node status node powersupplies
func (m *NodeStatusNodePowersupplies) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSupplies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeStatusNodePowersupplies) validateSupplies(formats strfmt.Registry) error {

	if swag.IsZero(m.Supplies) { // not required
		return nil
	}

	for i := 0; i < len(m.Supplies); i++ {
		if swag.IsZero(m.Supplies[i]) { // not required
			continue
		}

		if m.Supplies[i] != nil {
			if err := m.Supplies[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supplies" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeStatusNodePowersupplies) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeStatusNodePowersupplies) UnmarshalBinary(b []byte) error {
	var res NodeStatusNodePowersupplies
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
