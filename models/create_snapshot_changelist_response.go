// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateSnapshotChangelistResponse create snapshot changelist response
// swagger:model CreateSnapshotChangelistResponse
type CreateSnapshotChangelistResponse struct {

	// The ID of the job which created the changelist.
	// Required: true
	JobID *int64 `json:"job_id"`

	// Number of LIN entries in changelist.
	NumEntries int64 `json:"num_entries,omitempty"`

	// Root path of all LINs in changelist.
	// Required: true
	RootPath *string `json:"root_path"`

	// The lower snapid used to compute the changelist.
	// Required: true
	Snap1 *int64 `json:"snap1"`

	// The higher snapid used to compute the changelist.
	// Required: true
	Snap2 *int64 `json:"snap2"`

	// Status of changelist.
	// Required: true
	Status *string `json:"status"`
}

// Validate validates this create snapshot changelist response
func (m *CreateSnapshotChangelistResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJobID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootPath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnap1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnap2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateSnapshotChangelistResponse) validateJobID(formats strfmt.Registry) error {

	if err := validate.Required("job_id", "body", m.JobID); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotChangelistResponse) validateRootPath(formats strfmt.Registry) error {

	if err := validate.Required("root_path", "body", m.RootPath); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotChangelistResponse) validateSnap1(formats strfmt.Registry) error {

	if err := validate.Required("snap1", "body", m.Snap1); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotChangelistResponse) validateSnap2(formats strfmt.Registry) error {

	if err := validate.Required("snap2", "body", m.Snap2); err != nil {
		return err
	}

	return nil
}

func (m *CreateSnapshotChangelistResponse) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateSnapshotChangelistResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateSnapshotChangelistResponse) UnmarshalBinary(b []byte) error {
	var res CreateSnapshotChangelistResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
