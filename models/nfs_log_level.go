// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsLogLevel nfs log level
// swagger:model NfsLogLevel
type NfsLogLevel struct {

	// Valid NFS logging levels
	// Enum: [always error warning info verbose debug trace]
	Level string `json:"level,omitempty"`
}

// Validate validates this nfs log level
func (m *NfsLogLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nfsLogLevelTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","error","warning","info","verbose","debug","trace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nfsLogLevelTypeLevelPropEnum = append(nfsLogLevelTypeLevelPropEnum, v)
	}
}

const (

	// NfsLogLevelLevelAlways captures enum value "always"
	NfsLogLevelLevelAlways string = "always"

	// NfsLogLevelLevelError captures enum value "error"
	NfsLogLevelLevelError string = "error"

	// NfsLogLevelLevelWarning captures enum value "warning"
	NfsLogLevelLevelWarning string = "warning"

	// NfsLogLevelLevelInfo captures enum value "info"
	NfsLogLevelLevelInfo string = "info"

	// NfsLogLevelLevelVerbose captures enum value "verbose"
	NfsLogLevelLevelVerbose string = "verbose"

	// NfsLogLevelLevelDebug captures enum value "debug"
	NfsLogLevelLevelDebug string = "debug"

	// NfsLogLevelLevelTrace captures enum value "trace"
	NfsLogLevelLevelTrace string = "trace"
)

// prop value enum
func (m *NfsLogLevel) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nfsLogLevelTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NfsLogLevel) validateLevel(formats strfmt.Registry) error {

	if swag.IsZero(m.Level) { // not required
		return nil
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", m.Level); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsLogLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsLogLevel) UnmarshalBinary(b []byte) error {
	var res NfsLogLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
