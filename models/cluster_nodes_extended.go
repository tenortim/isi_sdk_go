// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterNodesExtended The node details useful during an upgrade or assessment.
// swagger:model ClusterNodesExtended
type ClusterNodesExtended struct {

	// The current OneFS version before upgrade.
	Error *ClusterNodesError `json:"error,omitempty"`

	// The last action performed to completion/failure on this node.  Null if the node_state is 'committed' or 'assessing.' One of the following values: 'upgrade', 'rollback'.
	LastAction string `json:"last_action,omitempty"`

	// Did the node pass upgrade or rollback without failing? Null if the node_state is 'committed.' One of the following values: 'pass', 'fail', null
	LastActionResult string `json:"last_action_result,omitempty"`

	// The lnn of the node.
	Lnn int64 `json:"lnn,omitempty"`

	// The state of the node during the upgrade, rollback, or assessment. One of the following values: 'committed', 'upgraded', 'upgrading', 'rolling back', 'assessing', 'error'
	NodeState string `json:"node_state,omitempty"`

	// The current OneFS version before upgrade.
	OnefsVersion *ClusterNodesOnefsVersion `json:"onefs_version,omitempty"`

	// What step is the upgrade, assessment, or rollback in? To show via progress indicator. NOTE: the value is an integer between 0 and 100 (percent)
	Progress int64 `json:"progress,omitempty"`
}

// Validate validates this cluster nodes extended
func (m *ClusterNodesExtended) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateError(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnefsVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodesExtended) validateError(formats strfmt.Registry) error {

	if swag.IsZero(m.Error) { // not required
		return nil
	}

	if m.Error != nil {
		if err := m.Error.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("error")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodesExtended) validateOnefsVersion(formats strfmt.Registry) error {

	if swag.IsZero(m.OnefsVersion) { // not required
		return nil
	}

	if m.OnefsVersion != nil {
		if err := m.OnefsVersion.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onefs_version")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodesExtended) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodesExtended) UnmarshalBinary(b []byte) error {
	var res ClusterNodesExtended
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
