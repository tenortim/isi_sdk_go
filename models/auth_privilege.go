// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AuthPrivilege auth privilege
// swagger:model AuthPrivilege
type AuthPrivilege struct {

	// Specifies the general categorization of the privilege.
	// Required: true
	Category *string `json:"category"`

	// Specifies a short description of the privilege.
	// Required: true
	Description *string `json:"description"`

	// Specifies the ID of the privilege.
	// Required: true
	ID *string `json:"id"`

	// Specifies the name of the privilege.
	Name string `json:"name,omitempty"`

	// True, if the privilege is read-write.
	ReadWrite bool `json:"read_write,omitempty"`
}

// Validate validates this auth privilege
func (m *AuthPrivilege) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AuthPrivilege) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	return nil
}

func (m *AuthPrivilege) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *AuthPrivilege) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AuthPrivilege) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AuthPrivilege) UnmarshalBinary(b []byte) error {
	var res AuthPrivilege
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
