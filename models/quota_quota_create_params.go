// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QuotaQuotaCreateParams quota quota create params
// swagger:model QuotaQuotaCreateParams
type QuotaQuotaCreateParams struct {

	// If true, SMB shares using the quota directory see the quota thresholds as share size.
	Container bool `json:"container,omitempty"`

	// True if the quota provides enforcement, otherwise a accounting quota.
	// Required: true
	Enforced *bool `json:"enforced"`

	// Force creation of quotas on the root of /ifs.
	Force bool `json:"force,omitempty"`

	// If true, quota governs snapshot data as well as head data.
	// Required: true
	IncludeSnapshots *bool `json:"include_snapshots"`

	// The /ifs path governed.
	// Required: true
	Path *string `json:"path"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	Persona *GroupMember `json:"persona,omitempty"`

	// thresholds
	Thresholds *QuotaQuotaThresholds `json:"thresholds,omitempty"`

	// If true, thresholds apply to data plus filesystem overhead required to store the data (i.e. 'physical' usage).
	// Required: true
	ThresholdsIncludeOverhead *bool `json:"thresholds_include_overhead"`

	// The type of quota.
	// Required: true
	// Enum: [directory user group default-user default-group]
	Type *string `json:"type"`
}

// Validate validates this quota quota create params
func (m *QuotaQuotaCreateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnforced(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncludeSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePersona(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateThresholdsIncludeOverhead(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuotaQuotaCreateParams) validateEnforced(formats strfmt.Registry) error {

	if err := validate.Required("enforced", "body", m.Enforced); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaCreateParams) validateIncludeSnapshots(formats strfmt.Registry) error {

	if err := validate.Required("include_snapshots", "body", m.IncludeSnapshots); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaCreateParams) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *QuotaQuotaCreateParams) validatePersona(formats strfmt.Registry) error {

	if swag.IsZero(m.Persona) { // not required
		return nil
	}

	if m.Persona != nil {
		if err := m.Persona.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("persona")
			}
			return err
		}
	}

	return nil
}

func (m *QuotaQuotaCreateParams) validateThresholds(formats strfmt.Registry) error {

	if swag.IsZero(m.Thresholds) { // not required
		return nil
	}

	if m.Thresholds != nil {
		if err := m.Thresholds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("thresholds")
			}
			return err
		}
	}

	return nil
}

func (m *QuotaQuotaCreateParams) validateThresholdsIncludeOverhead(formats strfmt.Registry) error {

	if err := validate.Required("thresholds_include_overhead", "body", m.ThresholdsIncludeOverhead); err != nil {
		return err
	}

	return nil
}

var quotaQuotaCreateParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["directory","user","group","default-user","default-group"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		quotaQuotaCreateParamsTypeTypePropEnum = append(quotaQuotaCreateParamsTypeTypePropEnum, v)
	}
}

const (

	// QuotaQuotaCreateParamsTypeDirectory captures enum value "directory"
	QuotaQuotaCreateParamsTypeDirectory string = "directory"

	// QuotaQuotaCreateParamsTypeUser captures enum value "user"
	QuotaQuotaCreateParamsTypeUser string = "user"

	// QuotaQuotaCreateParamsTypeGroup captures enum value "group"
	QuotaQuotaCreateParamsTypeGroup string = "group"

	// QuotaQuotaCreateParamsTypeDefaultUser captures enum value "default-user"
	QuotaQuotaCreateParamsTypeDefaultUser string = "default-user"

	// QuotaQuotaCreateParamsTypeDefaultGroup captures enum value "default-group"
	QuotaQuotaCreateParamsTypeDefaultGroup string = "default-group"
)

// prop value enum
func (m *QuotaQuotaCreateParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, quotaQuotaCreateParamsTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *QuotaQuotaCreateParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuotaQuotaCreateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuotaQuotaCreateParams) UnmarshalBinary(b []byte) error {
	var res QuotaQuotaCreateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
