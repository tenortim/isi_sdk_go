// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SmbLogLevelFilter smb log level filter
// swagger:model SmbLogLevelFilter
type SmbLogLevelFilter struct {

	// Array of client IP addresses to filter against.
	IPAddrs []string `json:"ip_addrs"`

	// Logging level of the filter.
	// Required: true
	// Enum: [always error warning info verbose debug trace]
	Level *string `json:"level"`

	// Array of SMB operations to filter against.
	Ops []string `json:"ops"`
}

// Validate validates this smb log level filter
func (m *SmbLogLevelFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLevel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOps(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var smbLogLevelFilterTypeLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["always","error","warning","info","verbose","debug","trace"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbLogLevelFilterTypeLevelPropEnum = append(smbLogLevelFilterTypeLevelPropEnum, v)
	}
}

const (

	// SmbLogLevelFilterLevelAlways captures enum value "always"
	SmbLogLevelFilterLevelAlways string = "always"

	// SmbLogLevelFilterLevelError captures enum value "error"
	SmbLogLevelFilterLevelError string = "error"

	// SmbLogLevelFilterLevelWarning captures enum value "warning"
	SmbLogLevelFilterLevelWarning string = "warning"

	// SmbLogLevelFilterLevelInfo captures enum value "info"
	SmbLogLevelFilterLevelInfo string = "info"

	// SmbLogLevelFilterLevelVerbose captures enum value "verbose"
	SmbLogLevelFilterLevelVerbose string = "verbose"

	// SmbLogLevelFilterLevelDebug captures enum value "debug"
	SmbLogLevelFilterLevelDebug string = "debug"

	// SmbLogLevelFilterLevelTrace captures enum value "trace"
	SmbLogLevelFilterLevelTrace string = "trace"
)

// prop value enum
func (m *SmbLogLevelFilter) validateLevelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbLogLevelFilterTypeLevelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbLogLevelFilter) validateLevel(formats strfmt.Registry) error {

	if err := validate.Required("level", "body", m.Level); err != nil {
		return err
	}

	// value enum
	if err := m.validateLevelEnum("level", "body", *m.Level); err != nil {
		return err
	}

	return nil
}

var smbLogLevelFilterOpsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["read","write","session-setup","logoff","flush","notify","tree-connect","tree-disconnect","create","delete","oplock","locking","set-info","query","close","create-directory","delete-directory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		smbLogLevelFilterOpsItemsEnum = append(smbLogLevelFilterOpsItemsEnum, v)
	}
}

func (m *SmbLogLevelFilter) validateOpsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, smbLogLevelFilterOpsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *SmbLogLevelFilter) validateOps(formats strfmt.Registry) error {

	if swag.IsZero(m.Ops) { // not required
		return nil
	}

	for i := 0; i < len(m.Ops); i++ {

		// value enum
		if err := m.validateOpsItemsEnum("ops"+"."+strconv.Itoa(i), "body", m.Ops[i]); err != nil {
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SmbLogLevelFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SmbLogLevelFilter) UnmarshalBinary(b []byte) error {
	var res SmbLogLevelFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
