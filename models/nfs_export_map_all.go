// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NfsExportMapAll nfs export map all
// swagger:model NfsExportMapAll
type NfsExportMapAll struct {

	// True if the user mapping is applied.
	Enabled bool `json:"enabled,omitempty"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	PrimaryGroup *GroupMember `json:"primary_group,omitempty"`

	// Specifies persona properties for the secondary user group. A persona consists of either a type and name, or an ID.
	SecondaryGroups []*NfsExportMapAllSecondaryGroupsItems0 `json:"secondary_groups"`

	// Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
	User *GroupMember `json:"user,omitempty"`
}

// Validate validates this nfs export map all
func (m *NfsExportMapAll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrimaryGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondaryGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NfsExportMapAll) validatePrimaryGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.PrimaryGroup) { // not required
		return nil
	}

	if m.PrimaryGroup != nil {
		if err := m.PrimaryGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primary_group")
			}
			return err
		}
	}

	return nil
}

func (m *NfsExportMapAll) validateSecondaryGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecondaryGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.SecondaryGroups); i++ {
		if swag.IsZero(m.SecondaryGroups[i]) { // not required
			continue
		}

		if m.SecondaryGroups[i] != nil {
			if err := m.SecondaryGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("secondary_groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NfsExportMapAll) validateUser(formats strfmt.Registry) error {

	if swag.IsZero(m.User) { // not required
		return nil
	}

	if m.User != nil {
		if err := m.User.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("user")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsExportMapAll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsExportMapAll) UnmarshalBinary(b []byte) error {
	var res NfsExportMapAll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NfsExportMapAllSecondaryGroupsItems0 Specifies properties for a persona, which consists of either a 'type' and a 'name' or an 'ID'.
// swagger:model NfsExportMapAllSecondaryGroupsItems0
type NfsExportMapAllSecondaryGroupsItems0 struct {

	// Specifies the serialized form of a persona, which can be 'UID:0', 'USER:name', 'GID:0', 'GROUP:wheel', or 'SID:S-1-1'.
	ID string `json:"id,omitempty"`

	// Specifies the persona name, which must be combined with a type.
	Name string `json:"name,omitempty"`

	// Specifies the type of persona, which must be combined with a name.
	// Enum: [user group wellknown]
	Type string `json:"type,omitempty"`
}

// Validate validates this nfs export map all secondary groups items0
func (m *NfsExportMapAllSecondaryGroupsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var nfsExportMapAllSecondaryGroupsItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["user","group","wellknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nfsExportMapAllSecondaryGroupsItems0TypeTypePropEnum = append(nfsExportMapAllSecondaryGroupsItems0TypeTypePropEnum, v)
	}
}

const (

	// NfsExportMapAllSecondaryGroupsItems0TypeUser captures enum value "user"
	NfsExportMapAllSecondaryGroupsItems0TypeUser string = "user"

	// NfsExportMapAllSecondaryGroupsItems0TypeGroup captures enum value "group"
	NfsExportMapAllSecondaryGroupsItems0TypeGroup string = "group"

	// NfsExportMapAllSecondaryGroupsItems0TypeWellknown captures enum value "wellknown"
	NfsExportMapAllSecondaryGroupsItems0TypeWellknown string = "wellknown"
)

// prop value enum
func (m *NfsExportMapAllSecondaryGroupsItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nfsExportMapAllSecondaryGroupsItems0TypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NfsExportMapAllSecondaryGroupsItems0) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NfsExportMapAllSecondaryGroupsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NfsExportMapAllSecondaryGroupsItems0) UnmarshalBinary(b []byte) error {
	var res NfsExportMapAllSecondaryGroupsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
