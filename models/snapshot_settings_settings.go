// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SnapshotSettingsSettings snapshot settings settings
// swagger:model SnapshotSettingsSettings
type SnapshotSettingsSettings struct {

	// True if the scheduled snapshot creation services is on.
	// Required: true
	Autocreate *bool `json:"autocreate"`

	// True if the scheduled snapshot deletion services is on.
	// Required: true
	Autodelete *bool `json:"autodelete"`

	// Global switch for other accessible and visible settings.
	// Required: true
	GlobalVisibleAccessible *bool `json:"global_visible_accessible"`

	// True if root .snapshot directory is accessible locally.
	// Required: true
	LocalRootAccessible *bool `json:"local_root_accessible"`

	// True if root .snapshot directory is visible locally.
	// Required: true
	LocalRootVisible *bool `json:"local_root_visible"`

	// True if sub-directory .snapshot directory is accessible locally.
	// Required: true
	LocalSubdirAccessible *bool `json:"local_subdir_accessible"`

	// True if root .snapshot directory is accessible over NFS.
	// Required: true
	NfsRootAccessible *bool `json:"nfs_root_accessible"`

	// True if root .snapshot directory is visible over NFS.
	// Required: true
	NfsRootVisible *bool `json:"nfs_root_visible"`

	// True if sub-directory .snapshot directory is accessible over NFS.
	// Required: true
	NfsSubdirAccessible *bool `json:"nfs_subdir_accessible"`

	// Percentage of space to reserve for snapshots.
	// Required: true
	Reserve *float64 `json:"reserve"`

	// True if the system allows snapshot creation.
	// Required: true
	Service *bool `json:"service"`

	// True if root .snapshot directory is accessible over SMB.
	// Required: true
	SmbRootAccessible *bool `json:"smb_root_accessible"`

	// True if root .snapshot directory is visible over SMB.
	// Required: true
	SmbRootVisible *bool `json:"smb_root_visible"`

	// True if sub-directory .snapshot directory is accessible over SMB.
	// Required: true
	SmbSubdirAccessible *bool `json:"smb_subdir_accessible"`
}

// Validate validates this snapshot settings settings
func (m *SnapshotSettingsSettings) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAutocreate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAutodelete(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGlobalVisibleAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalRootAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalRootVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalSubdirAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsRootAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsRootVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNfsSubdirAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReserve(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbRootAccessible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbRootVisible(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmbSubdirAccessible(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SnapshotSettingsSettings) validateAutocreate(formats strfmt.Registry) error {

	if err := validate.Required("autocreate", "body", m.Autocreate); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateAutodelete(formats strfmt.Registry) error {

	if err := validate.Required("autodelete", "body", m.Autodelete); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateGlobalVisibleAccessible(formats strfmt.Registry) error {

	if err := validate.Required("global_visible_accessible", "body", m.GlobalVisibleAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateLocalRootAccessible(formats strfmt.Registry) error {

	if err := validate.Required("local_root_accessible", "body", m.LocalRootAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateLocalRootVisible(formats strfmt.Registry) error {

	if err := validate.Required("local_root_visible", "body", m.LocalRootVisible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateLocalSubdirAccessible(formats strfmt.Registry) error {

	if err := validate.Required("local_subdir_accessible", "body", m.LocalSubdirAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateNfsRootAccessible(formats strfmt.Registry) error {

	if err := validate.Required("nfs_root_accessible", "body", m.NfsRootAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateNfsRootVisible(formats strfmt.Registry) error {

	if err := validate.Required("nfs_root_visible", "body", m.NfsRootVisible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateNfsSubdirAccessible(formats strfmt.Registry) error {

	if err := validate.Required("nfs_subdir_accessible", "body", m.NfsSubdirAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateReserve(formats strfmt.Registry) error {

	if err := validate.Required("reserve", "body", m.Reserve); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateService(formats strfmt.Registry) error {

	if err := validate.Required("service", "body", m.Service); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateSmbRootAccessible(formats strfmt.Registry) error {

	if err := validate.Required("smb_root_accessible", "body", m.SmbRootAccessible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateSmbRootVisible(formats strfmt.Registry) error {

	if err := validate.Required("smb_root_visible", "body", m.SmbRootVisible); err != nil {
		return err
	}

	return nil
}

func (m *SnapshotSettingsSettings) validateSmbSubdirAccessible(formats strfmt.Registry) error {

	if err := validate.Required("smb_subdir_accessible", "body", m.SmbSubdirAccessible); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SnapshotSettingsSettings) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SnapshotSettingsSettings) UnmarshalBinary(b []byte) error {
	var res SnapshotSettingsSettings
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
