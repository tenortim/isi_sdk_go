// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// ClusterFirmwareStatusNodeDevice cluster firmware status node device
// swagger:model ClusterFirmwareStatusNodeDevice
type ClusterFirmwareStatusNodeDevice struct {

	// The name of the device.
	Device string `json:"device,omitempty"`

	// Is the firmware up-to-date for this component.
	Mismatch bool `json:"mismatch,omitempty"`

	// The target firmware version.
	TargetVersion string `json:"target_version,omitempty"`

	// The device type.
	Type string `json:"type,omitempty"`

	// The current state of the firmware upgrade for this component. One of the following values: 'queued', 'upgrading', 'upgraded', 'error'. or 'null'.'null' indicates that the upgrade status is unknown.
	UpgradeStatus string `json:"upgrade_status,omitempty"`

	// The current firmware version.
	Version string `json:"version,omitempty"`
}

// Validate validates this cluster firmware status node device
func (m *ClusterFirmwareStatusNodeDevice) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterFirmwareStatusNodeDevice) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterFirmwareStatusNodeDevice) UnmarshalBinary(b []byte) error {
	var res ClusterFirmwareStatusNodeDevice
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
