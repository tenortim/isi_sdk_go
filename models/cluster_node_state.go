// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterNodeState cluster node state
// swagger:model ClusterNodeState
type ClusterNodeState struct {

	// Node readonly state.
	Readonly Empty `json:"readonly,omitempty"`

	// Node service light state.
	Servicelight *ClusterNodeStateServicelight `json:"servicelight,omitempty"`

	// Node smartfail state.
	Smartfail *ClusterNodeStateSmartfail `json:"smartfail,omitempty"`
}

// Validate validates this cluster node state
func (m *ClusterNodeState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateServicelight(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSmartfail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterNodeState) validateServicelight(formats strfmt.Registry) error {

	if swag.IsZero(m.Servicelight) { // not required
		return nil
	}

	if m.Servicelight != nil {
		if err := m.Servicelight.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("servicelight")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterNodeState) validateSmartfail(formats strfmt.Registry) error {

	if swag.IsZero(m.Smartfail) { // not required
		return nil
	}

	if m.Smartfail != nil {
		if err := m.Smartfail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("smartfail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterNodeState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterNodeState) UnmarshalBinary(b []byte) error {
	var res ClusterNodeState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
