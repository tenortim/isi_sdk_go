// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// NodesNodeFirmwareStatus The firmware status for the node.
// swagger:model NodesNodeFirmwareStatus
type NodesNodeFirmwareStatus struct {

	// List of the firmware status for hardware components on the node.
	Devices []*ClusterFirmwareStatusNodeDevice `json:"devices"`

	// Node is unavailable.
	NodeUnavailable bool `json:"node_unavailable,omitempty"`

	// List of the firmware binary information for the installed firmware package.
	Package []*ClusterFirmwareStatusNodePackageItem `json:"package"`
}

// Validate validates this nodes node firmware status
func (m *NodesNodeFirmwareStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePackage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodesNodeFirmwareStatus) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodesNodeFirmwareStatus) validatePackage(formats strfmt.Registry) error {

	if swag.IsZero(m.Package) { // not required
		return nil
	}

	for i := 0; i < len(m.Package); i++ {
		if swag.IsZero(m.Package[i]) { // not required
			continue
		}

		if m.Package[i] != nil {
			if err := m.Package[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("package" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodesNodeFirmwareStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodesNodeFirmwareStatus) UnmarshalBinary(b []byte) error {
	var res NodesNodeFirmwareStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
