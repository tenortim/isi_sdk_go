// Code generated by go-swagger; DO NOT EDIT.

package cloud

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cloud API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cloud API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCloudAccessItem Add a cluster identifier to access list.
*/
func (a *Client) CreateCloudAccessItem(params *CreateCloudAccessItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudAccessItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccessItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccessItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccessItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccessItemOK), nil

}

/*
CreateCloudAccount Create a new account.
*/
func (a *Client) CreateCloudAccount(params *CreateCloudAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudAccount",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudAccountOK), nil

}

/*
CreateCloudJob Create a new job.
*/
func (a *Client) CreateCloudJob(params *CreateCloudJobParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudJob",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudJobOK), nil

}

/*
CreateCloudPool Create a new pool.
*/
func (a *Client) CreateCloudPool(params *CreateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCloudPool",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCloudPoolOK), nil

}

/*
CreateSettingsEncryptionKeyItem Regenerate master encryption key.
*/
func (a *Client) CreateSettingsEncryptionKeyItem(params *CreateSettingsEncryptionKeyItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSettingsEncryptionKeyItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSettingsEncryptionKeyItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSettingsEncryptionKeyItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/settings/encryption-key",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSettingsEncryptionKeyItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSettingsEncryptionKeyItemOK), nil

}

/*
CreateSettingsReportingEulaItem Accept telemetry collection EULA.
*/
func (a *Client) CreateSettingsReportingEulaItem(params *CreateSettingsReportingEulaItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSettingsReportingEulaItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSettingsReportingEulaItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSettingsReportingEulaItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cloud/settings/reporting-eula",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSettingsReportingEulaItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSettingsReportingEulaItemOK), nil

}

/*
DeleteCloudAccessGUID Delete cloud access.
*/
func (a *Client) DeleteCloudAccessGUID(params *DeleteCloudAccessGUIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudAccessGUIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccessGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccessGuid",
		Method:             "DELETE",
		PathPattern:        "/platform/3/cloud/access/{CloudAccessGuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccessGUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudAccessGUIDNoContent), nil

}

/*
DeleteCloudAccount Delete cloud account.
*/
func (a *Client) DeleteCloudAccount(params *DeleteCloudAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudAccount",
		Method:             "DELETE",
		PathPattern:        "/platform/3/cloud/accounts/{CloudAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudAccountNoContent), nil

}

/*
DeleteCloudPool Delete a cloud pool.
*/
func (a *Client) DeleteCloudPool(params *DeleteCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCloudPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCloudPool",
		Method:             "DELETE",
		PathPattern:        "/platform/3/cloud/pools/{CloudPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCloudPoolNoContent), nil

}

/*
DeleteSettingsReportingEula Revoke acceptance of telemetry collection EULA.
*/
func (a *Client) DeleteSettingsReportingEula(params *DeleteSettingsReportingEulaParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSettingsReportingEulaNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSettingsReportingEulaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSettingsReportingEula",
		Method:             "DELETE",
		PathPattern:        "/platform/3/cloud/settings/reporting-eula",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSettingsReportingEulaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSettingsReportingEulaNoContent), nil

}

/*
GetCloudAccessGUID Retrieve cloud access information.
*/
func (a *Client) GetCloudAccessGUID(params *GetCloudAccessGUIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudAccessGUIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccessGUIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccessGuid",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/access/{CloudAccessGuid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccessGUIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccessGUIDOK), nil

}

/*
GetCloudAccount Retrieve cloud account information.
*/
func (a *Client) GetCloudAccount(params *GetCloudAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudAccount",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/accounts/{CloudAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudAccountOK), nil

}

/*
GetCloudJob Retrieve cloudpool job information.
*/
func (a *Client) GetCloudJob(params *GetCloudJobParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudJob",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/jobs/{CloudJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudJobOK), nil

}

/*
GetCloudJobsFile Retrieve files associated with a cloudpool job.
*/
func (a *Client) GetCloudJobsFile(params *GetCloudJobsFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudJobsFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudJobsFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudJobsFile",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/jobs-files/{CloudJobsFileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudJobsFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudJobsFileOK), nil

}

/*
GetCloudPool Retrieve cloud pool information
*/
func (a *Client) GetCloudPool(params *GetCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudPool",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/pools/{CloudPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudPoolOK), nil

}

/*
GetCloudSettings List all cloud settings.
*/
func (a *Client) GetCloudSettings(params *GetCloudSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetCloudSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudSettingsOK), nil

}

/*
ListCloudAccess List all accessible cluster identifiers.
*/
func (a *Client) ListCloudAccess(params *ListCloudAccessParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudAccessOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudAccessParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudAccess",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/access",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCloudAccessReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCloudAccessOK), nil

}

/*
ListCloudAccounts List all accounts.
*/
func (a *Client) ListCloudAccounts(params *ListCloudAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudAccounts",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCloudAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCloudAccountsOK), nil

}

/*
ListCloudJobs List all cloudpools jobs.
*/
func (a *Client) ListCloudJobs(params *ListCloudJobsParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudJobs",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCloudJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCloudJobsOK), nil

}

/*
ListCloudPools List all pools.
*/
func (a *Client) ListCloudPools(params *ListCloudPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*ListCloudPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCloudPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCloudPools",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCloudPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCloudPoolsOK), nil

}

/*
ListSettingsReportingEula View telemetry collection EULA acceptance and content URI.
*/
func (a *Client) ListSettingsReportingEula(params *ListSettingsReportingEulaParams, authInfo runtime.ClientAuthInfoWriter) (*ListSettingsReportingEulaOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSettingsReportingEulaParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSettingsReportingEula",
		Method:             "GET",
		PathPattern:        "/platform/3/cloud/settings/reporting-eula",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSettingsReportingEulaReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSettingsReportingEulaOK), nil

}

/*
UpdateCloudAccount Modify cloud account.  All fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateCloudAccount(params *UpdateCloudAccountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudAccount",
		Method:             "PUT",
		PathPattern:        "/platform/3/cloud/accounts/{CloudAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCloudAccountNoContent), nil

}

/*
UpdateCloudJob Modify a cloud job or operation.
*/
func (a *Client) UpdateCloudJob(params *UpdateCloudJobParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudJobNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudJob",
		Method:             "PUT",
		PathPattern:        "/platform/3/cloud/jobs/{CloudJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCloudJobNoContent), nil

}

/*
UpdateCloudPool Modify a cloud pool.  All fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateCloudPool(params *UpdateCloudPoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudPool",
		Method:             "PUT",
		PathPattern:        "/platform/3/cloud/pools/{CloudPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCloudPoolNoContent), nil

}

/*
UpdateCloudSettings Modify one or more settings.
*/
func (a *Client) UpdateCloudSettings(params *UpdateCloudSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCloudSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCloudSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/cloud/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCloudSettingsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
