// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateMappingIdentitiesParams creates a new CreateMappingIdentitiesParams object
// with the default values initialized.
func NewCreateMappingIdentitiesParams() *CreateMappingIdentitiesParams {
	var ()
	return &CreateMappingIdentitiesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateMappingIdentitiesParamsWithTimeout creates a new CreateMappingIdentitiesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateMappingIdentitiesParamsWithTimeout(timeout time.Duration) *CreateMappingIdentitiesParams {
	var ()
	return &CreateMappingIdentitiesParams{

		timeout: timeout,
	}
}

// NewCreateMappingIdentitiesParamsWithContext creates a new CreateMappingIdentitiesParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateMappingIdentitiesParamsWithContext(ctx context.Context) *CreateMappingIdentitiesParams {
	var ()
	return &CreateMappingIdentitiesParams{

		Context: ctx,
	}
}

// NewCreateMappingIdentitiesParamsWithHTTPClient creates a new CreateMappingIdentitiesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateMappingIdentitiesParamsWithHTTPClient(client *http.Client) *CreateMappingIdentitiesParams {
	var ()
	return &CreateMappingIdentitiesParams{
		HTTPClient: client,
	}
}

/*CreateMappingIdentitiesParams contains all the parameters to send to the API endpoint
for the create mapping identities operation typically these are written to a http.Request
*/
type CreateMappingIdentitiesParams struct {

	/*Nr2way
	  Create a bi-directional mapping from source to target and target to source.

	*/
	X2way *bool
	/*MappingIdentities*/
	MappingIdentities *models.MappingIdentitiesCreateParams
	/*Replace
	  Replace existing mappings.

	*/
	Replace *bool
	/*Zone
	  Optional zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithTimeout(timeout time.Duration) *CreateMappingIdentitiesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithContext(ctx context.Context) *CreateMappingIdentitiesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithHTTPClient(client *http.Client) *CreateMappingIdentitiesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithX2way adds the x2way to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithX2way(x2way *bool) *CreateMappingIdentitiesParams {
	o.SetX2way(x2way)
	return o
}

// SetX2way adds the 2way to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetX2way(x2way *bool) {
	o.X2way = x2way
}

// WithMappingIdentities adds the mappingIdentities to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithMappingIdentities(mappingIdentities *models.MappingIdentitiesCreateParams) *CreateMappingIdentitiesParams {
	o.SetMappingIdentities(mappingIdentities)
	return o
}

// SetMappingIdentities adds the mappingIdentities to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetMappingIdentities(mappingIdentities *models.MappingIdentitiesCreateParams) {
	o.MappingIdentities = mappingIdentities
}

// WithReplace adds the replace to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithReplace(replace *bool) *CreateMappingIdentitiesParams {
	o.SetReplace(replace)
	return o
}

// SetReplace adds the replace to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetReplace(replace *bool) {
	o.Replace = replace
}

// WithZone adds the zone to the create mapping identities params
func (o *CreateMappingIdentitiesParams) WithZone(zone *string) *CreateMappingIdentitiesParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the create mapping identities params
func (o *CreateMappingIdentitiesParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *CreateMappingIdentitiesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.X2way != nil {

		// query param 2way
		var qrNr2way bool
		if o.X2way != nil {
			qrNr2way = *o.X2way
		}
		qNr2way := swag.FormatBool(qrNr2way)
		if qNr2way != "" {
			if err := r.SetQueryParam("2way", qNr2way); err != nil {
				return err
			}
		}

	}

	if o.MappingIdentities != nil {
		if err := r.SetBodyParam(o.MappingIdentities); err != nil {
			return err
		}
	}

	if o.Replace != nil {

		// query param replace
		var qrReplace bool
		if o.Replace != nil {
			qrReplace = *o.Replace
		}
		qReplace := swag.FormatBool(qrReplace)
		if qReplace != "" {
			if err := r.SetQueryParam("replace", qReplace); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
