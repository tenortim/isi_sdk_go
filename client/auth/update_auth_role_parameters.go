// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateAuthRoleParams creates a new UpdateAuthRoleParams object
// with the default values initialized.
func NewUpdateAuthRoleParams() *UpdateAuthRoleParams {
	var ()
	return &UpdateAuthRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthRoleParamsWithTimeout creates a new UpdateAuthRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAuthRoleParamsWithTimeout(timeout time.Duration) *UpdateAuthRoleParams {
	var ()
	return &UpdateAuthRoleParams{

		timeout: timeout,
	}
}

// NewUpdateAuthRoleParamsWithContext creates a new UpdateAuthRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAuthRoleParamsWithContext(ctx context.Context) *UpdateAuthRoleParams {
	var ()
	return &UpdateAuthRoleParams{

		Context: ctx,
	}
}

// NewUpdateAuthRoleParamsWithHTTPClient creates a new UpdateAuthRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAuthRoleParamsWithHTTPClient(client *http.Client) *UpdateAuthRoleParams {
	var ()
	return &UpdateAuthRoleParams{
		HTTPClient: client,
	}
}

/*UpdateAuthRoleParams contains all the parameters to send to the API endpoint
for the update auth role operation typically these are written to a http.Request
*/
type UpdateAuthRoleParams struct {

	/*AuthRole*/
	AuthRole *models.AuthRole
	/*AuthRoleID
	  Modify the role.

	*/
	AuthRoleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update auth role params
func (o *UpdateAuthRoleParams) WithTimeout(timeout time.Duration) *UpdateAuthRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update auth role params
func (o *UpdateAuthRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update auth role params
func (o *UpdateAuthRoleParams) WithContext(ctx context.Context) *UpdateAuthRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update auth role params
func (o *UpdateAuthRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update auth role params
func (o *UpdateAuthRoleParams) WithHTTPClient(client *http.Client) *UpdateAuthRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update auth role params
func (o *UpdateAuthRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthRole adds the authRole to the update auth role params
func (o *UpdateAuthRoleParams) WithAuthRole(authRole *models.AuthRole) *UpdateAuthRoleParams {
	o.SetAuthRole(authRole)
	return o
}

// SetAuthRole adds the authRole to the update auth role params
func (o *UpdateAuthRoleParams) SetAuthRole(authRole *models.AuthRole) {
	o.AuthRole = authRole
}

// WithAuthRoleID adds the authRoleID to the update auth role params
func (o *UpdateAuthRoleParams) WithAuthRoleID(authRoleID string) *UpdateAuthRoleParams {
	o.SetAuthRoleID(authRoleID)
	return o
}

// SetAuthRoleID adds the authRoleId to the update auth role params
func (o *UpdateAuthRoleParams) SetAuthRoleID(authRoleID string) {
	o.AuthRoleID = authRoleID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthRole != nil {
		if err := r.SetBodyParam(o.AuthRole); err != nil {
			return err
		}
	}

	// path param AuthRoleId
	if err := r.SetPathParam("AuthRoleId", o.AuthRoleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
