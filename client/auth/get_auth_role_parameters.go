// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAuthRoleParams creates a new GetAuthRoleParams object
// with the default values initialized.
func NewGetAuthRoleParams() *GetAuthRoleParams {
	var ()
	return &GetAuthRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuthRoleParamsWithTimeout creates a new GetAuthRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAuthRoleParamsWithTimeout(timeout time.Duration) *GetAuthRoleParams {
	var ()
	return &GetAuthRoleParams{

		timeout: timeout,
	}
}

// NewGetAuthRoleParamsWithContext creates a new GetAuthRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAuthRoleParamsWithContext(ctx context.Context) *GetAuthRoleParams {
	var ()
	return &GetAuthRoleParams{

		Context: ctx,
	}
}

// NewGetAuthRoleParamsWithHTTPClient creates a new GetAuthRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAuthRoleParamsWithHTTPClient(client *http.Client) *GetAuthRoleParams {
	var ()
	return &GetAuthRoleParams{
		HTTPClient: client,
	}
}

/*GetAuthRoleParams contains all the parameters to send to the API endpoint
for the get auth role operation typically these are written to a http.Request
*/
type GetAuthRoleParams struct {

	/*AuthRoleID
	  Retrieve the role information.

	*/
	AuthRoleID string
	/*ResolveNames
	  Resolve names of personas.

	*/
	ResolveNames *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get auth role params
func (o *GetAuthRoleParams) WithTimeout(timeout time.Duration) *GetAuthRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get auth role params
func (o *GetAuthRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get auth role params
func (o *GetAuthRoleParams) WithContext(ctx context.Context) *GetAuthRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get auth role params
func (o *GetAuthRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get auth role params
func (o *GetAuthRoleParams) WithHTTPClient(client *http.Client) *GetAuthRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get auth role params
func (o *GetAuthRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthRoleID adds the authRoleID to the get auth role params
func (o *GetAuthRoleParams) WithAuthRoleID(authRoleID string) *GetAuthRoleParams {
	o.SetAuthRoleID(authRoleID)
	return o
}

// SetAuthRoleID adds the authRoleId to the get auth role params
func (o *GetAuthRoleParams) SetAuthRoleID(authRoleID string) {
	o.AuthRoleID = authRoleID
}

// WithResolveNames adds the resolveNames to the get auth role params
func (o *GetAuthRoleParams) WithResolveNames(resolveNames *bool) *GetAuthRoleParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the get auth role params
func (o *GetAuthRoleParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuthRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param AuthRoleId
	if err := r.SetPathParam("AuthRoleId", o.AuthRoleID); err != nil {
		return err
	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
