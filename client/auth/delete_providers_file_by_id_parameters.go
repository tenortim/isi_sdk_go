// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteProvidersFileByIDParams creates a new DeleteProvidersFileByIDParams object
// with the default values initialized.
func NewDeleteProvidersFileByIDParams() *DeleteProvidersFileByIDParams {
	var ()
	return &DeleteProvidersFileByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProvidersFileByIDParamsWithTimeout creates a new DeleteProvidersFileByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteProvidersFileByIDParamsWithTimeout(timeout time.Duration) *DeleteProvidersFileByIDParams {
	var ()
	return &DeleteProvidersFileByIDParams{

		timeout: timeout,
	}
}

// NewDeleteProvidersFileByIDParamsWithContext creates a new DeleteProvidersFileByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteProvidersFileByIDParamsWithContext(ctx context.Context) *DeleteProvidersFileByIDParams {
	var ()
	return &DeleteProvidersFileByIDParams{

		Context: ctx,
	}
}

// NewDeleteProvidersFileByIDParamsWithHTTPClient creates a new DeleteProvidersFileByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteProvidersFileByIDParamsWithHTTPClient(client *http.Client) *DeleteProvidersFileByIDParams {
	var ()
	return &DeleteProvidersFileByIDParams{
		HTTPClient: client,
	}
}

/*DeleteProvidersFileByIDParams contains all the parameters to send to the API endpoint
for the delete providers file by Id operation typically these are written to a http.Request
*/
type DeleteProvidersFileByIDParams struct {

	/*ProvidersFileID
	  Delete the file provider.

	*/
	ProvidersFileID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) WithTimeout(timeout time.Duration) *DeleteProvidersFileByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) WithContext(ctx context.Context) *DeleteProvidersFileByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) WithHTTPClient(client *http.Client) *DeleteProvidersFileByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProvidersFileID adds the providersFileID to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) WithProvidersFileID(providersFileID string) *DeleteProvidersFileByIDParams {
	o.SetProvidersFileID(providersFileID)
	return o
}

// SetProvidersFileID adds the providersFileId to the delete providers file by Id params
func (o *DeleteProvidersFileByIDParams) SetProvidersFileID(providersFileID string) {
	o.ProvidersFileID = providersFileID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProvidersFileByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ProvidersFileId
	if err := r.SetPathParam("ProvidersFileId", o.ProvidersFileID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
