// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateSettingsKrb5RealmParams creates a new CreateSettingsKrb5RealmParams object
// with the default values initialized.
func NewCreateSettingsKrb5RealmParams() *CreateSettingsKrb5RealmParams {
	var ()
	return &CreateSettingsKrb5RealmParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateSettingsKrb5RealmParamsWithTimeout creates a new CreateSettingsKrb5RealmParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateSettingsKrb5RealmParamsWithTimeout(timeout time.Duration) *CreateSettingsKrb5RealmParams {
	var ()
	return &CreateSettingsKrb5RealmParams{

		timeout: timeout,
	}
}

// NewCreateSettingsKrb5RealmParamsWithContext creates a new CreateSettingsKrb5RealmParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateSettingsKrb5RealmParamsWithContext(ctx context.Context) *CreateSettingsKrb5RealmParams {
	var ()
	return &CreateSettingsKrb5RealmParams{

		Context: ctx,
	}
}

// NewCreateSettingsKrb5RealmParamsWithHTTPClient creates a new CreateSettingsKrb5RealmParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateSettingsKrb5RealmParamsWithHTTPClient(client *http.Client) *CreateSettingsKrb5RealmParams {
	var ()
	return &CreateSettingsKrb5RealmParams{
		HTTPClient: client,
	}
}

/*CreateSettingsKrb5RealmParams contains all the parameters to send to the API endpoint
for the create settings krb5 realm operation typically these are written to a http.Request
*/
type CreateSettingsKrb5RealmParams struct {

	/*SettingsKrb5Realm*/
	SettingsKrb5Realm *models.SettingsKrb5RealmCreateParams

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) WithTimeout(timeout time.Duration) *CreateSettingsKrb5RealmParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) WithContext(ctx context.Context) *CreateSettingsKrb5RealmParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) WithHTTPClient(client *http.Client) *CreateSettingsKrb5RealmParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSettingsKrb5Realm adds the settingsKrb5Realm to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) WithSettingsKrb5Realm(settingsKrb5Realm *models.SettingsKrb5RealmCreateParams) *CreateSettingsKrb5RealmParams {
	o.SetSettingsKrb5Realm(settingsKrb5Realm)
	return o
}

// SetSettingsKrb5Realm adds the settingsKrb5Realm to the create settings krb5 realm params
func (o *CreateSettingsKrb5RealmParams) SetSettingsKrb5Realm(settingsKrb5Realm *models.SettingsKrb5RealmCreateParams) {
	o.SettingsKrb5Realm = settingsKrb5Realm
}

// WriteToRequest writes these params to a swagger request
func (o *CreateSettingsKrb5RealmParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SettingsKrb5Realm != nil {
		if err := r.SetBodyParam(o.SettingsKrb5Realm); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
