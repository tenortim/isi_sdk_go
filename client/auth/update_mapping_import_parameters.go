// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateMappingImportParams creates a new UpdateMappingImportParams object
// with the default values initialized.
func NewUpdateMappingImportParams() *UpdateMappingImportParams {
	var ()
	return &UpdateMappingImportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateMappingImportParamsWithTimeout creates a new UpdateMappingImportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateMappingImportParamsWithTimeout(timeout time.Duration) *UpdateMappingImportParams {
	var ()
	return &UpdateMappingImportParams{

		timeout: timeout,
	}
}

// NewUpdateMappingImportParamsWithContext creates a new UpdateMappingImportParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateMappingImportParamsWithContext(ctx context.Context) *UpdateMappingImportParams {
	var ()
	return &UpdateMappingImportParams{

		Context: ctx,
	}
}

// NewUpdateMappingImportParamsWithHTTPClient creates a new UpdateMappingImportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateMappingImportParamsWithHTTPClient(client *http.Client) *UpdateMappingImportParams {
	var ()
	return &UpdateMappingImportParams{
		HTTPClient: client,
	}
}

/*UpdateMappingImportParams contains all the parameters to send to the API endpoint
for the update mapping import operation typically these are written to a http.Request
*/
type UpdateMappingImportParams struct {

	/*MappingImport*/
	MappingImport *models.MappingImport
	/*Replace
	  Specify whether existing mappings should be replaced. The default behavior is to leave existing mappings intact and return an error.

	*/
	Replace *bool
	/*Zone
	  Optional zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update mapping import params
func (o *UpdateMappingImportParams) WithTimeout(timeout time.Duration) *UpdateMappingImportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update mapping import params
func (o *UpdateMappingImportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update mapping import params
func (o *UpdateMappingImportParams) WithContext(ctx context.Context) *UpdateMappingImportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update mapping import params
func (o *UpdateMappingImportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update mapping import params
func (o *UpdateMappingImportParams) WithHTTPClient(client *http.Client) *UpdateMappingImportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update mapping import params
func (o *UpdateMappingImportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMappingImport adds the mappingImport to the update mapping import params
func (o *UpdateMappingImportParams) WithMappingImport(mappingImport *models.MappingImport) *UpdateMappingImportParams {
	o.SetMappingImport(mappingImport)
	return o
}

// SetMappingImport adds the mappingImport to the update mapping import params
func (o *UpdateMappingImportParams) SetMappingImport(mappingImport *models.MappingImport) {
	o.MappingImport = mappingImport
}

// WithReplace adds the replace to the update mapping import params
func (o *UpdateMappingImportParams) WithReplace(replace *bool) *UpdateMappingImportParams {
	o.SetReplace(replace)
	return o
}

// SetReplace adds the replace to the update mapping import params
func (o *UpdateMappingImportParams) SetReplace(replace *bool) {
	o.Replace = replace
}

// WithZone adds the zone to the update mapping import params
func (o *UpdateMappingImportParams) WithZone(zone *string) *UpdateMappingImportParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the update mapping import params
func (o *UpdateMappingImportParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateMappingImportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MappingImport != nil {
		if err := r.SetBodyParam(o.MappingImport); err != nil {
			return err
		}
	}

	if o.Replace != nil {

		// query param replace
		var qrReplace bool
		if o.Replace != nil {
			qrReplace = *o.Replace
		}
		qReplace := swag.FormatBool(qrReplace)
		if qReplace != "" {
			if err := r.SetQueryParam("replace", qReplace); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
