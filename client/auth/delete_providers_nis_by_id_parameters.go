// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteProvidersNisByIDParams creates a new DeleteProvidersNisByIDParams object
// with the default values initialized.
func NewDeleteProvidersNisByIDParams() *DeleteProvidersNisByIDParams {
	var ()
	return &DeleteProvidersNisByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProvidersNisByIDParamsWithTimeout creates a new DeleteProvidersNisByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteProvidersNisByIDParamsWithTimeout(timeout time.Duration) *DeleteProvidersNisByIDParams {
	var ()
	return &DeleteProvidersNisByIDParams{

		timeout: timeout,
	}
}

// NewDeleteProvidersNisByIDParamsWithContext creates a new DeleteProvidersNisByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteProvidersNisByIDParamsWithContext(ctx context.Context) *DeleteProvidersNisByIDParams {
	var ()
	return &DeleteProvidersNisByIDParams{

		Context: ctx,
	}
}

// NewDeleteProvidersNisByIDParamsWithHTTPClient creates a new DeleteProvidersNisByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteProvidersNisByIDParamsWithHTTPClient(client *http.Client) *DeleteProvidersNisByIDParams {
	var ()
	return &DeleteProvidersNisByIDParams{
		HTTPClient: client,
	}
}

/*DeleteProvidersNisByIDParams contains all the parameters to send to the API endpoint
for the delete providers nis by Id operation typically these are written to a http.Request
*/
type DeleteProvidersNisByIDParams struct {

	/*ProvidersNisID
	  Delete the NIS provider.

	*/
	ProvidersNisID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) WithTimeout(timeout time.Duration) *DeleteProvidersNisByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) WithContext(ctx context.Context) *DeleteProvidersNisByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) WithHTTPClient(client *http.Client) *DeleteProvidersNisByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProvidersNisID adds the providersNisID to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) WithProvidersNisID(providersNisID string) *DeleteProvidersNisByIDParams {
	o.SetProvidersNisID(providersNisID)
	return o
}

// SetProvidersNisID adds the providersNisId to the delete providers nis by Id params
func (o *DeleteProvidersNisByIDParams) SetProvidersNisID(providersNisID string) {
	o.ProvidersNisID = providersNisID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProvidersNisByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ProvidersNisId
	if err := r.SetPathParam("ProvidersNisId", o.ProvidersNisID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
