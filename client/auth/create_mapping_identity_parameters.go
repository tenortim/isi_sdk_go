// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateMappingIdentityParams creates a new CreateMappingIdentityParams object
// with the default values initialized.
func NewCreateMappingIdentityParams() *CreateMappingIdentityParams {
	var ()
	return &CreateMappingIdentityParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateMappingIdentityParamsWithTimeout creates a new CreateMappingIdentityParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateMappingIdentityParamsWithTimeout(timeout time.Duration) *CreateMappingIdentityParams {
	var ()
	return &CreateMappingIdentityParams{

		timeout: timeout,
	}
}

// NewCreateMappingIdentityParamsWithContext creates a new CreateMappingIdentityParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateMappingIdentityParamsWithContext(ctx context.Context) *CreateMappingIdentityParams {
	var ()
	return &CreateMappingIdentityParams{

		Context: ctx,
	}
}

// NewCreateMappingIdentityParamsWithHTTPClient creates a new CreateMappingIdentityParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateMappingIdentityParamsWithHTTPClient(client *http.Client) *CreateMappingIdentityParams {
	var ()
	return &CreateMappingIdentityParams{
		HTTPClient: client,
	}
}

/*CreateMappingIdentityParams contains all the parameters to send to the API endpoint
for the create mapping identity operation typically these are written to a http.Request
*/
type CreateMappingIdentityParams struct {

	/*MappingIdentity*/
	MappingIdentity models.Empty
	/*MappingIdentityID
	  Manually set or modify a mapping between two personae.

	*/
	MappingIdentityID string
	/*Type
	  Desired mapping target to fetch/generate.

	*/
	Type *string
	/*Zone
	  Optional zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create mapping identity params
func (o *CreateMappingIdentityParams) WithTimeout(timeout time.Duration) *CreateMappingIdentityParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create mapping identity params
func (o *CreateMappingIdentityParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create mapping identity params
func (o *CreateMappingIdentityParams) WithContext(ctx context.Context) *CreateMappingIdentityParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create mapping identity params
func (o *CreateMappingIdentityParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create mapping identity params
func (o *CreateMappingIdentityParams) WithHTTPClient(client *http.Client) *CreateMappingIdentityParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create mapping identity params
func (o *CreateMappingIdentityParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithMappingIdentity adds the mappingIdentity to the create mapping identity params
func (o *CreateMappingIdentityParams) WithMappingIdentity(mappingIdentity models.Empty) *CreateMappingIdentityParams {
	o.SetMappingIdentity(mappingIdentity)
	return o
}

// SetMappingIdentity adds the mappingIdentity to the create mapping identity params
func (o *CreateMappingIdentityParams) SetMappingIdentity(mappingIdentity models.Empty) {
	o.MappingIdentity = mappingIdentity
}

// WithMappingIdentityID adds the mappingIdentityID to the create mapping identity params
func (o *CreateMappingIdentityParams) WithMappingIdentityID(mappingIdentityID string) *CreateMappingIdentityParams {
	o.SetMappingIdentityID(mappingIdentityID)
	return o
}

// SetMappingIdentityID adds the mappingIdentityId to the create mapping identity params
func (o *CreateMappingIdentityParams) SetMappingIdentityID(mappingIdentityID string) {
	o.MappingIdentityID = mappingIdentityID
}

// WithType adds the typeVar to the create mapping identity params
func (o *CreateMappingIdentityParams) WithType(typeVar *string) *CreateMappingIdentityParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the create mapping identity params
func (o *CreateMappingIdentityParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithZone adds the zone to the create mapping identity params
func (o *CreateMappingIdentityParams) WithZone(zone *string) *CreateMappingIdentityParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the create mapping identity params
func (o *CreateMappingIdentityParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *CreateMappingIdentityParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.MappingIdentity != nil {
		if err := r.SetBodyParam(o.MappingIdentity); err != nil {
			return err
		}
	}

	// path param MappingIdentityId
	if err := r.SetPathParam("MappingIdentityId", o.MappingIdentityID); err != nil {
		return err
	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
