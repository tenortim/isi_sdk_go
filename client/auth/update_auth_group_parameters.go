// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateAuthGroupParams creates a new UpdateAuthGroupParams object
// with the default values initialized.
func NewUpdateAuthGroupParams() *UpdateAuthGroupParams {
	var ()
	return &UpdateAuthGroupParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthGroupParamsWithTimeout creates a new UpdateAuthGroupParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAuthGroupParamsWithTimeout(timeout time.Duration) *UpdateAuthGroupParams {
	var ()
	return &UpdateAuthGroupParams{

		timeout: timeout,
	}
}

// NewUpdateAuthGroupParamsWithContext creates a new UpdateAuthGroupParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAuthGroupParamsWithContext(ctx context.Context) *UpdateAuthGroupParams {
	var ()
	return &UpdateAuthGroupParams{

		Context: ctx,
	}
}

// NewUpdateAuthGroupParamsWithHTTPClient creates a new UpdateAuthGroupParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAuthGroupParamsWithHTTPClient(client *http.Client) *UpdateAuthGroupParams {
	var ()
	return &UpdateAuthGroupParams{
		HTTPClient: client,
	}
}

/*UpdateAuthGroupParams contains all the parameters to send to the API endpoint
for the update auth group operation typically these are written to a http.Request
*/
type UpdateAuthGroupParams struct {

	/*AuthGroup*/
	AuthGroup *models.AuthGroup
	/*AuthGroupID
	  Modify the group.

	*/
	AuthGroupID string
	/*Force
	  Changes to the group ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for group ID changes.

	*/
	Force *bool
	/*Provider
	  Optional provider type.

	*/
	Provider *string
	/*Zone
	  Optional zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update auth group params
func (o *UpdateAuthGroupParams) WithTimeout(timeout time.Duration) *UpdateAuthGroupParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update auth group params
func (o *UpdateAuthGroupParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update auth group params
func (o *UpdateAuthGroupParams) WithContext(ctx context.Context) *UpdateAuthGroupParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update auth group params
func (o *UpdateAuthGroupParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update auth group params
func (o *UpdateAuthGroupParams) WithHTTPClient(client *http.Client) *UpdateAuthGroupParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update auth group params
func (o *UpdateAuthGroupParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthGroup adds the authGroup to the update auth group params
func (o *UpdateAuthGroupParams) WithAuthGroup(authGroup *models.AuthGroup) *UpdateAuthGroupParams {
	o.SetAuthGroup(authGroup)
	return o
}

// SetAuthGroup adds the authGroup to the update auth group params
func (o *UpdateAuthGroupParams) SetAuthGroup(authGroup *models.AuthGroup) {
	o.AuthGroup = authGroup
}

// WithAuthGroupID adds the authGroupID to the update auth group params
func (o *UpdateAuthGroupParams) WithAuthGroupID(authGroupID string) *UpdateAuthGroupParams {
	o.SetAuthGroupID(authGroupID)
	return o
}

// SetAuthGroupID adds the authGroupId to the update auth group params
func (o *UpdateAuthGroupParams) SetAuthGroupID(authGroupID string) {
	o.AuthGroupID = authGroupID
}

// WithForce adds the force to the update auth group params
func (o *UpdateAuthGroupParams) WithForce(force *bool) *UpdateAuthGroupParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the update auth group params
func (o *UpdateAuthGroupParams) SetForce(force *bool) {
	o.Force = force
}

// WithProvider adds the provider to the update auth group params
func (o *UpdateAuthGroupParams) WithProvider(provider *string) *UpdateAuthGroupParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the update auth group params
func (o *UpdateAuthGroupParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithZone adds the zone to the update auth group params
func (o *UpdateAuthGroupParams) WithZone(zone *string) *UpdateAuthGroupParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the update auth group params
func (o *UpdateAuthGroupParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthGroupParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthGroup != nil {
		if err := r.SetBodyParam(o.AuthGroup); err != nil {
			return err
		}
	}

	// path param AuthGroupId
	if err := r.SetPathParam("AuthGroupId", o.AuthGroupID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
