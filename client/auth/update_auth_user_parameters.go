// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateAuthUserParams creates a new UpdateAuthUserParams object
// with the default values initialized.
func NewUpdateAuthUserParams() *UpdateAuthUserParams {
	var ()
	return &UpdateAuthUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthUserParamsWithTimeout creates a new UpdateAuthUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAuthUserParamsWithTimeout(timeout time.Duration) *UpdateAuthUserParams {
	var ()
	return &UpdateAuthUserParams{

		timeout: timeout,
	}
}

// NewUpdateAuthUserParamsWithContext creates a new UpdateAuthUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAuthUserParamsWithContext(ctx context.Context) *UpdateAuthUserParams {
	var ()
	return &UpdateAuthUserParams{

		Context: ctx,
	}
}

// NewUpdateAuthUserParamsWithHTTPClient creates a new UpdateAuthUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAuthUserParamsWithHTTPClient(client *http.Client) *UpdateAuthUserParams {
	var ()
	return &UpdateAuthUserParams{
		HTTPClient: client,
	}
}

/*UpdateAuthUserParams contains all the parameters to send to the API endpoint
for the update auth user operation typically these are written to a http.Request
*/
type UpdateAuthUserParams struct {

	/*AuthUser*/
	AuthUser *models.AuthUser
	/*AuthUserID
	  Modify the user.

	*/
	AuthUserID string
	/*Force
	  Changes to the user ID can result in loss of access to the file system. To mitigate this risk of lost access, the force option is required for user ID changes.

	*/
	Force *bool
	/*Provider
	  Optional provider type.

	*/
	Provider *string
	/*Zone
	  Optional zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update auth user params
func (o *UpdateAuthUserParams) WithTimeout(timeout time.Duration) *UpdateAuthUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update auth user params
func (o *UpdateAuthUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update auth user params
func (o *UpdateAuthUserParams) WithContext(ctx context.Context) *UpdateAuthUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update auth user params
func (o *UpdateAuthUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update auth user params
func (o *UpdateAuthUserParams) WithHTTPClient(client *http.Client) *UpdateAuthUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update auth user params
func (o *UpdateAuthUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthUser adds the authUser to the update auth user params
func (o *UpdateAuthUserParams) WithAuthUser(authUser *models.AuthUser) *UpdateAuthUserParams {
	o.SetAuthUser(authUser)
	return o
}

// SetAuthUser adds the authUser to the update auth user params
func (o *UpdateAuthUserParams) SetAuthUser(authUser *models.AuthUser) {
	o.AuthUser = authUser
}

// WithAuthUserID adds the authUserID to the update auth user params
func (o *UpdateAuthUserParams) WithAuthUserID(authUserID string) *UpdateAuthUserParams {
	o.SetAuthUserID(authUserID)
	return o
}

// SetAuthUserID adds the authUserId to the update auth user params
func (o *UpdateAuthUserParams) SetAuthUserID(authUserID string) {
	o.AuthUserID = authUserID
}

// WithForce adds the force to the update auth user params
func (o *UpdateAuthUserParams) WithForce(force *bool) *UpdateAuthUserParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the update auth user params
func (o *UpdateAuthUserParams) SetForce(force *bool) {
	o.Force = force
}

// WithProvider adds the provider to the update auth user params
func (o *UpdateAuthUserParams) WithProvider(provider *string) *UpdateAuthUserParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the update auth user params
func (o *UpdateAuthUserParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithZone adds the zone to the update auth user params
func (o *UpdateAuthUserParams) WithZone(zone *string) *UpdateAuthUserParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the update auth user params
func (o *UpdateAuthUserParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuthUser != nil {
		if err := r.SetBodyParam(o.AuthUser); err != nil {
			return err
		}
	}

	// path param AuthUserId
	if err := r.SetPathParam("AuthUserId", o.AuthUserID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
