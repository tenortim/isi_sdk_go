// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new auth API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAuthGroup Create a new group.
*/
func (a *Client) CreateAuthGroup(params *CreateAuthGroupParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthGroup",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuthGroupOK), nil

}

/*
CreateAuthRefreshItem Refresh the authentication service configuration.
*/
func (a *Client) CreateAuthRefreshItem(params *CreateAuthRefreshItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthRefreshItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthRefreshItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthRefreshItem",
		Method:             "POST",
		PathPattern:        "/platform/3/auth/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthRefreshItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuthRefreshItemOK), nil

}

/*
CreateAuthRole Create a new role.
*/
func (a *Client) CreateAuthRole(params *CreateAuthRoleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthRole",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuthRoleOK), nil

}

/*
CreateAuthUser Create a new user.
*/
func (a *Client) CreateAuthUser(params *CreateAuthUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuthUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuthUser",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuthUserOK), nil

}

/*
CreateMappingIdentities Manually set or modify a mapping between two personae.
*/
func (a *Client) CreateMappingIdentities(params *CreateMappingIdentitiesParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMappingIdentitiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMappingIdentitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMappingIdentities",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/mapping/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMappingIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMappingIdentitiesOK), nil

}

/*
CreateMappingIdentity Manually set or modify a mapping between two personae.
*/
func (a *Client) CreateMappingIdentity(params *CreateMappingIdentityParams, authInfo runtime.ClientAuthInfoWriter) (*CreateMappingIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateMappingIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createMappingIdentity",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/mapping/identities/{MappingIdentityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateMappingIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateMappingIdentityOK), nil

}

/*
CreateProvidersAdsItem Create a new ADS provider.
*/
func (a *Client) CreateProvidersAdsItem(params *CreateProvidersAdsItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProvidersAdsItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProvidersAdsItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProvidersAdsItem",
		Method:             "POST",
		PathPattern:        "/platform/3/auth/providers/ads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProvidersAdsItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProvidersAdsItemOK), nil

}

/*
CreateProvidersFileItem Create a new file provider.
*/
func (a *Client) CreateProvidersFileItem(params *CreateProvidersFileItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProvidersFileItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProvidersFileItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProvidersFileItem",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/providers/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProvidersFileItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProvidersFileItemOK), nil

}

/*
CreateProvidersKrb5Item Create a new KRB5 provider.
*/
func (a *Client) CreateProvidersKrb5Item(params *CreateProvidersKrb5ItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProvidersKrb5ItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProvidersKrb5ItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProvidersKrb5Item",
		Method:             "POST",
		PathPattern:        "/platform/3/auth/providers/krb5",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProvidersKrb5ItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProvidersKrb5ItemOK), nil

}

/*
CreateProvidersLdapItem Create a new LDAP provider.
*/
func (a *Client) CreateProvidersLdapItem(params *CreateProvidersLdapItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProvidersLdapItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProvidersLdapItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProvidersLdapItem",
		Method:             "POST",
		PathPattern:        "/platform/3/auth/providers/ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProvidersLdapItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProvidersLdapItemOK), nil

}

/*
CreateProvidersNisItem Create a new NIS provider.
*/
func (a *Client) CreateProvidersNisItem(params *CreateProvidersNisItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProvidersNisItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProvidersNisItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProvidersNisItem",
		Method:             "POST",
		PathPattern:        "/platform/3/auth/providers/nis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProvidersNisItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProvidersNisItemOK), nil

}

/*
CreateSettingsKrb5Domain Create a new krb5 domain.
*/
func (a *Client) CreateSettingsKrb5Domain(params *CreateSettingsKrb5DomainParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSettingsKrb5DomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSettingsKrb5DomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSettingsKrb5Domain",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/settings/krb5/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSettingsKrb5DomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSettingsKrb5DomainOK), nil

}

/*
CreateSettingsKrb5Realm Create a new krb5 realm.
*/
func (a *Client) CreateSettingsKrb5Realm(params *CreateSettingsKrb5RealmParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSettingsKrb5RealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSettingsKrb5RealmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSettingsKrb5Realm",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/settings/krb5/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSettingsKrb5RealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSettingsKrb5RealmOK), nil

}

/*
DeleteAuthGroup Delete the group.
*/
func (a *Client) DeleteAuthGroup(params *DeleteAuthGroupParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthGroup",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/groups/{AuthGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthGroupNoContent), nil

}

/*
DeleteAuthGroups Flush the groups cache.
*/
func (a *Client) DeleteAuthGroups(params *DeleteAuthGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthGroupsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthGroups",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthGroupsNoContent), nil

}

/*
DeleteAuthRole Delete the role.
*/
func (a *Client) DeleteAuthRole(params *DeleteAuthRoleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthRole",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/roles/{AuthRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthRoleNoContent), nil

}

/*
DeleteAuthUser Delete the user.
*/
func (a *Client) DeleteAuthUser(params *DeleteAuthUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthUser",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/users/{AuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthUserNoContent), nil

}

/*
DeleteAuthUsers Flush the users cache.
*/
func (a *Client) DeleteAuthUsers(params *DeleteAuthUsersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuthUsersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuthUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuthUsers",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuthUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuthUsersNoContent), nil

}

/*
DeleteMappingIdentities Flush the entire idmap cache.
*/
func (a *Client) DeleteMappingIdentities(params *DeleteMappingIdentitiesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMappingIdentitiesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMappingIdentitiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMappingIdentities",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/mapping/identities",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMappingIdentitiesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMappingIdentitiesNoContent), nil

}

/*
DeleteMappingIdentity Flush the entire idmap cache.
*/
func (a *Client) DeleteMappingIdentity(params *DeleteMappingIdentityParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteMappingIdentityNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMappingIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMappingIdentity",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/mapping/identities/{MappingIdentityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteMappingIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMappingIdentityNoContent), nil

}

/*
DeleteProvidersAdsByID Delete the ADS provider.
*/
func (a *Client) DeleteProvidersAdsByID(params *DeleteProvidersAdsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersAdsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersAdsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersAdsById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/auth/providers/ads/{ProvidersAdsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersAdsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersAdsByIDNoContent), nil

}

/*
DeleteProvidersFileByID Delete the file provider.
*/
func (a *Client) DeleteProvidersFileByID(params *DeleteProvidersFileByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersFileByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersFileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersFileById",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/providers/file/{ProvidersFileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersFileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersFileByIDNoContent), nil

}

/*
DeleteProvidersKrb5ByID Delete the KRB5 provider.
*/
func (a *Client) DeleteProvidersKrb5ByID(params *DeleteProvidersKrb5ByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersKrb5ByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersKrb5ByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersKrb5ById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersKrb5ByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersKrb5ByIDNoContent), nil

}

/*
DeleteProvidersLdapByID Delete the LDAP provider.
*/
func (a *Client) DeleteProvidersLdapByID(params *DeleteProvidersLdapByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersLdapByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersLdapByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersLdapById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/auth/providers/ldap/{ProvidersLdapId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersLdapByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersLdapByIDNoContent), nil

}

/*
DeleteProvidersLocalByID Delete the local provider.
*/
func (a *Client) DeleteProvidersLocalByID(params *DeleteProvidersLocalByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersLocalByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersLocalByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersLocalById",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/providers/local/{ProvidersLocalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersLocalByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersLocalByIDNoContent), nil

}

/*
DeleteProvidersNisByID Delete the NIS provider.
*/
func (a *Client) DeleteProvidersNisByID(params *DeleteProvidersNisByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProvidersNisByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProvidersNisByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProvidersNisById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/auth/providers/nis/{ProvidersNisId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProvidersNisByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProvidersNisByIDNoContent), nil

}

/*
DeleteSettingsKrb5Domain Remove a krb5 domain.
*/
func (a *Client) DeleteSettingsKrb5Domain(params *DeleteSettingsKrb5DomainParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSettingsKrb5DomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSettingsKrb5DomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSettingsKrb5Domain",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSettingsKrb5DomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSettingsKrb5DomainNoContent), nil

}

/*
DeleteSettingsKrb5Realm Remove a realm.
*/
func (a *Client) DeleteSettingsKrb5Realm(params *DeleteSettingsKrb5RealmParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSettingsKrb5RealmNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSettingsKrb5RealmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSettingsKrb5Realm",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSettingsKrb5RealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSettingsKrb5RealmNoContent), nil

}

/*
GetAuthAccessUser Determine user's access rights to a file
*/
func (a *Client) GetAuthAccessUser(params *GetAuthAccessUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthAccessUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthAccessUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthAccessUser",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/access/{AuthAccessUser}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthAccessUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthAccessUserOK), nil

}

/*
GetAuthGroup Retrieve the group information.
*/
func (a *Client) GetAuthGroup(params *GetAuthGroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthGroup",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/groups/{AuthGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthGroupOK), nil

}

/*
GetAuthID Retrieve the current security token.
*/
func (a *Client) GetAuthID(params *GetAuthIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthId",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthIDOK), nil

}

/*
GetAuthLogLevel Get the current authentications service and netlogon logging level.
*/
func (a *Client) GetAuthLogLevel(params *GetAuthLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthLogLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthLogLevel",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthLogLevelOK), nil

}

/*
GetAuthNetgroup Retrieve the user information.
*/
func (a *Client) GetAuthNetgroup(params *GetAuthNetgroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthNetgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthNetgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthNetgroup",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/netgroups/{AuthNetgroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthNetgroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthNetgroupOK), nil

}

/*
GetAuthPrivileges List all privileges.
*/
func (a *Client) GetAuthPrivileges(params *GetAuthPrivilegesParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthPrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthPrivilegesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthPrivileges",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthPrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthPrivilegesOK), nil

}

/*
GetAuthRole Retrieve the role information.
*/
func (a *Client) GetAuthRole(params *GetAuthRoleParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthRole",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/roles/{AuthRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthRoleOK), nil

}

/*
GetAuthShells List all shells.
*/
func (a *Client) GetAuthShells(params *GetAuthShellsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthShellsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthShellsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthShells",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/shells",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthShellsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthShellsOK), nil

}

/*
GetAuthUser Retrieve the user information.
*/
func (a *Client) GetAuthUser(params *GetAuthUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthUser",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/users/{AuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthUserOK), nil

}

/*
GetAuthWellknown Retrieve the wellknown persona.
*/
func (a *Client) GetAuthWellknown(params *GetAuthWellknownParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthWellknownOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthWellknownParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthWellknown",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/wellknowns/{AuthWellknownId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthWellknownReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthWellknownOK), nil

}

/*
GetAuthWellknowns List all wellknown personas.
*/
func (a *Client) GetAuthWellknowns(params *GetAuthWellknownsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuthWellknownsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuthWellknownsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuthWellknowns",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/wellknowns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuthWellknownsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuthWellknownsOK), nil

}

/*
GetMappingDump Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
*/
func (a *Client) GetMappingDump(params *GetMappingDumpParams, authInfo runtime.ClientAuthInfoWriter) (*GetMappingDumpOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMappingDumpParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMappingDump",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/mapping/dump",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMappingDumpReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMappingDumpOK), nil

}

/*
GetMappingIdentity Retrieve all identity mappings (uid, gid, sid, and on-disk) for the supplied source persona.
*/
func (a *Client) GetMappingIdentity(params *GetMappingIdentityParams, authInfo runtime.ClientAuthInfoWriter) (*GetMappingIdentityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMappingIdentityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMappingIdentity",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/mapping/identities/{MappingIdentityId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMappingIdentityReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMappingIdentityOK), nil

}

/*
GetMappingUsersLookup Retrieve the user information.
*/
func (a *Client) GetMappingUsersLookup(params *GetMappingUsersLookupParams, authInfo runtime.ClientAuthInfoWriter) (*GetMappingUsersLookupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMappingUsersLookupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMappingUsersLookup",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/mapping/users/lookup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMappingUsersLookupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMappingUsersLookupOK), nil

}

/*
GetMappingUsersRules Retrieve the user mapping rules.
*/
func (a *Client) GetMappingUsersRules(params *GetMappingUsersRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetMappingUsersRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetMappingUsersRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getMappingUsersRules",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/mapping/users/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetMappingUsersRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetMappingUsersRulesOK), nil

}

/*
GetProvidersAdsByID Retrieve the ADS provider.
*/
func (a *Client) GetProvidersAdsByID(params *GetProvidersAdsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersAdsByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersAdsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersAdsById",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/ads/{ProvidersAdsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersAdsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersAdsByIDOK), nil

}

/*
GetProvidersFileByID Retrieve the file provider.
*/
func (a *Client) GetProvidersFileByID(params *GetProvidersFileByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersFileByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersFileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersFileById",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/providers/file/{ProvidersFileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersFileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersFileByIDOK), nil

}

/*
GetProvidersKrb5ByID Retrieve the KRB5 provider.
*/
func (a *Client) GetProvidersKrb5ByID(params *GetProvidersKrb5ByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersKrb5ByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersKrb5ByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersKrb5ById",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersKrb5ByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersKrb5ByIDOK), nil

}

/*
GetProvidersLdapByID Retrieve the LDAP provider.
*/
func (a *Client) GetProvidersLdapByID(params *GetProvidersLdapByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersLdapByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersLdapByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersLdapById",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/ldap/{ProvidersLdapId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersLdapByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersLdapByIDOK), nil

}

/*
GetProvidersLocal List all local providers.
*/
func (a *Client) GetProvidersLocal(params *GetProvidersLocalParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersLocalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersLocalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersLocal",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/providers/local",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersLocalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersLocalOK), nil

}

/*
GetProvidersLocalByID Retrieve the local provider.
*/
func (a *Client) GetProvidersLocalByID(params *GetProvidersLocalByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersLocalByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersLocalByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersLocalById",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/providers/local/{ProvidersLocalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersLocalByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersLocalByIDOK), nil

}

/*
GetProvidersNisByID Retrieve the NIS provider.
*/
func (a *Client) GetProvidersNisByID(params *GetProvidersNisByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersNisByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersNisByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersNisById",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/nis/{ProvidersNisId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersNisByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersNisByIDOK), nil

}

/*
GetProvidersSummary Retrieve the summary information.
*/
func (a *Client) GetProvidersSummary(params *GetProvidersSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetProvidersSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProvidersSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProvidersSummary",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetProvidersSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProvidersSummaryOK), nil

}

/*
GetSettingsAcls Retrieve the ACL policy settings and preset configurations.
*/
func (a *Client) GetSettingsAcls(params *GetSettingsAclsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsAclsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsAcls",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/settings/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsAclsOK), nil

}

/*
GetSettingsKrb5Defaults Retrieve the krb5 settings.
*/
func (a *Client) GetSettingsKrb5Defaults(params *GetSettingsKrb5DefaultsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsKrb5DefaultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsKrb5DefaultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsKrb5Defaults",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/settings/krb5/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsKrb5DefaultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsKrb5DefaultsOK), nil

}

/*
GetSettingsKrb5Domain View the krb5 domain settings.
*/
func (a *Client) GetSettingsKrb5Domain(params *GetSettingsKrb5DomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsKrb5DomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsKrb5DomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsKrb5Domain",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsKrb5DomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsKrb5DomainOK), nil

}

/*
GetSettingsKrb5Realm Retrieve the krb5 settings for realms.
*/
func (a *Client) GetSettingsKrb5Realm(params *GetSettingsKrb5RealmParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsKrb5RealmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsKrb5RealmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsKrb5Realm",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsKrb5RealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsKrb5RealmOK), nil

}

/*
ListAuthGroups List all groups.
*/
func (a *Client) ListAuthGroups(params *ListAuthGroupsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuthGroups",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAuthGroupsOK), nil

}

/*
ListAuthRoles List all roles.
*/
func (a *Client) ListAuthRoles(params *ListAuthRolesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuthRoles",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthRolesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAuthRolesOK), nil

}

/*
ListAuthUsers List all users.
*/
func (a *Client) ListAuthUsers(params *ListAuthUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuthUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuthUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuthUsers",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuthUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAuthUsersOK), nil

}

/*
ListProvidersAds List all ADS providers.
*/
func (a *Client) ListProvidersAds(params *ListProvidersAdsParams, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersAdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersAdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProvidersAds",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/ads",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProvidersAdsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersAdsOK), nil

}

/*
ListProvidersFile List all file providers.
*/
func (a *Client) ListProvidersFile(params *ListProvidersFileParams, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProvidersFile",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/providers/file",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProvidersFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersFileOK), nil

}

/*
ListProvidersKrb5 List all KRB5 providers.
*/
func (a *Client) ListProvidersKrb5(params *ListProvidersKrb5Params, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersKrb5OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersKrb5Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProvidersKrb5",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/krb5",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProvidersKrb5Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersKrb5OK), nil

}

/*
ListProvidersLdap List all LDAP providers.
*/
func (a *Client) ListProvidersLdap(params *ListProvidersLdapParams, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersLdapOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersLdapParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProvidersLdap",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/ldap",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProvidersLdapReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersLdapOK), nil

}

/*
ListProvidersNis List all NIS providers.
*/
func (a *Client) ListProvidersNis(params *ListProvidersNisParams, authInfo runtime.ClientAuthInfoWriter) (*ListProvidersNisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProvidersNisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProvidersNis",
		Method:             "GET",
		PathPattern:        "/platform/3/auth/providers/nis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProvidersNisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProvidersNisOK), nil

}

/*
ListSettingsKrb5Domains Retrieve the krb5 settings for domains.
*/
func (a *Client) ListSettingsKrb5Domains(params *ListSettingsKrb5DomainsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSettingsKrb5DomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSettingsKrb5DomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSettingsKrb5Domains",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/settings/krb5/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSettingsKrb5DomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSettingsKrb5DomainsOK), nil

}

/*
ListSettingsKrb5Realms Retrieve the krb5 settings for realms.
*/
func (a *Client) ListSettingsKrb5Realms(params *ListSettingsKrb5RealmsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSettingsKrb5RealmsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSettingsKrb5RealmsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSettingsKrb5Realms",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/settings/krb5/realms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSettingsKrb5RealmsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSettingsKrb5RealmsOK), nil

}

/*
UpdateAuthGroup Modify the group.
*/
func (a *Client) UpdateAuthGroup(params *UpdateAuthGroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthGroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuthGroup",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/groups/{AuthGroupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthGroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuthGroupNoContent), nil

}

/*
UpdateAuthLogLevel Set the current authentication service and netlogon logging level.
*/
func (a *Client) UpdateAuthLogLevel(params *UpdateAuthLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthLogLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuthLogLevel",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuthLogLevelNoContent), nil

}

/*
UpdateAuthRole Modify the role.
*/
func (a *Client) UpdateAuthRole(params *UpdateAuthRoleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthRoleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthRoleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuthRole",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/roles/{AuthRoleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuthRoleNoContent), nil

}

/*
UpdateAuthUser Modify the user.
*/
func (a *Client) UpdateAuthUser(params *UpdateAuthUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuthUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuthUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuthUser",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/users/{AuthUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuthUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuthUserNoContent), nil

}

/*
UpdateMappingImport Set or update a list of mappings between two personae.
*/
func (a *Client) UpdateMappingImport(params *UpdateMappingImportParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMappingImportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMappingImportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMappingImport",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/mapping/import",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMappingImportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMappingImportNoContent), nil

}

/*
UpdateMappingUsersRules Modify the user mapping rules.
*/
func (a *Client) UpdateMappingUsersRules(params *UpdateMappingUsersRulesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateMappingUsersRulesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateMappingUsersRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateMappingUsersRules",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/mapping/users/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateMappingUsersRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateMappingUsersRulesNoContent), nil

}

/*
UpdateProvidersAdsByID Modify the ADS provider.
*/
func (a *Client) UpdateProvidersAdsByID(params *UpdateProvidersAdsByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersAdsByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersAdsByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersAdsById",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/providers/ads/{ProvidersAdsId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersAdsByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersAdsByIDNoContent), nil

}

/*
UpdateProvidersFileByID Modify the file provider.
*/
func (a *Client) UpdateProvidersFileByID(params *UpdateProvidersFileByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersFileByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersFileByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersFileById",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/providers/file/{ProvidersFileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersFileByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersFileByIDNoContent), nil

}

/*
UpdateProvidersKrb5ByID Modify the KRB5 provider.
*/
func (a *Client) UpdateProvidersKrb5ByID(params *UpdateProvidersKrb5ByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersKrb5ByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersKrb5ByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersKrb5ById",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/providers/krb5/{ProvidersKrb5Id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersKrb5ByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersKrb5ByIDNoContent), nil

}

/*
UpdateProvidersLdapByID Modify the LDAP provider.
*/
func (a *Client) UpdateProvidersLdapByID(params *UpdateProvidersLdapByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersLdapByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersLdapByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersLdapById",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/providers/ldap/{ProvidersLdapId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersLdapByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersLdapByIDNoContent), nil

}

/*
UpdateProvidersLocalByID Modify the local provider.
*/
func (a *Client) UpdateProvidersLocalByID(params *UpdateProvidersLocalByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersLocalByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersLocalByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersLocalById",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/providers/local/{ProvidersLocalId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersLocalByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersLocalByIDNoContent), nil

}

/*
UpdateProvidersNisByID Modify the NIS provider.
*/
func (a *Client) UpdateProvidersNisByID(params *UpdateProvidersNisByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProvidersNisByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProvidersNisByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProvidersNisById",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/providers/nis/{ProvidersNisId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProvidersNisByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProvidersNisByIDNoContent), nil

}

/*
UpdateSettingsAcls Modify cluster ACL policy settings.
*/
func (a *Client) UpdateSettingsAcls(params *UpdateSettingsAclsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSettingsAclsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingsAclsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSettingsAcls",
		Method:             "PUT",
		PathPattern:        "/platform/3/auth/settings/acls",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingsAclsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSettingsAclsNoContent), nil

}

/*
UpdateSettingsKrb5Defaults Modify the krb5 settings.
*/
func (a *Client) UpdateSettingsKrb5Defaults(params *UpdateSettingsKrb5DefaultsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSettingsKrb5DefaultsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingsKrb5DefaultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSettingsKrb5Defaults",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/settings/krb5/defaults",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingsKrb5DefaultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSettingsKrb5DefaultsNoContent), nil

}

/*
UpdateSettingsKrb5Domain Modify the krb5 domain settings.
*/
func (a *Client) UpdateSettingsKrb5Domain(params *UpdateSettingsKrb5DomainParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSettingsKrb5DomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingsKrb5DomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSettingsKrb5Domain",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/settings/krb5/domains/{SettingsKrb5DomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingsKrb5DomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSettingsKrb5DomainNoContent), nil

}

/*
UpdateSettingsKrb5Realm Modify the krb5 realm settings.
*/
func (a *Client) UpdateSettingsKrb5Realm(params *UpdateSettingsKrb5RealmParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSettingsKrb5RealmNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingsKrb5RealmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSettingsKrb5Realm",
		Method:             "PUT",
		PathPattern:        "/platform/1/auth/settings/krb5/realms/{SettingsKrb5RealmId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingsKrb5RealmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSettingsKrb5RealmNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
