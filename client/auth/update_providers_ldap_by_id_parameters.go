// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateProvidersLdapByIDParams creates a new UpdateProvidersLdapByIDParams object
// with the default values initialized.
func NewUpdateProvidersLdapByIDParams() *UpdateProvidersLdapByIDParams {
	var ()
	return &UpdateProvidersLdapByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateProvidersLdapByIDParamsWithTimeout creates a new UpdateProvidersLdapByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateProvidersLdapByIDParamsWithTimeout(timeout time.Duration) *UpdateProvidersLdapByIDParams {
	var ()
	return &UpdateProvidersLdapByIDParams{

		timeout: timeout,
	}
}

// NewUpdateProvidersLdapByIDParamsWithContext creates a new UpdateProvidersLdapByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateProvidersLdapByIDParamsWithContext(ctx context.Context) *UpdateProvidersLdapByIDParams {
	var ()
	return &UpdateProvidersLdapByIDParams{

		Context: ctx,
	}
}

// NewUpdateProvidersLdapByIDParamsWithHTTPClient creates a new UpdateProvidersLdapByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateProvidersLdapByIDParamsWithHTTPClient(client *http.Client) *UpdateProvidersLdapByIDParams {
	var ()
	return &UpdateProvidersLdapByIDParams{
		HTTPClient: client,
	}
}

/*UpdateProvidersLdapByIDParams contains all the parameters to send to the API endpoint
for the update providers ldap by Id operation typically these are written to a http.Request
*/
type UpdateProvidersLdapByIDParams struct {

	/*ProvidersLdapID
	  Modify the LDAP provider.

	*/
	ProvidersLdapID string
	/*ProvidersLdapIDParams*/
	ProvidersLdapIDParams *models.ProvidersLdapIDParams
	/*Force
	  Ignore unresolvable server URIs.

	*/
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithTimeout(timeout time.Duration) *UpdateProvidersLdapByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithContext(ctx context.Context) *UpdateProvidersLdapByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithHTTPClient(client *http.Client) *UpdateProvidersLdapByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProvidersLdapID adds the providersLdapID to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithProvidersLdapID(providersLdapID string) *UpdateProvidersLdapByIDParams {
	o.SetProvidersLdapID(providersLdapID)
	return o
}

// SetProvidersLdapID adds the providersLdapId to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetProvidersLdapID(providersLdapID string) {
	o.ProvidersLdapID = providersLdapID
}

// WithProvidersLdapIDParams adds the providersLdapIDParams to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithProvidersLdapIDParams(providersLdapIDParams *models.ProvidersLdapIDParams) *UpdateProvidersLdapByIDParams {
	o.SetProvidersLdapIDParams(providersLdapIDParams)
	return o
}

// SetProvidersLdapIDParams adds the providersLdapIdParams to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetProvidersLdapIDParams(providersLdapIDParams *models.ProvidersLdapIDParams) {
	o.ProvidersLdapIDParams = providersLdapIDParams
}

// WithForce adds the force to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) WithForce(force *bool) *UpdateProvidersLdapByIDParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the update providers ldap by Id params
func (o *UpdateProvidersLdapByIDParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateProvidersLdapByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ProvidersLdapId
	if err := r.SetPathParam("ProvidersLdapId", o.ProvidersLdapID); err != nil {
		return err
	}

	if o.ProvidersLdapIDParams != nil {
		if err := r.SetBodyParam(o.ProvidersLdapIDParams); err != nil {
			return err
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
