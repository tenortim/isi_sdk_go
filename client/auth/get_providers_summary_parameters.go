// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetProvidersSummaryParams creates a new GetProvidersSummaryParams object
// with the default values initialized.
func NewGetProvidersSummaryParams() *GetProvidersSummaryParams {
	var ()
	return &GetProvidersSummaryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetProvidersSummaryParamsWithTimeout creates a new GetProvidersSummaryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetProvidersSummaryParamsWithTimeout(timeout time.Duration) *GetProvidersSummaryParams {
	var ()
	return &GetProvidersSummaryParams{

		timeout: timeout,
	}
}

// NewGetProvidersSummaryParamsWithContext creates a new GetProvidersSummaryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetProvidersSummaryParamsWithContext(ctx context.Context) *GetProvidersSummaryParams {
	var ()
	return &GetProvidersSummaryParams{

		Context: ctx,
	}
}

// NewGetProvidersSummaryParamsWithHTTPClient creates a new GetProvidersSummaryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetProvidersSummaryParamsWithHTTPClient(client *http.Client) *GetProvidersSummaryParams {
	var ()
	return &GetProvidersSummaryParams{
		HTTPClient: client,
	}
}

/*GetProvidersSummaryParams contains all the parameters to send to the API endpoint
for the get providers summary operation typically these are written to a http.Request
*/
type GetProvidersSummaryParams struct {

	/*Groupnet
	  Filter providers by groupnet.

	*/
	Groupnet *string
	/*Zone
	  Filter providers by zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get providers summary params
func (o *GetProvidersSummaryParams) WithTimeout(timeout time.Duration) *GetProvidersSummaryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get providers summary params
func (o *GetProvidersSummaryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get providers summary params
func (o *GetProvidersSummaryParams) WithContext(ctx context.Context) *GetProvidersSummaryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get providers summary params
func (o *GetProvidersSummaryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get providers summary params
func (o *GetProvidersSummaryParams) WithHTTPClient(client *http.Client) *GetProvidersSummaryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get providers summary params
func (o *GetProvidersSummaryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupnet adds the groupnet to the get providers summary params
func (o *GetProvidersSummaryParams) WithGroupnet(groupnet *string) *GetProvidersSummaryParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the get providers summary params
func (o *GetProvidersSummaryParams) SetGroupnet(groupnet *string) {
	o.Groupnet = groupnet
}

// WithZone adds the zone to the get providers summary params
func (o *GetProvidersSummaryParams) WithZone(zone *string) *GetProvidersSummaryParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get providers summary params
func (o *GetProvidersSummaryParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetProvidersSummaryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Groupnet != nil {

		// query param groupnet
		var qrGroupnet string
		if o.Groupnet != nil {
			qrGroupnet = *o.Groupnet
		}
		qGroupnet := qrGroupnet
		if qGroupnet != "" {
			if err := r.SetQueryParam("groupnet", qGroupnet); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
