// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListAuthGroupsParams creates a new ListAuthGroupsParams object
// with the default values initialized.
func NewListAuthGroupsParams() *ListAuthGroupsParams {
	var ()
	return &ListAuthGroupsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAuthGroupsParamsWithTimeout creates a new ListAuthGroupsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAuthGroupsParamsWithTimeout(timeout time.Duration) *ListAuthGroupsParams {
	var ()
	return &ListAuthGroupsParams{

		timeout: timeout,
	}
}

// NewListAuthGroupsParamsWithContext creates a new ListAuthGroupsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAuthGroupsParamsWithContext(ctx context.Context) *ListAuthGroupsParams {
	var ()
	return &ListAuthGroupsParams{

		Context: ctx,
	}
}

// NewListAuthGroupsParamsWithHTTPClient creates a new ListAuthGroupsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAuthGroupsParamsWithHTTPClient(client *http.Client) *ListAuthGroupsParams {
	var ()
	return &ListAuthGroupsParams{
		HTTPClient: client,
	}
}

/*ListAuthGroupsParams contains all the parameters to send to the API endpoint
for the list auth groups operation typically these are written to a http.Request
*/
type ListAuthGroupsParams struct {

	/*Cached
	  If true, only return cached objects.

	*/
	Cached *bool
	/*Domain
	  Filter groups by domain.

	*/
	Domain *string
	/*Filter
	  Filter groups by name prefix.

	*/
	Filter *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Provider
	  Filter groups by provider.

	*/
	Provider *string
	/*QueryMemberOf
	  Enumerate all groups that a group is a member of.

	*/
	QueryMemberOf *bool
	/*ResolveNames
	  Resolve names of personas.

	*/
	ResolveNames *bool
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Zone
	  Filter groups by zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list auth groups params
func (o *ListAuthGroupsParams) WithTimeout(timeout time.Duration) *ListAuthGroupsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list auth groups params
func (o *ListAuthGroupsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list auth groups params
func (o *ListAuthGroupsParams) WithContext(ctx context.Context) *ListAuthGroupsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list auth groups params
func (o *ListAuthGroupsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list auth groups params
func (o *ListAuthGroupsParams) WithHTTPClient(client *http.Client) *ListAuthGroupsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list auth groups params
func (o *ListAuthGroupsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCached adds the cached to the list auth groups params
func (o *ListAuthGroupsParams) WithCached(cached *bool) *ListAuthGroupsParams {
	o.SetCached(cached)
	return o
}

// SetCached adds the cached to the list auth groups params
func (o *ListAuthGroupsParams) SetCached(cached *bool) {
	o.Cached = cached
}

// WithDomain adds the domain to the list auth groups params
func (o *ListAuthGroupsParams) WithDomain(domain *string) *ListAuthGroupsParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the list auth groups params
func (o *ListAuthGroupsParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithFilter adds the filter to the list auth groups params
func (o *ListAuthGroupsParams) WithFilter(filter *string) *ListAuthGroupsParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the list auth groups params
func (o *ListAuthGroupsParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the list auth groups params
func (o *ListAuthGroupsParams) WithLimit(limit *int64) *ListAuthGroupsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list auth groups params
func (o *ListAuthGroupsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithProvider adds the provider to the list auth groups params
func (o *ListAuthGroupsParams) WithProvider(provider *string) *ListAuthGroupsParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the list auth groups params
func (o *ListAuthGroupsParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithQueryMemberOf adds the queryMemberOf to the list auth groups params
func (o *ListAuthGroupsParams) WithQueryMemberOf(queryMemberOf *bool) *ListAuthGroupsParams {
	o.SetQueryMemberOf(queryMemberOf)
	return o
}

// SetQueryMemberOf adds the queryMemberOf to the list auth groups params
func (o *ListAuthGroupsParams) SetQueryMemberOf(queryMemberOf *bool) {
	o.QueryMemberOf = queryMemberOf
}

// WithResolveNames adds the resolveNames to the list auth groups params
func (o *ListAuthGroupsParams) WithResolveNames(resolveNames *bool) *ListAuthGroupsParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the list auth groups params
func (o *ListAuthGroupsParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WithResume adds the resume to the list auth groups params
func (o *ListAuthGroupsParams) WithResume(resume *string) *ListAuthGroupsParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the list auth groups params
func (o *ListAuthGroupsParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithZone adds the zone to the list auth groups params
func (o *ListAuthGroupsParams) WithZone(zone *string) *ListAuthGroupsParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the list auth groups params
func (o *ListAuthGroupsParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ListAuthGroupsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cached != nil {

		// query param cached
		var qrCached bool
		if o.Cached != nil {
			qrCached = *o.Cached
		}
		qCached := swag.FormatBool(qrCached)
		if qCached != "" {
			if err := r.SetQueryParam("cached", qCached); err != nil {
				return err
			}
		}

	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string
		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {
			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.QueryMemberOf != nil {

		// query param query_member_of
		var qrQueryMemberOf bool
		if o.QueryMemberOf != nil {
			qrQueryMemberOf = *o.QueryMemberOf
		}
		qQueryMemberOf := swag.FormatBool(qrQueryMemberOf)
		if qQueryMemberOf != "" {
			if err := r.SetQueryParam("query_member_of", qQueryMemberOf); err != nil {
				return err
			}
		}

	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
