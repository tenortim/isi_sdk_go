// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteProvidersAdsByIDParams creates a new DeleteProvidersAdsByIDParams object
// with the default values initialized.
func NewDeleteProvidersAdsByIDParams() *DeleteProvidersAdsByIDParams {
	var ()
	return &DeleteProvidersAdsByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteProvidersAdsByIDParamsWithTimeout creates a new DeleteProvidersAdsByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteProvidersAdsByIDParamsWithTimeout(timeout time.Duration) *DeleteProvidersAdsByIDParams {
	var ()
	return &DeleteProvidersAdsByIDParams{

		timeout: timeout,
	}
}

// NewDeleteProvidersAdsByIDParamsWithContext creates a new DeleteProvidersAdsByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteProvidersAdsByIDParamsWithContext(ctx context.Context) *DeleteProvidersAdsByIDParams {
	var ()
	return &DeleteProvidersAdsByIDParams{

		Context: ctx,
	}
}

// NewDeleteProvidersAdsByIDParamsWithHTTPClient creates a new DeleteProvidersAdsByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteProvidersAdsByIDParamsWithHTTPClient(client *http.Client) *DeleteProvidersAdsByIDParams {
	var ()
	return &DeleteProvidersAdsByIDParams{
		HTTPClient: client,
	}
}

/*DeleteProvidersAdsByIDParams contains all the parameters to send to the API endpoint
for the delete providers ads by Id operation typically these are written to a http.Request
*/
type DeleteProvidersAdsByIDParams struct {

	/*ProvidersAdsID
	  Delete the ADS provider.

	*/
	ProvidersAdsID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) WithTimeout(timeout time.Duration) *DeleteProvidersAdsByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) WithContext(ctx context.Context) *DeleteProvidersAdsByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) WithHTTPClient(client *http.Client) *DeleteProvidersAdsByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithProvidersAdsID adds the providersAdsID to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) WithProvidersAdsID(providersAdsID string) *DeleteProvidersAdsByIDParams {
	o.SetProvidersAdsID(providersAdsID)
	return o
}

// SetProvidersAdsID adds the providersAdsId to the delete providers ads by Id params
func (o *DeleteProvidersAdsByIDParams) SetProvidersAdsID(providersAdsID string) {
	o.ProvidersAdsID = providersAdsID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteProvidersAdsByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ProvidersAdsId
	if err := r.SetPathParam("ProvidersAdsId", o.ProvidersAdsID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
