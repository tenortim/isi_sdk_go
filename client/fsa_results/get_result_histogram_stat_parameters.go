// Code generated by go-swagger; DO NOT EDIT.

package fsa_results

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetResultHistogramStatParams creates a new GetResultHistogramStatParams object
// with the default values initialized.
func NewGetResultHistogramStatParams() *GetResultHistogramStatParams {
	var ()
	return &GetResultHistogramStatParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetResultHistogramStatParamsWithTimeout creates a new GetResultHistogramStatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetResultHistogramStatParamsWithTimeout(timeout time.Duration) *GetResultHistogramStatParams {
	var ()
	return &GetResultHistogramStatParams{

		timeout: timeout,
	}
}

// NewGetResultHistogramStatParamsWithContext creates a new GetResultHistogramStatParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetResultHistogramStatParamsWithContext(ctx context.Context) *GetResultHistogramStatParams {
	var ()
	return &GetResultHistogramStatParams{

		Context: ctx,
	}
}

// NewGetResultHistogramStatParamsWithHTTPClient creates a new GetResultHistogramStatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetResultHistogramStatParamsWithHTTPClient(client *http.Client) *GetResultHistogramStatParams {
	var ()
	return &GetResultHistogramStatParams{
		HTTPClient: client,
	}
}

/*GetResultHistogramStatParams contains all the parameters to send to the API endpoint
for the get result histogram stat operation typically these are written to a http.Request
*/
type GetResultHistogramStatParams struct {

	/*ID*/
	ID string
	/*ResultHistogramStat
	  This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.

	*/
	ResultHistogramStat string
	/*AtimeFilter
	  Filter according to file accessed time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid atime filter values may be found by performing a histogram breakout by atime and viewing the resulting key values.

	*/
	AtimeFilter *int64
	/*AttributeFilter
	  Filter according to the name of a file user attribute.

	*/
	AttributeFilter *string
	/*CompReport
	  Result set identifier for comparison of database results.

	*/
	CompReport *int64
	/*CtimeFilter
	  Filter according to file modified time, where the filter value specifies a negative number of seconds representing a time before the begin time of the report. The list of valid ctime filter values may be found by performing a histogram breakout by ctime and viewing the resulting key values.

	*/
	CtimeFilter *int64
	/*DirectoryFilter
	  Filter according to a specific directory, which includes all of its subdirectories.

	*/
	DirectoryFilter *string
	/*DiskPoolFilter
	  Filter according to the name of a disk pool, which is a set of drives that represent an independent failure domain.

	*/
	DiskPoolFilter *string
	/*LogSizeFilter
	  Filter according to file logical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by logical size. The list of valid log_size filter values may be found by performing a histogram breakout by log_size and viewing the resulting key values.

	*/
	LogSizeFilter *int64
	/*NodePoolFilter
	  Filter according to the name of a node pool, which is a set of disk pools that belong to nodes of the same equivalence class.

	*/
	NodePoolFilter *string
	/*PathExtFilter
	  Filter according to the name of a single file extension.

	*/
	PathExtFilter *string
	/*PhysSizeFilter
	  Filter according to file physical size, where the filter value specifies the lower bound in bytes to a set of files that have been grouped by physical size. The list of valid phys_size filter values may be found by performing a histogram breakout by phys_size and viewing the resulting key values.

	*/
	PhysSizeFilter *int64
	/*TierFilter
	  Filter according to the name of a storage tier, which is a user-created set of node pools.

	*/
	TierFilter *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithTimeout(timeout time.Duration) *GetResultHistogramStatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithContext(ctx context.Context) *GetResultHistogramStatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithHTTPClient(client *http.Client) *GetResultHistogramStatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithID(id string) *GetResultHistogramStatParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetID(id string) {
	o.ID = id
}

// WithResultHistogramStat adds the resultHistogramStat to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithResultHistogramStat(resultHistogramStat string) *GetResultHistogramStatParams {
	o.SetResultHistogramStat(resultHistogramStat)
	return o
}

// SetResultHistogramStat adds the resultHistogramStat to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetResultHistogramStat(resultHistogramStat string) {
	o.ResultHistogramStat = resultHistogramStat
}

// WithAtimeFilter adds the atimeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithAtimeFilter(atimeFilter *int64) *GetResultHistogramStatParams {
	o.SetAtimeFilter(atimeFilter)
	return o
}

// SetAtimeFilter adds the atimeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetAtimeFilter(atimeFilter *int64) {
	o.AtimeFilter = atimeFilter
}

// WithAttributeFilter adds the attributeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithAttributeFilter(attributeFilter *string) *GetResultHistogramStatParams {
	o.SetAttributeFilter(attributeFilter)
	return o
}

// SetAttributeFilter adds the attributeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetAttributeFilter(attributeFilter *string) {
	o.AttributeFilter = attributeFilter
}

// WithCompReport adds the compReport to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithCompReport(compReport *int64) *GetResultHistogramStatParams {
	o.SetCompReport(compReport)
	return o
}

// SetCompReport adds the compReport to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetCompReport(compReport *int64) {
	o.CompReport = compReport
}

// WithCtimeFilter adds the ctimeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithCtimeFilter(ctimeFilter *int64) *GetResultHistogramStatParams {
	o.SetCtimeFilter(ctimeFilter)
	return o
}

// SetCtimeFilter adds the ctimeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetCtimeFilter(ctimeFilter *int64) {
	o.CtimeFilter = ctimeFilter
}

// WithDirectoryFilter adds the directoryFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithDirectoryFilter(directoryFilter *string) *GetResultHistogramStatParams {
	o.SetDirectoryFilter(directoryFilter)
	return o
}

// SetDirectoryFilter adds the directoryFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetDirectoryFilter(directoryFilter *string) {
	o.DirectoryFilter = directoryFilter
}

// WithDiskPoolFilter adds the diskPoolFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithDiskPoolFilter(diskPoolFilter *string) *GetResultHistogramStatParams {
	o.SetDiskPoolFilter(diskPoolFilter)
	return o
}

// SetDiskPoolFilter adds the diskPoolFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetDiskPoolFilter(diskPoolFilter *string) {
	o.DiskPoolFilter = diskPoolFilter
}

// WithLogSizeFilter adds the logSizeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithLogSizeFilter(logSizeFilter *int64) *GetResultHistogramStatParams {
	o.SetLogSizeFilter(logSizeFilter)
	return o
}

// SetLogSizeFilter adds the logSizeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetLogSizeFilter(logSizeFilter *int64) {
	o.LogSizeFilter = logSizeFilter
}

// WithNodePoolFilter adds the nodePoolFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithNodePoolFilter(nodePoolFilter *string) *GetResultHistogramStatParams {
	o.SetNodePoolFilter(nodePoolFilter)
	return o
}

// SetNodePoolFilter adds the nodePoolFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetNodePoolFilter(nodePoolFilter *string) {
	o.NodePoolFilter = nodePoolFilter
}

// WithPathExtFilter adds the pathExtFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithPathExtFilter(pathExtFilter *string) *GetResultHistogramStatParams {
	o.SetPathExtFilter(pathExtFilter)
	return o
}

// SetPathExtFilter adds the pathExtFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetPathExtFilter(pathExtFilter *string) {
	o.PathExtFilter = pathExtFilter
}

// WithPhysSizeFilter adds the physSizeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithPhysSizeFilter(physSizeFilter *int64) *GetResultHistogramStatParams {
	o.SetPhysSizeFilter(physSizeFilter)
	return o
}

// SetPhysSizeFilter adds the physSizeFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetPhysSizeFilter(physSizeFilter *int64) {
	o.PhysSizeFilter = physSizeFilter
}

// WithTierFilter adds the tierFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) WithTierFilter(tierFilter *string) *GetResultHistogramStatParams {
	o.SetTierFilter(tierFilter)
	return o
}

// SetTierFilter adds the tierFilter to the get result histogram stat params
func (o *GetResultHistogramStatParams) SetTierFilter(tierFilter *string) {
	o.TierFilter = tierFilter
}

// WriteToRequest writes these params to a swagger request
func (o *GetResultHistogramStatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Id
	if err := r.SetPathParam("Id", o.ID); err != nil {
		return err
	}

	// path param ResultHistogramStat
	if err := r.SetPathParam("ResultHistogramStat", o.ResultHistogramStat); err != nil {
		return err
	}

	if o.AtimeFilter != nil {

		// query param atime_filter
		var qrAtimeFilter int64
		if o.AtimeFilter != nil {
			qrAtimeFilter = *o.AtimeFilter
		}
		qAtimeFilter := swag.FormatInt64(qrAtimeFilter)
		if qAtimeFilter != "" {
			if err := r.SetQueryParam("atime_filter", qAtimeFilter); err != nil {
				return err
			}
		}

	}

	if o.AttributeFilter != nil {

		// query param attribute_filter
		var qrAttributeFilter string
		if o.AttributeFilter != nil {
			qrAttributeFilter = *o.AttributeFilter
		}
		qAttributeFilter := qrAttributeFilter
		if qAttributeFilter != "" {
			if err := r.SetQueryParam("attribute_filter", qAttributeFilter); err != nil {
				return err
			}
		}

	}

	if o.CompReport != nil {

		// query param comp_report
		var qrCompReport int64
		if o.CompReport != nil {
			qrCompReport = *o.CompReport
		}
		qCompReport := swag.FormatInt64(qrCompReport)
		if qCompReport != "" {
			if err := r.SetQueryParam("comp_report", qCompReport); err != nil {
				return err
			}
		}

	}

	if o.CtimeFilter != nil {

		// query param ctime_filter
		var qrCtimeFilter int64
		if o.CtimeFilter != nil {
			qrCtimeFilter = *o.CtimeFilter
		}
		qCtimeFilter := swag.FormatInt64(qrCtimeFilter)
		if qCtimeFilter != "" {
			if err := r.SetQueryParam("ctime_filter", qCtimeFilter); err != nil {
				return err
			}
		}

	}

	if o.DirectoryFilter != nil {

		// query param directory_filter
		var qrDirectoryFilter string
		if o.DirectoryFilter != nil {
			qrDirectoryFilter = *o.DirectoryFilter
		}
		qDirectoryFilter := qrDirectoryFilter
		if qDirectoryFilter != "" {
			if err := r.SetQueryParam("directory_filter", qDirectoryFilter); err != nil {
				return err
			}
		}

	}

	if o.DiskPoolFilter != nil {

		// query param disk_pool_filter
		var qrDiskPoolFilter string
		if o.DiskPoolFilter != nil {
			qrDiskPoolFilter = *o.DiskPoolFilter
		}
		qDiskPoolFilter := qrDiskPoolFilter
		if qDiskPoolFilter != "" {
			if err := r.SetQueryParam("disk_pool_filter", qDiskPoolFilter); err != nil {
				return err
			}
		}

	}

	if o.LogSizeFilter != nil {

		// query param log_size_filter
		var qrLogSizeFilter int64
		if o.LogSizeFilter != nil {
			qrLogSizeFilter = *o.LogSizeFilter
		}
		qLogSizeFilter := swag.FormatInt64(qrLogSizeFilter)
		if qLogSizeFilter != "" {
			if err := r.SetQueryParam("log_size_filter", qLogSizeFilter); err != nil {
				return err
			}
		}

	}

	if o.NodePoolFilter != nil {

		// query param node_pool_filter
		var qrNodePoolFilter string
		if o.NodePoolFilter != nil {
			qrNodePoolFilter = *o.NodePoolFilter
		}
		qNodePoolFilter := qrNodePoolFilter
		if qNodePoolFilter != "" {
			if err := r.SetQueryParam("node_pool_filter", qNodePoolFilter); err != nil {
				return err
			}
		}

	}

	if o.PathExtFilter != nil {

		// query param path_ext_filter
		var qrPathExtFilter string
		if o.PathExtFilter != nil {
			qrPathExtFilter = *o.PathExtFilter
		}
		qPathExtFilter := qrPathExtFilter
		if qPathExtFilter != "" {
			if err := r.SetQueryParam("path_ext_filter", qPathExtFilter); err != nil {
				return err
			}
		}

	}

	if o.PhysSizeFilter != nil {

		// query param phys_size_filter
		var qrPhysSizeFilter int64
		if o.PhysSizeFilter != nil {
			qrPhysSizeFilter = *o.PhysSizeFilter
		}
		qPhysSizeFilter := swag.FormatInt64(qrPhysSizeFilter)
		if qPhysSizeFilter != "" {
			if err := r.SetQueryParam("phys_size_filter", qPhysSizeFilter); err != nil {
				return err
			}
		}

	}

	if o.TierFilter != nil {

		// query param tier_filter
		var qrTierFilter string
		if o.TierFilter != nil {
			qrTierFilter = *o.TierFilter
		}
		qTierFilter := qrTierFilter
		if qTierFilter != "" {
			if err := r.SetQueryParam("tier_filter", qTierFilter); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
