// Code generated by go-swagger; DO NOT EDIT.

package fsa_results

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fsa results API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fsa results API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetHistogramStatBy This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.
*/
func (a *Client) GetHistogramStatBy(params *GetHistogramStatByParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistogramStatByOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramStatByParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHistogramStatBy",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/histogram/{Stat}/by",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHistogramStatByReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHistogramStatByOK), nil

}

/*
GetHistogramStatByBreakout This resource retrieves a histogram breakout for an individual FSA result set. ID in the resource path is the result set ID.
*/
func (a *Client) GetHistogramStatByBreakout(params *GetHistogramStatByBreakoutParams, authInfo runtime.ClientAuthInfoWriter) (*GetHistogramStatByBreakoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHistogramStatByBreakoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHistogramStatByBreakout",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/histogram/{Stat}/by/{HistogramStatByBreakout}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHistogramStatByBreakoutReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHistogramStatByBreakoutOK), nil

}

/*
GetResultDirectories This resource retrieves directory information. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultDirectories(params *GetResultDirectoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultDirectoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultDirectoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultDirectories",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultDirectoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultDirectoriesOK), nil

}

/*
GetResultDirectory This resource retrieves directory information. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultDirectory(params *GetResultDirectoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultDirectoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultDirectory",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/directories/{ResultDirectoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultDirectoryOK), nil

}

/*
GetResultHistogram This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultHistogram(params *GetResultHistogramParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultHistogramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultHistogramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultHistogram",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/histogram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultHistogramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultHistogramOK), nil

}

/*
GetResultHistogramStat This resource retrieves a histogram of file counts for an individual FSA result set. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultHistogramStat(params *GetResultHistogramStatParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultHistogramStatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultHistogramStatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultHistogramStat",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/histogram/{ResultHistogramStat}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultHistogramStatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultHistogramStatOK), nil

}

/*
GetResultTopDir This resource retrieves the top directories. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultTopDir(params *GetResultTopDirParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultTopDirOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultTopDirParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultTopDir",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/top-dirs/{ResultTopDirId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultTopDirReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultTopDirOK), nil

}

/*
GetResultTopDirs This resource retrieves the top directories. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultTopDirs(params *GetResultTopDirsParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultTopDirsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultTopDirsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultTopDirs",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/top-dirs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultTopDirsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultTopDirsOK), nil

}

/*
GetResultTopFile This resource retrieves the top files. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultTopFile(params *GetResultTopFileParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultTopFileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultTopFileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultTopFile",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/top-files/{ResultTopFileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultTopFileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultTopFileOK), nil

}

/*
GetResultTopFiles This resource retrieves the top files. ID in the resource path is the result set ID.
*/
func (a *Client) GetResultTopFiles(params *GetResultTopFilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetResultTopFilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResultTopFilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResultTopFiles",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{Id}/top-files",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetResultTopFilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResultTopFilesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
