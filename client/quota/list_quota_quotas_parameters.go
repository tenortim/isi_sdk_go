// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListQuotaQuotasParams creates a new ListQuotaQuotasParams object
// with the default values initialized.
func NewListQuotaQuotasParams() *ListQuotaQuotasParams {
	var ()
	return &ListQuotaQuotasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListQuotaQuotasParamsWithTimeout creates a new ListQuotaQuotasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListQuotaQuotasParamsWithTimeout(timeout time.Duration) *ListQuotaQuotasParams {
	var ()
	return &ListQuotaQuotasParams{

		timeout: timeout,
	}
}

// NewListQuotaQuotasParamsWithContext creates a new ListQuotaQuotasParams object
// with the default values initialized, and the ability to set a context for a request
func NewListQuotaQuotasParamsWithContext(ctx context.Context) *ListQuotaQuotasParams {
	var ()
	return &ListQuotaQuotasParams{

		Context: ctx,
	}
}

// NewListQuotaQuotasParamsWithHTTPClient creates a new ListQuotaQuotasParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListQuotaQuotasParamsWithHTTPClient(client *http.Client) *ListQuotaQuotasParams {
	var ()
	return &ListQuotaQuotasParams{
		HTTPClient: client,
	}
}

/*ListQuotaQuotasParams contains all the parameters to send to the API endpoint
for the list quota quotas operation typically these are written to a http.Request
*/
type ListQuotaQuotasParams struct {

	/*Enforced
	  Only list quotas with this enforcement (non-accounting).

	*/
	Enforced *bool
	/*Exceeded
	  Set to true to only list quotas which have exceeded one or more of their thresholds.

	*/
	Exceeded *bool
	/*IncludeSnapshots
	  Only list quotas with this setting for include_snapshots.

	*/
	IncludeSnapshots *bool
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Path
	  Only list quotas matching this path (see also recurse_path_*).

	*/
	Path *string
	/*Persona
	  Only list user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.

	*/
	Persona *string
	/*RecursePathChildren
	  If used with the path argument, match all quotas at that path or any descendent sub-directory.

	*/
	RecursePathChildren *bool
	/*RecursePathParents
	  If used with the path argument, match all quotas at that path or any parent directory.

	*/
	RecursePathParents *bool
	/*ReportID
	  Use the named report as a source rather than the live quotas. See the /q/quota/reports resource for a list of valid reports.

	*/
	ReportID *string
	/*ResolveNames
	  If true, resolve group and user names in personas.

	*/
	ResolveNames *bool
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Type
	  Only list quotas matching this type.

	*/
	Type *string
	/*Zone
	  Optional named zone to use for user and group resolution.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list quota quotas params
func (o *ListQuotaQuotasParams) WithTimeout(timeout time.Duration) *ListQuotaQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list quota quotas params
func (o *ListQuotaQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list quota quotas params
func (o *ListQuotaQuotasParams) WithContext(ctx context.Context) *ListQuotaQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list quota quotas params
func (o *ListQuotaQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list quota quotas params
func (o *ListQuotaQuotasParams) WithHTTPClient(client *http.Client) *ListQuotaQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list quota quotas params
func (o *ListQuotaQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnforced adds the enforced to the list quota quotas params
func (o *ListQuotaQuotasParams) WithEnforced(enforced *bool) *ListQuotaQuotasParams {
	o.SetEnforced(enforced)
	return o
}

// SetEnforced adds the enforced to the list quota quotas params
func (o *ListQuotaQuotasParams) SetEnforced(enforced *bool) {
	o.Enforced = enforced
}

// WithExceeded adds the exceeded to the list quota quotas params
func (o *ListQuotaQuotasParams) WithExceeded(exceeded *bool) *ListQuotaQuotasParams {
	o.SetExceeded(exceeded)
	return o
}

// SetExceeded adds the exceeded to the list quota quotas params
func (o *ListQuotaQuotasParams) SetExceeded(exceeded *bool) {
	o.Exceeded = exceeded
}

// WithIncludeSnapshots adds the includeSnapshots to the list quota quotas params
func (o *ListQuotaQuotasParams) WithIncludeSnapshots(includeSnapshots *bool) *ListQuotaQuotasParams {
	o.SetIncludeSnapshots(includeSnapshots)
	return o
}

// SetIncludeSnapshots adds the includeSnapshots to the list quota quotas params
func (o *ListQuotaQuotasParams) SetIncludeSnapshots(includeSnapshots *bool) {
	o.IncludeSnapshots = includeSnapshots
}

// WithLimit adds the limit to the list quota quotas params
func (o *ListQuotaQuotasParams) WithLimit(limit *int64) *ListQuotaQuotasParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list quota quotas params
func (o *ListQuotaQuotasParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPath adds the path to the list quota quotas params
func (o *ListQuotaQuotasParams) WithPath(path *string) *ListQuotaQuotasParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the list quota quotas params
func (o *ListQuotaQuotasParams) SetPath(path *string) {
	o.Path = path
}

// WithPersona adds the persona to the list quota quotas params
func (o *ListQuotaQuotasParams) WithPersona(persona *string) *ListQuotaQuotasParams {
	o.SetPersona(persona)
	return o
}

// SetPersona adds the persona to the list quota quotas params
func (o *ListQuotaQuotasParams) SetPersona(persona *string) {
	o.Persona = persona
}

// WithRecursePathChildren adds the recursePathChildren to the list quota quotas params
func (o *ListQuotaQuotasParams) WithRecursePathChildren(recursePathChildren *bool) *ListQuotaQuotasParams {
	o.SetRecursePathChildren(recursePathChildren)
	return o
}

// SetRecursePathChildren adds the recursePathChildren to the list quota quotas params
func (o *ListQuotaQuotasParams) SetRecursePathChildren(recursePathChildren *bool) {
	o.RecursePathChildren = recursePathChildren
}

// WithRecursePathParents adds the recursePathParents to the list quota quotas params
func (o *ListQuotaQuotasParams) WithRecursePathParents(recursePathParents *bool) *ListQuotaQuotasParams {
	o.SetRecursePathParents(recursePathParents)
	return o
}

// SetRecursePathParents adds the recursePathParents to the list quota quotas params
func (o *ListQuotaQuotasParams) SetRecursePathParents(recursePathParents *bool) {
	o.RecursePathParents = recursePathParents
}

// WithReportID adds the reportID to the list quota quotas params
func (o *ListQuotaQuotasParams) WithReportID(reportID *string) *ListQuotaQuotasParams {
	o.SetReportID(reportID)
	return o
}

// SetReportID adds the reportId to the list quota quotas params
func (o *ListQuotaQuotasParams) SetReportID(reportID *string) {
	o.ReportID = reportID
}

// WithResolveNames adds the resolveNames to the list quota quotas params
func (o *ListQuotaQuotasParams) WithResolveNames(resolveNames *bool) *ListQuotaQuotasParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the list quota quotas params
func (o *ListQuotaQuotasParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WithResume adds the resume to the list quota quotas params
func (o *ListQuotaQuotasParams) WithResume(resume *string) *ListQuotaQuotasParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the list quota quotas params
func (o *ListQuotaQuotasParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithType adds the typeVar to the list quota quotas params
func (o *ListQuotaQuotasParams) WithType(typeVar *string) *ListQuotaQuotasParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the list quota quotas params
func (o *ListQuotaQuotasParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithZone adds the zone to the list quota quotas params
func (o *ListQuotaQuotasParams) WithZone(zone *string) *ListQuotaQuotasParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the list quota quotas params
func (o *ListQuotaQuotasParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ListQuotaQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enforced != nil {

		// query param enforced
		var qrEnforced bool
		if o.Enforced != nil {
			qrEnforced = *o.Enforced
		}
		qEnforced := swag.FormatBool(qrEnforced)
		if qEnforced != "" {
			if err := r.SetQueryParam("enforced", qEnforced); err != nil {
				return err
			}
		}

	}

	if o.Exceeded != nil {

		// query param exceeded
		var qrExceeded bool
		if o.Exceeded != nil {
			qrExceeded = *o.Exceeded
		}
		qExceeded := swag.FormatBool(qrExceeded)
		if qExceeded != "" {
			if err := r.SetQueryParam("exceeded", qExceeded); err != nil {
				return err
			}
		}

	}

	if o.IncludeSnapshots != nil {

		// query param include_snapshots
		var qrIncludeSnapshots bool
		if o.IncludeSnapshots != nil {
			qrIncludeSnapshots = *o.IncludeSnapshots
		}
		qIncludeSnapshots := swag.FormatBool(qrIncludeSnapshots)
		if qIncludeSnapshots != "" {
			if err := r.SetQueryParam("include_snapshots", qIncludeSnapshots); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Persona != nil {

		// query param persona
		var qrPersona string
		if o.Persona != nil {
			qrPersona = *o.Persona
		}
		qPersona := qrPersona
		if qPersona != "" {
			if err := r.SetQueryParam("persona", qPersona); err != nil {
				return err
			}
		}

	}

	if o.RecursePathChildren != nil {

		// query param recurse_path_children
		var qrRecursePathChildren bool
		if o.RecursePathChildren != nil {
			qrRecursePathChildren = *o.RecursePathChildren
		}
		qRecursePathChildren := swag.FormatBool(qrRecursePathChildren)
		if qRecursePathChildren != "" {
			if err := r.SetQueryParam("recurse_path_children", qRecursePathChildren); err != nil {
				return err
			}
		}

	}

	if o.RecursePathParents != nil {

		// query param recurse_path_parents
		var qrRecursePathParents bool
		if o.RecursePathParents != nil {
			qrRecursePathParents = *o.RecursePathParents
		}
		qRecursePathParents := swag.FormatBool(qrRecursePathParents)
		if qRecursePathParents != "" {
			if err := r.SetQueryParam("recurse_path_parents", qRecursePathParents); err != nil {
				return err
			}
		}

	}

	if o.ReportID != nil {

		// query param report_id
		var qrReportID string
		if o.ReportID != nil {
			qrReportID = *o.ReportID
		}
		qReportID := qrReportID
		if qReportID != "" {
			if err := r.SetQueryParam("report_id", qReportID); err != nil {
				return err
			}
		}

	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
