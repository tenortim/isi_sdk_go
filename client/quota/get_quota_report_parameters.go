// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetQuotaReportParams creates a new GetQuotaReportParams object
// with the default values initialized.
func NewGetQuotaReportParams() *GetQuotaReportParams {
	var ()
	return &GetQuotaReportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetQuotaReportParamsWithTimeout creates a new GetQuotaReportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetQuotaReportParamsWithTimeout(timeout time.Duration) *GetQuotaReportParams {
	var ()
	return &GetQuotaReportParams{

		timeout: timeout,
	}
}

// NewGetQuotaReportParamsWithContext creates a new GetQuotaReportParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetQuotaReportParamsWithContext(ctx context.Context) *GetQuotaReportParams {
	var ()
	return &GetQuotaReportParams{

		Context: ctx,
	}
}

// NewGetQuotaReportParamsWithHTTPClient creates a new GetQuotaReportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetQuotaReportParamsWithHTTPClient(client *http.Client) *GetQuotaReportParams {
	var ()
	return &GetQuotaReportParams{
		HTTPClient: client,
	}
}

/*GetQuotaReportParams contains all the parameters to send to the API endpoint
for the get quota report operation typically these are written to a http.Request
*/
type GetQuotaReportParams struct {

	/*QuotaReportID
	  Retrieve report data (XML) or contents (meta-data).

	*/
	QuotaReportID string
	/*Contents
	  Display JSON meta-data contents instead of report data.

	*/
	Contents *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get quota report params
func (o *GetQuotaReportParams) WithTimeout(timeout time.Duration) *GetQuotaReportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get quota report params
func (o *GetQuotaReportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get quota report params
func (o *GetQuotaReportParams) WithContext(ctx context.Context) *GetQuotaReportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get quota report params
func (o *GetQuotaReportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get quota report params
func (o *GetQuotaReportParams) WithHTTPClient(client *http.Client) *GetQuotaReportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get quota report params
func (o *GetQuotaReportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithQuotaReportID adds the quotaReportID to the get quota report params
func (o *GetQuotaReportParams) WithQuotaReportID(quotaReportID string) *GetQuotaReportParams {
	o.SetQuotaReportID(quotaReportID)
	return o
}

// SetQuotaReportID adds the quotaReportId to the get quota report params
func (o *GetQuotaReportParams) SetQuotaReportID(quotaReportID string) {
	o.QuotaReportID = quotaReportID
}

// WithContents adds the contents to the get quota report params
func (o *GetQuotaReportParams) WithContents(contents *bool) *GetQuotaReportParams {
	o.SetContents(contents)
	return o
}

// SetContents adds the contents to the get quota report params
func (o *GetQuotaReportParams) SetContents(contents *bool) {
	o.Contents = contents
}

// WriteToRequest writes these params to a swagger request
func (o *GetQuotaReportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param QuotaReportId
	if err := r.SetPathParam("QuotaReportId", o.QuotaReportID); err != nil {
		return err
	}

	if o.Contents != nil {

		// query param contents
		var qrContents bool
		if o.Contents != nil {
			qrContents = *o.Contents
		}
		qContents := swag.FormatBool(qrContents)
		if qContents != "" {
			if err := r.SetQueryParam("contents", qContents); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
