// Code generated by go-swagger; DO NOT EDIT.

package quota

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteQuotaQuotasParams creates a new DeleteQuotaQuotasParams object
// with the default values initialized.
func NewDeleteQuotaQuotasParams() *DeleteQuotaQuotasParams {
	var ()
	return &DeleteQuotaQuotasParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteQuotaQuotasParamsWithTimeout creates a new DeleteQuotaQuotasParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteQuotaQuotasParamsWithTimeout(timeout time.Duration) *DeleteQuotaQuotasParams {
	var ()
	return &DeleteQuotaQuotasParams{

		timeout: timeout,
	}
}

// NewDeleteQuotaQuotasParamsWithContext creates a new DeleteQuotaQuotasParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteQuotaQuotasParamsWithContext(ctx context.Context) *DeleteQuotaQuotasParams {
	var ()
	return &DeleteQuotaQuotasParams{

		Context: ctx,
	}
}

// NewDeleteQuotaQuotasParamsWithHTTPClient creates a new DeleteQuotaQuotasParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteQuotaQuotasParamsWithHTTPClient(client *http.Client) *DeleteQuotaQuotasParams {
	var ()
	return &DeleteQuotaQuotasParams{
		HTTPClient: client,
	}
}

/*DeleteQuotaQuotasParams contains all the parameters to send to the API endpoint
for the delete quota quotas operation typically these are written to a http.Request
*/
type DeleteQuotaQuotasParams struct {

	/*Enforced
	  Only delete quotas with this enforcement (non-accounting).

	*/
	Enforced *bool
	/*IncludeSnapshots
	  Only delete quotas with this setting for include_snapshots.

	*/
	IncludeSnapshots *bool
	/*Path
	  Only delete quotas matching this path (see also recurse_path_*).

	*/
	Path *string
	/*Persona
	  Only delete user or group quotas matching this persona (must be used with the corresponding type argument).  Format is <PERSONA_TYPE>:<string/integer>, where PERSONA_TYPE is one of USER, GROUP, SID, ID, or GID.

	*/
	Persona *string
	/*RecursePathChildren
	  If used with the path argument, delete all quotas at that path or any descendent sub-directory.

	*/
	RecursePathChildren *bool
	/*RecursePathParents
	  If used with the path argument, delete all quotas at that path or any parent directory.

	*/
	RecursePathParents *bool
	/*Type
	  Only delete quotas matching this type.

	*/
	Type *string
	/*Zone
	  Optional named zone to use for user and group resolution.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithTimeout(timeout time.Duration) *DeleteQuotaQuotasParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithContext(ctx context.Context) *DeleteQuotaQuotasParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithHTTPClient(client *http.Client) *DeleteQuotaQuotasParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnforced adds the enforced to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithEnforced(enforced *bool) *DeleteQuotaQuotasParams {
	o.SetEnforced(enforced)
	return o
}

// SetEnforced adds the enforced to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetEnforced(enforced *bool) {
	o.Enforced = enforced
}

// WithIncludeSnapshots adds the includeSnapshots to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithIncludeSnapshots(includeSnapshots *bool) *DeleteQuotaQuotasParams {
	o.SetIncludeSnapshots(includeSnapshots)
	return o
}

// SetIncludeSnapshots adds the includeSnapshots to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetIncludeSnapshots(includeSnapshots *bool) {
	o.IncludeSnapshots = includeSnapshots
}

// WithPath adds the path to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithPath(path *string) *DeleteQuotaQuotasParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetPath(path *string) {
	o.Path = path
}

// WithPersona adds the persona to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithPersona(persona *string) *DeleteQuotaQuotasParams {
	o.SetPersona(persona)
	return o
}

// SetPersona adds the persona to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetPersona(persona *string) {
	o.Persona = persona
}

// WithRecursePathChildren adds the recursePathChildren to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithRecursePathChildren(recursePathChildren *bool) *DeleteQuotaQuotasParams {
	o.SetRecursePathChildren(recursePathChildren)
	return o
}

// SetRecursePathChildren adds the recursePathChildren to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetRecursePathChildren(recursePathChildren *bool) {
	o.RecursePathChildren = recursePathChildren
}

// WithRecursePathParents adds the recursePathParents to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithRecursePathParents(recursePathParents *bool) *DeleteQuotaQuotasParams {
	o.SetRecursePathParents(recursePathParents)
	return o
}

// SetRecursePathParents adds the recursePathParents to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetRecursePathParents(recursePathParents *bool) {
	o.RecursePathParents = recursePathParents
}

// WithType adds the typeVar to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithType(typeVar *string) *DeleteQuotaQuotasParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WithZone adds the zone to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) WithZone(zone *string) *DeleteQuotaQuotasParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the delete quota quotas params
func (o *DeleteQuotaQuotasParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteQuotaQuotasParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Enforced != nil {

		// query param enforced
		var qrEnforced bool
		if o.Enforced != nil {
			qrEnforced = *o.Enforced
		}
		qEnforced := swag.FormatBool(qrEnforced)
		if qEnforced != "" {
			if err := r.SetQueryParam("enforced", qEnforced); err != nil {
				return err
			}
		}

	}

	if o.IncludeSnapshots != nil {

		// query param include_snapshots
		var qrIncludeSnapshots bool
		if o.IncludeSnapshots != nil {
			qrIncludeSnapshots = *o.IncludeSnapshots
		}
		qIncludeSnapshots := swag.FormatBool(qrIncludeSnapshots)
		if qIncludeSnapshots != "" {
			if err := r.SetQueryParam("include_snapshots", qIncludeSnapshots); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Persona != nil {

		// query param persona
		var qrPersona string
		if o.Persona != nil {
			qrPersona = *o.Persona
		}
		qPersona := qrPersona
		if qPersona != "" {
			if err := r.SetQueryParam("persona", qPersona); err != nil {
				return err
			}
		}

	}

	if o.RecursePathChildren != nil {

		// query param recurse_path_children
		var qrRecursePathChildren bool
		if o.RecursePathChildren != nil {
			qrRecursePathChildren = *o.RecursePathChildren
		}
		qRecursePathChildren := swag.FormatBool(qrRecursePathChildren)
		if qRecursePathChildren != "" {
			if err := r.SetQueryParam("recurse_path_children", qRecursePathChildren); err != nil {
				return err
			}
		}

	}

	if o.RecursePathParents != nil {

		// query param recurse_path_parents
		var qrRecursePathParents bool
		if o.RecursePathParents != nil {
			qrRecursePathParents = *o.RecursePathParents
		}
		qRecursePathParents := swag.FormatBool(qrRecursePathParents)
		if qRecursePathParents != "" {
			if err := r.SetQueryParam("recurse_path_parents", qRecursePathParents); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
