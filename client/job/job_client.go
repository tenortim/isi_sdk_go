// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new job API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for job API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateJobJob Queue a new instance of a job type.
*/
func (a *Client) CreateJobJob(params *CreateJobJobParams, authInfo runtime.ClientAuthInfoWriter) (*CreateJobJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createJobJob",
		Method:             "POST",
		PathPattern:        "/platform/3/job/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateJobJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateJobJobOK), nil

}

/*
CreateJobPolicy Create a new job impact policy.
*/
func (a *Client) CreateJobPolicy(params *CreateJobPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateJobPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateJobPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createJobPolicy",
		Method:             "POST",
		PathPattern:        "/platform/1/job/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateJobPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateJobPolicyOK), nil

}

/*
DeleteJobPolicy Delete a job impact policy.  System policies may not be deleted.
*/
func (a *Client) DeleteJobPolicy(params *DeleteJobPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteJobPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteJobPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteJobPolicy",
		Method:             "DELETE",
		PathPattern:        "/platform/1/job/policies/{JobPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteJobPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteJobPolicyNoContent), nil

}

/*
GetJobEvents List job events.
*/
func (a *Client) GetJobEvents(params *GetJobEventsParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobEventsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobEvents",
		Method:             "GET",
		PathPattern:        "/platform/3/job/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobEventsOK), nil

}

/*
GetJobJob View a single job instance.
*/
func (a *Client) GetJobJob(params *GetJobJobParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobJobOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobJob",
		Method:             "GET",
		PathPattern:        "/platform/3/job/jobs/{JobJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobJobOK), nil

}

/*
GetJobJobSummary View job engine status.
*/
func (a *Client) GetJobJobSummary(params *GetJobJobSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobJobSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobJobSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobJobSummary",
		Method:             "GET",
		PathPattern:        "/platform/1/job/job-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobJobSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobJobSummaryOK), nil

}

/*
GetJobPolicy View a single job impact policy.
*/
func (a *Client) GetJobPolicy(params *GetJobPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobPolicy",
		Method:             "GET",
		PathPattern:        "/platform/1/job/policies/{JobPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobPolicyOK), nil

}

/*
GetJobRecent List recently completed jobs.
*/
func (a *Client) GetJobRecent(params *GetJobRecentParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobRecentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobRecentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobRecent",
		Method:             "GET",
		PathPattern:        "/platform/3/job/recent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobRecentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobRecentOK), nil

}

/*
GetJobReports List job reports.
*/
func (a *Client) GetJobReports(params *GetJobReportsParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobReportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobReportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobReports",
		Method:             "GET",
		PathPattern:        "/platform/3/job/reports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobReportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobReportsOK), nil

}

/*
GetJobStatistics View job engine statistics.
*/
func (a *Client) GetJobStatistics(params *GetJobStatisticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobStatisticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobStatisticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobStatistics",
		Method:             "GET",
		PathPattern:        "/platform/1/job/statistics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobStatisticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobStatisticsOK), nil

}

/*
GetJobType Retrieve job type information.
*/
func (a *Client) GetJobType(params *GetJobTypeParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobType",
		Method:             "GET",
		PathPattern:        "/platform/1/job/types/{JobTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobTypeOK), nil

}

/*
GetJobTypes List job types.
*/
func (a *Client) GetJobTypes(params *GetJobTypesParams, authInfo runtime.ClientAuthInfoWriter) (*GetJobTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetJobTypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getJobTypes",
		Method:             "GET",
		PathPattern:        "/platform/1/job/types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetJobTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetJobTypesOK), nil

}

/*
ListJobJobs List running and paused jobs.
*/
func (a *Client) ListJobJobs(params *ListJobJobsParams, authInfo runtime.ClientAuthInfoWriter) (*ListJobJobsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobJobsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listJobJobs",
		Method:             "GET",
		PathPattern:        "/platform/3/job/jobs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListJobJobsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListJobJobsOK), nil

}

/*
ListJobPolicies List job impact policies.
*/
func (a *Client) ListJobPolicies(params *ListJobPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*ListJobPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListJobPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listJobPolicies",
		Method:             "GET",
		PathPattern:        "/platform/1/job/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListJobPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListJobPoliciesOK), nil

}

/*
UpdateJobJob Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateJobJob(params *UpdateJobJobParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateJobJobNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobJobParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJobJob",
		Method:             "PUT",
		PathPattern:        "/platform/3/job/jobs/{JobJobId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateJobJobReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobJobNoContent), nil

}

/*
UpdateJobPolicy Modify a job impact policy.
*/
func (a *Client) UpdateJobPolicy(params *UpdateJobPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateJobPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJobPolicy",
		Method:             "PUT",
		PathPattern:        "/platform/1/job/policies/{JobPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateJobPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobPolicyNoContent), nil

}

/*
UpdateJobType Modify the job type.  All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateJobType(params *UpdateJobTypeParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateJobTypeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateJobTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateJobType",
		Method:             "PUT",
		PathPattern:        "/platform/1/job/types/{JobTypeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateJobTypeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateJobTypeNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
