// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateJobJobParams creates a new UpdateJobJobParams object
// with the default values initialized.
func NewUpdateJobJobParams() *UpdateJobJobParams {
	var ()
	return &UpdateJobJobParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateJobJobParamsWithTimeout creates a new UpdateJobJobParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateJobJobParamsWithTimeout(timeout time.Duration) *UpdateJobJobParams {
	var ()
	return &UpdateJobJobParams{

		timeout: timeout,
	}
}

// NewUpdateJobJobParamsWithContext creates a new UpdateJobJobParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateJobJobParamsWithContext(ctx context.Context) *UpdateJobJobParams {
	var ()
	return &UpdateJobJobParams{

		Context: ctx,
	}
}

// NewUpdateJobJobParamsWithHTTPClient creates a new UpdateJobJobParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateJobJobParamsWithHTTPClient(client *http.Client) *UpdateJobJobParams {
	var ()
	return &UpdateJobJobParams{
		HTTPClient: client,
	}
}

/*UpdateJobJobParams contains all the parameters to send to the API endpoint
for the update job job operation typically these are written to a http.Request
*/
type UpdateJobJobParams struct {

	/*JobJob*/
	JobJob *models.JobJob
	/*JobJobID
	  Modify a running or paused job instance.  All input fields are optional, but one or more must be supplied.

	*/
	JobJobID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update job job params
func (o *UpdateJobJobParams) WithTimeout(timeout time.Duration) *UpdateJobJobParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update job job params
func (o *UpdateJobJobParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update job job params
func (o *UpdateJobJobParams) WithContext(ctx context.Context) *UpdateJobJobParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update job job params
func (o *UpdateJobJobParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update job job params
func (o *UpdateJobJobParams) WithHTTPClient(client *http.Client) *UpdateJobJobParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update job job params
func (o *UpdateJobJobParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobJob adds the jobJob to the update job job params
func (o *UpdateJobJobParams) WithJobJob(jobJob *models.JobJob) *UpdateJobJobParams {
	o.SetJobJob(jobJob)
	return o
}

// SetJobJob adds the jobJob to the update job job params
func (o *UpdateJobJobParams) SetJobJob(jobJob *models.JobJob) {
	o.JobJob = jobJob
}

// WithJobJobID adds the jobJobID to the update job job params
func (o *UpdateJobJobParams) WithJobJobID(jobJobID string) *UpdateJobJobParams {
	o.SetJobJobID(jobJobID)
	return o
}

// SetJobJobID adds the jobJobId to the update job job params
func (o *UpdateJobJobParams) SetJobJobID(jobJobID string) {
	o.JobJobID = jobJobID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateJobJobParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JobJob != nil {
		if err := r.SetBodyParam(o.JobJob); err != nil {
			return err
		}
	}

	// path param JobJobId
	if err := r.SetPathParam("JobJobId", o.JobJobID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
