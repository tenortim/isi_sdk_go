// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateJobTypeParams creates a new UpdateJobTypeParams object
// with the default values initialized.
func NewUpdateJobTypeParams() *UpdateJobTypeParams {
	var ()
	return &UpdateJobTypeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateJobTypeParamsWithTimeout creates a new UpdateJobTypeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateJobTypeParamsWithTimeout(timeout time.Duration) *UpdateJobTypeParams {
	var ()
	return &UpdateJobTypeParams{

		timeout: timeout,
	}
}

// NewUpdateJobTypeParamsWithContext creates a new UpdateJobTypeParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateJobTypeParamsWithContext(ctx context.Context) *UpdateJobTypeParams {
	var ()
	return &UpdateJobTypeParams{

		Context: ctx,
	}
}

// NewUpdateJobTypeParamsWithHTTPClient creates a new UpdateJobTypeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateJobTypeParamsWithHTTPClient(client *http.Client) *UpdateJobTypeParams {
	var ()
	return &UpdateJobTypeParams{
		HTTPClient: client,
	}
}

/*UpdateJobTypeParams contains all the parameters to send to the API endpoint
for the update job type operation typically these are written to a http.Request
*/
type UpdateJobTypeParams struct {

	/*JobType*/
	JobType *models.JobType
	/*JobTypeID
	  Modify the job type.  All input fields are optional, but one or more must be supplied.

	*/
	JobTypeID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update job type params
func (o *UpdateJobTypeParams) WithTimeout(timeout time.Duration) *UpdateJobTypeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update job type params
func (o *UpdateJobTypeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update job type params
func (o *UpdateJobTypeParams) WithContext(ctx context.Context) *UpdateJobTypeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update job type params
func (o *UpdateJobTypeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update job type params
func (o *UpdateJobTypeParams) WithHTTPClient(client *http.Client) *UpdateJobTypeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update job type params
func (o *UpdateJobTypeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobType adds the jobType to the update job type params
func (o *UpdateJobTypeParams) WithJobType(jobType *models.JobType) *UpdateJobTypeParams {
	o.SetJobType(jobType)
	return o
}

// SetJobType adds the jobType to the update job type params
func (o *UpdateJobTypeParams) SetJobType(jobType *models.JobType) {
	o.JobType = jobType
}

// WithJobTypeID adds the jobTypeID to the update job type params
func (o *UpdateJobTypeParams) WithJobTypeID(jobTypeID string) *UpdateJobTypeParams {
	o.SetJobTypeID(jobTypeID)
	return o
}

// SetJobTypeID adds the jobTypeId to the update job type params
func (o *UpdateJobTypeParams) SetJobTypeID(jobTypeID string) {
	o.JobTypeID = jobTypeID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateJobTypeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JobType != nil {
		if err := r.SetBodyParam(o.JobType); err != nil {
			return err
		}
	}

	// path param JobTypeId
	if err := r.SetPathParam("JobTypeId", o.JobTypeID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
