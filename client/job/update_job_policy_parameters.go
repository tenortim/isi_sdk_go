// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateJobPolicyParams creates a new UpdateJobPolicyParams object
// with the default values initialized.
func NewUpdateJobPolicyParams() *UpdateJobPolicyParams {
	var ()
	return &UpdateJobPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateJobPolicyParamsWithTimeout creates a new UpdateJobPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateJobPolicyParamsWithTimeout(timeout time.Duration) *UpdateJobPolicyParams {
	var ()
	return &UpdateJobPolicyParams{

		timeout: timeout,
	}
}

// NewUpdateJobPolicyParamsWithContext creates a new UpdateJobPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateJobPolicyParamsWithContext(ctx context.Context) *UpdateJobPolicyParams {
	var ()
	return &UpdateJobPolicyParams{

		Context: ctx,
	}
}

// NewUpdateJobPolicyParamsWithHTTPClient creates a new UpdateJobPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateJobPolicyParamsWithHTTPClient(client *http.Client) *UpdateJobPolicyParams {
	var ()
	return &UpdateJobPolicyParams{
		HTTPClient: client,
	}
}

/*UpdateJobPolicyParams contains all the parameters to send to the API endpoint
for the update job policy operation typically these are written to a http.Request
*/
type UpdateJobPolicyParams struct {

	/*JobPolicy*/
	JobPolicy *models.JobPolicy
	/*JobPolicyID
	  Modify a job impact policy.

	*/
	JobPolicyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update job policy params
func (o *UpdateJobPolicyParams) WithTimeout(timeout time.Duration) *UpdateJobPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update job policy params
func (o *UpdateJobPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update job policy params
func (o *UpdateJobPolicyParams) WithContext(ctx context.Context) *UpdateJobPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update job policy params
func (o *UpdateJobPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update job policy params
func (o *UpdateJobPolicyParams) WithHTTPClient(client *http.Client) *UpdateJobPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update job policy params
func (o *UpdateJobPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithJobPolicy adds the jobPolicy to the update job policy params
func (o *UpdateJobPolicyParams) WithJobPolicy(jobPolicy *models.JobPolicy) *UpdateJobPolicyParams {
	o.SetJobPolicy(jobPolicy)
	return o
}

// SetJobPolicy adds the jobPolicy to the update job policy params
func (o *UpdateJobPolicyParams) SetJobPolicy(jobPolicy *models.JobPolicy) {
	o.JobPolicy = jobPolicy
}

// WithJobPolicyID adds the jobPolicyID to the update job policy params
func (o *UpdateJobPolicyParams) WithJobPolicyID(jobPolicyID string) *UpdateJobPolicyParams {
	o.SetJobPolicyID(jobPolicyID)
	return o
}

// SetJobPolicyID adds the jobPolicyId to the update job policy params
func (o *UpdateJobPolicyParams) SetJobPolicyID(jobPolicyID string) {
	o.JobPolicyID = jobPolicyID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateJobPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.JobPolicy != nil {
		if err := r.SetBodyParam(o.JobPolicy); err != nil {
			return err
		}
	}

	// path param JobPolicyId
	if err := r.SetPathParam("JobPolicyId", o.JobPolicyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
