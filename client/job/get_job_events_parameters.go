// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetJobEventsParams creates a new GetJobEventsParams object
// with the default values initialized.
func NewGetJobEventsParams() *GetJobEventsParams {
	var ()
	return &GetJobEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobEventsParamsWithTimeout creates a new GetJobEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetJobEventsParamsWithTimeout(timeout time.Duration) *GetJobEventsParams {
	var ()
	return &GetJobEventsParams{

		timeout: timeout,
	}
}

// NewGetJobEventsParamsWithContext creates a new GetJobEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetJobEventsParamsWithContext(ctx context.Context) *GetJobEventsParams {
	var ()
	return &GetJobEventsParams{

		Context: ctx,
	}
}

// NewGetJobEventsParamsWithHTTPClient creates a new GetJobEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetJobEventsParamsWithHTTPClient(client *http.Client) *GetJobEventsParams {
	var ()
	return &GetJobEventsParams{
		HTTPClient: client,
	}
}

/*GetJobEventsParams contains all the parameters to send to the API endpoint
for the get job events operation typically these are written to a http.Request
*/
type GetJobEventsParams struct {

	/*Begin
	  Restrict the query to events at or after the given time, in seconds since the Epoch.

	*/
	Begin *int64
	/*End
	  Restrict the query to events before the given time, in seconds since the Epoch.

	*/
	End *int64
	/*JobID
	  Restrict the query to the given job ID.

	*/
	JobID *int64
	/*JobType
	  Restrict the query to the given job type.

	*/
	JobType *string
	/*Key
	  Restrict the query to the given key name.

	*/
	Key *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*State
	  Restrict the query to events containing the given state.

	*/
	State *string
	/*TimeoutMs
	  Query timeout in milliseconds. The default is 10000 ms.

	*/
	TimeoutMs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get job events params
func (o *GetJobEventsParams) WithTimeout(timeout time.Duration) *GetJobEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get job events params
func (o *GetJobEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get job events params
func (o *GetJobEventsParams) WithContext(ctx context.Context) *GetJobEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get job events params
func (o *GetJobEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get job events params
func (o *GetJobEventsParams) WithHTTPClient(client *http.Client) *GetJobEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get job events params
func (o *GetJobEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get job events params
func (o *GetJobEventsParams) WithBegin(begin *int64) *GetJobEventsParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get job events params
func (o *GetJobEventsParams) SetBegin(begin *int64) {
	o.Begin = begin
}

// WithEnd adds the end to the get job events params
func (o *GetJobEventsParams) WithEnd(end *int64) *GetJobEventsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get job events params
func (o *GetJobEventsParams) SetEnd(end *int64) {
	o.End = end
}

// WithJobID adds the jobID to the get job events params
func (o *GetJobEventsParams) WithJobID(jobID *int64) *GetJobEventsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get job events params
func (o *GetJobEventsParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobType adds the jobType to the get job events params
func (o *GetJobEventsParams) WithJobType(jobType *string) *GetJobEventsParams {
	o.SetJobType(jobType)
	return o
}

// SetJobType adds the jobType to the get job events params
func (o *GetJobEventsParams) SetJobType(jobType *string) {
	o.JobType = jobType
}

// WithKey adds the key to the get job events params
func (o *GetJobEventsParams) WithKey(key *string) *GetJobEventsParams {
	o.SetKey(key)
	return o
}

// SetKey adds the key to the get job events params
func (o *GetJobEventsParams) SetKey(key *string) {
	o.Key = key
}

// WithLimit adds the limit to the get job events params
func (o *GetJobEventsParams) WithLimit(limit *int64) *GetJobEventsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get job events params
func (o *GetJobEventsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithResume adds the resume to the get job events params
func (o *GetJobEventsParams) WithResume(resume *string) *GetJobEventsParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the get job events params
func (o *GetJobEventsParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithState adds the state to the get job events params
func (o *GetJobEventsParams) WithState(state *string) *GetJobEventsParams {
	o.SetState(state)
	return o
}

// SetState adds the state to the get job events params
func (o *GetJobEventsParams) SetState(state *string) {
	o.State = state
}

// WithTimeoutMs adds the timeoutMs to the get job events params
func (o *GetJobEventsParams) WithTimeoutMs(timeoutMs *int64) *GetJobEventsParams {
	o.SetTimeoutMs(timeoutMs)
	return o
}

// SetTimeoutMs adds the timeoutMs to the get job events params
func (o *GetJobEventsParams) SetTimeoutMs(timeoutMs *int64) {
	o.TimeoutMs = timeoutMs
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin int64
		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatInt64(qrBegin)
		if qBegin != "" {
			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param end
		var qrEnd int64
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	if o.JobID != nil {

		// query param job_id
		var qrJobID int64
		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {
			if err := r.SetQueryParam("job_id", qJobID); err != nil {
				return err
			}
		}

	}

	if o.JobType != nil {

		// query param job_type
		var qrJobType string
		if o.JobType != nil {
			qrJobType = *o.JobType
		}
		qJobType := qrJobType
		if qJobType != "" {
			if err := r.SetQueryParam("job_type", qJobType); err != nil {
				return err
			}
		}

	}

	if o.Key != nil {

		// query param key
		var qrKey string
		if o.Key != nil {
			qrKey = *o.Key
		}
		qKey := qrKey
		if qKey != "" {
			if err := r.SetQueryParam("key", qKey); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if o.TimeoutMs != nil {

		// query param timeout_ms
		var qrTimeoutMs int64
		if o.TimeoutMs != nil {
			qrTimeoutMs = *o.TimeoutMs
		}
		qTimeoutMs := swag.FormatInt64(qrTimeoutMs)
		if qTimeoutMs != "" {
			if err := r.SetQueryParam("timeout_ms", qTimeoutMs); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
