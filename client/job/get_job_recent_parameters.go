// Code generated by go-swagger; DO NOT EDIT.

package job

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetJobRecentParams creates a new GetJobRecentParams object
// with the default values initialized.
func NewGetJobRecentParams() *GetJobRecentParams {
	var ()
	return &GetJobRecentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetJobRecentParamsWithTimeout creates a new GetJobRecentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetJobRecentParamsWithTimeout(timeout time.Duration) *GetJobRecentParams {
	var ()
	return &GetJobRecentParams{

		timeout: timeout,
	}
}

// NewGetJobRecentParamsWithContext creates a new GetJobRecentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetJobRecentParamsWithContext(ctx context.Context) *GetJobRecentParams {
	var ()
	return &GetJobRecentParams{

		Context: ctx,
	}
}

// NewGetJobRecentParamsWithHTTPClient creates a new GetJobRecentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetJobRecentParamsWithHTTPClient(client *http.Client) *GetJobRecentParams {
	var ()
	return &GetJobRecentParams{
		HTTPClient: client,
	}
}

/*GetJobRecentParams contains all the parameters to send to the API endpoint
for the get job recent operation typically these are written to a http.Request
*/
type GetJobRecentParams struct {

	/*Limit
	  Max number of recent jobs to return. The default is 8, the max is 100.

	*/
	Limit *int64
	/*TimeoutMs
	  Query timeout in milliseconds. The default is 10000 ms.

	*/
	TimeoutMs *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get job recent params
func (o *GetJobRecentParams) WithTimeout(timeout time.Duration) *GetJobRecentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get job recent params
func (o *GetJobRecentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get job recent params
func (o *GetJobRecentParams) WithContext(ctx context.Context) *GetJobRecentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get job recent params
func (o *GetJobRecentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get job recent params
func (o *GetJobRecentParams) WithHTTPClient(client *http.Client) *GetJobRecentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get job recent params
func (o *GetJobRecentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLimit adds the limit to the get job recent params
func (o *GetJobRecentParams) WithLimit(limit *int64) *GetJobRecentParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get job recent params
func (o *GetJobRecentParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithTimeoutMs adds the timeoutMs to the get job recent params
func (o *GetJobRecentParams) WithTimeoutMs(timeoutMs *int64) *GetJobRecentParams {
	o.SetTimeoutMs(timeoutMs)
	return o
}

// SetTimeoutMs adds the timeoutMs to the get job recent params
func (o *GetJobRecentParams) SetTimeoutMs(timeoutMs *int64) {
	o.TimeoutMs = timeoutMs
}

// WriteToRequest writes these params to a swagger request
func (o *GetJobRecentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.TimeoutMs != nil {

		// query param timeout_ms
		var qrTimeoutMs int64
		if o.TimeoutMs != nil {
			qrTimeoutMs = *o.TimeoutMs
		}
		qTimeoutMs := swag.FormatInt64(qrTimeoutMs)
		if qTimeoutMs != "" {
			if err := r.SetQueryParam("timeout_ms", qTimeoutMs); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
