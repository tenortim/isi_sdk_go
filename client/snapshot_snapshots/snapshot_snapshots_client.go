// Code generated by go-swagger; DO NOT EDIT.

package snapshot_snapshots

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new snapshot snapshots API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snapshot snapshots API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSnapshotLock Create a new lock on this snapshot.
*/
func (a *Client) CreateSnapshotLock(params *CreateSnapshotLockParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotLock",
		Method:             "POST",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotLockOK), nil

}

/*
DeleteSnapshotLock Delete the snapshot lock.
*/
func (a *Client) DeleteSnapshotLock(params *DeleteSnapshotLockParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotLockNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotLock",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotLockNoContent), nil

}

/*
DeleteSnapshotLocks Delete all locks. Will try to drain count of recursively held locks so that the snapshot can be deleted.
*/
func (a *Client) DeleteSnapshotLocks(params *DeleteSnapshotLocksParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotLocksNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotLocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotLocks",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotLocksNoContent), nil

}

/*
GetSnapshotLock Retrieve lock information.
*/
func (a *Client) GetSnapshotLock(params *GetSnapshotLockParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotLockOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotLock",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotLockOK), nil

}

/*
ListSnapshotLocks List all locks.
*/
func (a *Client) ListSnapshotLocks(params *ListSnapshotLocksParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotLocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotLocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotLocks",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotLocksOK), nil

}

/*
UpdateSnapshotLock Modify lock. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSnapshotLock(params *UpdateSnapshotLockParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnapshotLockNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotLockParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnapshotLock",
		Method:             "PUT",
		PathPattern:        "/platform/1/snapshot/snapshots/{Sid}/locks/{SnapshotLockId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnapshotLockReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnapshotLockNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
