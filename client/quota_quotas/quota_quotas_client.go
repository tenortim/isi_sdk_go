// Code generated by go-swagger; DO NOT EDIT.

package quota_quotas

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new quota quotas API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for quota quotas API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateQuotaNotification Create a new notification rule specific to this quota.
*/
func (a *Client) CreateQuotaNotification(params *CreateQuotaNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*CreateQuotaNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateQuotaNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createQuotaNotification",
		Method:             "POST",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateQuotaNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateQuotaNotificationOK), nil

}

/*
DeleteQuotaNotification Delete the notification rule.
*/
func (a *Client) DeleteQuotaNotification(params *DeleteQuotaNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteQuotaNotificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuotaNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQuotaNotification",
		Method:             "DELETE",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQuotaNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQuotaNotificationNoContent), nil

}

/*
DeleteQuotaNotifications Delete all quota specific rules. The quota will then use the global rules.
*/
func (a *Client) DeleteQuotaNotifications(params *DeleteQuotaNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteQuotaNotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteQuotaNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteQuotaNotifications",
		Method:             "DELETE",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteQuotaNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteQuotaNotificationsNoContent), nil

}

/*
GetQuotaNotification Retrieve notification rule information.
*/
func (a *Client) GetQuotaNotification(params *GetQuotaNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*GetQuotaNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetQuotaNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getQuotaNotification",
		Method:             "GET",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetQuotaNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetQuotaNotificationOK), nil

}

/*
ListQuotaNotifications List all rules.
*/
func (a *Client) ListQuotaNotifications(params *ListQuotaNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*ListQuotaNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListQuotaNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listQuotaNotifications",
		Method:             "GET",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListQuotaNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListQuotaNotificationsOK), nil

}

/*
UpdateQuotaNotification Modify notification rule. All input fields are optional, but one or must be supplied.
*/
func (a *Client) UpdateQuotaNotification(params *UpdateQuotaNotificationParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateQuotaNotificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQuotaNotificationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateQuotaNotification",
		Method:             "PUT",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications/{QuotaNotificationId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateQuotaNotificationReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateQuotaNotificationNoContent), nil

}

/*
UpdateQuotaNotifications This method creates an empty set of rules so that the global rules are not used. The input must be an empty JSON object.
*/
func (a *Client) UpdateQuotaNotifications(params *UpdateQuotaNotificationsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateQuotaNotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateQuotaNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateQuotaNotifications",
		Method:             "PUT",
		PathPattern:        "/platform/1/quota/quotas/{Qid}/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateQuotaNotificationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateQuotaNotificationsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
