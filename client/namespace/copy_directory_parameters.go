// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCopyDirectoryParams creates a new CopyDirectoryParams object
// with the default values initialized.
func NewCopyDirectoryParams() *CopyDirectoryParams {
	var ()
	return &CopyDirectoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCopyDirectoryParamsWithTimeout creates a new CopyDirectoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCopyDirectoryParamsWithTimeout(timeout time.Duration) *CopyDirectoryParams {
	var ()
	return &CopyDirectoryParams{

		timeout: timeout,
	}
}

// NewCopyDirectoryParamsWithContext creates a new CopyDirectoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewCopyDirectoryParamsWithContext(ctx context.Context) *CopyDirectoryParams {
	var ()
	return &CopyDirectoryParams{

		Context: ctx,
	}
}

// NewCopyDirectoryParamsWithHTTPClient creates a new CopyDirectoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCopyDirectoryParamsWithHTTPClient(client *http.Client) *CopyDirectoryParams {
	var ()
	return &CopyDirectoryParams{
		HTTPClient: client,
	}
}

/*CopyDirectoryParams contains all the parameters to send to the API endpoint
for the copy directory operation typically these are written to a http.Request
*/
type CopyDirectoryParams struct {

	/*DirectoryCopyTarget
	  Directory copy destination relative to /.

	*/
	DirectoryCopyTarget string
	/*Continue
	  Specifies whether to continue the copy operation on remaining objects when there is a conflict or error.

	*/
	Continue *bool
	/*Merge
	  Specifies if the contents of a directory should be merged with an existing directory with the same name.

	*/
	Merge *bool
	/*Overwrite
	  Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes and ACLS from the header, when set to true.

	*/
	Overwrite *bool
	/*XIsiIfsCopySource
	  Specifies the full path to the source directory.

	*/
	XIsiIfsCopySource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the copy directory params
func (o *CopyDirectoryParams) WithTimeout(timeout time.Duration) *CopyDirectoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the copy directory params
func (o *CopyDirectoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the copy directory params
func (o *CopyDirectoryParams) WithContext(ctx context.Context) *CopyDirectoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the copy directory params
func (o *CopyDirectoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the copy directory params
func (o *CopyDirectoryParams) WithHTTPClient(client *http.Client) *CopyDirectoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the copy directory params
func (o *CopyDirectoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectoryCopyTarget adds the directoryCopyTarget to the copy directory params
func (o *CopyDirectoryParams) WithDirectoryCopyTarget(directoryCopyTarget string) *CopyDirectoryParams {
	o.SetDirectoryCopyTarget(directoryCopyTarget)
	return o
}

// SetDirectoryCopyTarget adds the directoryCopyTarget to the copy directory params
func (o *CopyDirectoryParams) SetDirectoryCopyTarget(directoryCopyTarget string) {
	o.DirectoryCopyTarget = directoryCopyTarget
}

// WithContinue adds the continueVar to the copy directory params
func (o *CopyDirectoryParams) WithContinue(continueVar *bool) *CopyDirectoryParams {
	o.SetContinue(continueVar)
	return o
}

// SetContinue adds the continue to the copy directory params
func (o *CopyDirectoryParams) SetContinue(continueVar *bool) {
	o.Continue = continueVar
}

// WithMerge adds the merge to the copy directory params
func (o *CopyDirectoryParams) WithMerge(merge *bool) *CopyDirectoryParams {
	o.SetMerge(merge)
	return o
}

// SetMerge adds the merge to the copy directory params
func (o *CopyDirectoryParams) SetMerge(merge *bool) {
	o.Merge = merge
}

// WithOverwrite adds the overwrite to the copy directory params
func (o *CopyDirectoryParams) WithOverwrite(overwrite *bool) *CopyDirectoryParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the copy directory params
func (o *CopyDirectoryParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithXIsiIfsCopySource adds the xIsiIfsCopySource to the copy directory params
func (o *CopyDirectoryParams) WithXIsiIfsCopySource(xIsiIfsCopySource string) *CopyDirectoryParams {
	o.SetXIsiIfsCopySource(xIsiIfsCopySource)
	return o
}

// SetXIsiIfsCopySource adds the xIsiIfsCopySource to the copy directory params
func (o *CopyDirectoryParams) SetXIsiIfsCopySource(xIsiIfsCopySource string) {
	o.XIsiIfsCopySource = xIsiIfsCopySource
}

// WriteToRequest writes these params to a swagger request
func (o *CopyDirectoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param DirectoryCopyTarget
	if err := r.SetPathParam("DirectoryCopyTarget", o.DirectoryCopyTarget); err != nil {
		return err
	}

	if o.Continue != nil {

		// query param continue
		var qrContinue bool
		if o.Continue != nil {
			qrContinue = *o.Continue
		}
		qContinue := swag.FormatBool(qrContinue)
		if qContinue != "" {
			if err := r.SetQueryParam("continue", qContinue); err != nil {
				return err
			}
		}

	}

	if o.Merge != nil {

		// query param merge
		var qrMerge bool
		if o.Merge != nil {
			qrMerge = *o.Merge
		}
		qMerge := swag.FormatBool(qrMerge)
		if qMerge != "" {
			if err := r.SetQueryParam("merge", qMerge); err != nil {
				return err
			}
		}

	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	// header param x-isi-ifs-copy-source
	if err := r.SetHeaderParam("x-isi-ifs-copy-source", o.XIsiIfsCopySource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
