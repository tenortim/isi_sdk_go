// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateDirectoryParams creates a new CreateDirectoryParams object
// with the default values initialized.
func NewCreateDirectoryParams() *CreateDirectoryParams {
	var (
		xIsiIfsAccessControlDefault = string("0700")
		xIsiIfsTargetTypeDefault    = string("container")
	)
	return &CreateDirectoryParams{
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateDirectoryParamsWithTimeout creates a new CreateDirectoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateDirectoryParamsWithTimeout(timeout time.Duration) *CreateDirectoryParams {
	var (
		xIsiIfsAccessControlDefault = string("0700")
		xIsiIfsTargetTypeDefault    = string("container")
	)
	return &CreateDirectoryParams{
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		timeout: timeout,
	}
}

// NewCreateDirectoryParamsWithContext creates a new CreateDirectoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateDirectoryParamsWithContext(ctx context.Context) *CreateDirectoryParams {
	var (
		xIsiIfsAccessControlDefault = string("0700")
		xIsiIfsTargetTypeDefault    = string("container")
	)
	return &CreateDirectoryParams{
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		Context: ctx,
	}
}

// NewCreateDirectoryParamsWithHTTPClient creates a new CreateDirectoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateDirectoryParamsWithHTTPClient(client *http.Client) *CreateDirectoryParams {
	var (
		xIsiIfsAccessControlDefault = string("0700")
		xIsiIfsTargetTypeDefault    = string("container")
	)
	return &CreateDirectoryParams{
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,
		HTTPClient:           client,
	}
}

/*CreateDirectoryParams contains all the parameters to send to the API endpoint
for the create directory operation typically these are written to a http.Request
*/
type CreateDirectoryParams struct {

	/*DirectoryPath
	  Directory path relative to /.

	*/
	DirectoryPath string
	/*Overwrite
	  Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes and ACLS from the header, when set to true.

	*/
	Overwrite *bool
	/*Recursive
	  Specifies the OneFS node pool name.

	*/
	Recursive *bool
	/*XIsiIfsAccessControl
	  Specifies a pre-defined ACL value or POSIX mode with a string in octal string format.

	*/
	XIsiIfsAccessControl *string
	/*XIsiIfsNodePoolName
	  Specifies a pre-defined ACL value or POSIX mode with a string.

	*/
	XIsiIfsNodePoolName *string
	/*XIsiIfsTargetType
	  Specifies the resource type.

	*/
	XIsiIfsTargetType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create directory params
func (o *CreateDirectoryParams) WithTimeout(timeout time.Duration) *CreateDirectoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create directory params
func (o *CreateDirectoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create directory params
func (o *CreateDirectoryParams) WithContext(ctx context.Context) *CreateDirectoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create directory params
func (o *CreateDirectoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create directory params
func (o *CreateDirectoryParams) WithHTTPClient(client *http.Client) *CreateDirectoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create directory params
func (o *CreateDirectoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectoryPath adds the directoryPath to the create directory params
func (o *CreateDirectoryParams) WithDirectoryPath(directoryPath string) *CreateDirectoryParams {
	o.SetDirectoryPath(directoryPath)
	return o
}

// SetDirectoryPath adds the directoryPath to the create directory params
func (o *CreateDirectoryParams) SetDirectoryPath(directoryPath string) {
	o.DirectoryPath = directoryPath
}

// WithOverwrite adds the overwrite to the create directory params
func (o *CreateDirectoryParams) WithOverwrite(overwrite *bool) *CreateDirectoryParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the create directory params
func (o *CreateDirectoryParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithRecursive adds the recursive to the create directory params
func (o *CreateDirectoryParams) WithRecursive(recursive *bool) *CreateDirectoryParams {
	o.SetRecursive(recursive)
	return o
}

// SetRecursive adds the recursive to the create directory params
func (o *CreateDirectoryParams) SetRecursive(recursive *bool) {
	o.Recursive = recursive
}

// WithXIsiIfsAccessControl adds the xIsiIfsAccessControl to the create directory params
func (o *CreateDirectoryParams) WithXIsiIfsAccessControl(xIsiIfsAccessControl *string) *CreateDirectoryParams {
	o.SetXIsiIfsAccessControl(xIsiIfsAccessControl)
	return o
}

// SetXIsiIfsAccessControl adds the xIsiIfsAccessControl to the create directory params
func (o *CreateDirectoryParams) SetXIsiIfsAccessControl(xIsiIfsAccessControl *string) {
	o.XIsiIfsAccessControl = xIsiIfsAccessControl
}

// WithXIsiIfsNodePoolName adds the xIsiIfsNodePoolName to the create directory params
func (o *CreateDirectoryParams) WithXIsiIfsNodePoolName(xIsiIfsNodePoolName *string) *CreateDirectoryParams {
	o.SetXIsiIfsNodePoolName(xIsiIfsNodePoolName)
	return o
}

// SetXIsiIfsNodePoolName adds the xIsiIfsNodePoolName to the create directory params
func (o *CreateDirectoryParams) SetXIsiIfsNodePoolName(xIsiIfsNodePoolName *string) {
	o.XIsiIfsNodePoolName = xIsiIfsNodePoolName
}

// WithXIsiIfsTargetType adds the xIsiIfsTargetType to the create directory params
func (o *CreateDirectoryParams) WithXIsiIfsTargetType(xIsiIfsTargetType string) *CreateDirectoryParams {
	o.SetXIsiIfsTargetType(xIsiIfsTargetType)
	return o
}

// SetXIsiIfsTargetType adds the xIsiIfsTargetType to the create directory params
func (o *CreateDirectoryParams) SetXIsiIfsTargetType(xIsiIfsTargetType string) {
	o.XIsiIfsTargetType = xIsiIfsTargetType
}

// WriteToRequest writes these params to a swagger request
func (o *CreateDirectoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param DirectoryPath
	if err := r.SetPathParam("DirectoryPath", o.DirectoryPath); err != nil {
		return err
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	if o.Recursive != nil {

		// query param recursive
		var qrRecursive bool
		if o.Recursive != nil {
			qrRecursive = *o.Recursive
		}
		qRecursive := swag.FormatBool(qrRecursive)
		if qRecursive != "" {
			if err := r.SetQueryParam("recursive", qRecursive); err != nil {
				return err
			}
		}

	}

	if o.XIsiIfsAccessControl != nil {

		// header param x-isi-ifs-access-control
		if err := r.SetHeaderParam("x-isi-ifs-access-control", *o.XIsiIfsAccessControl); err != nil {
			return err
		}

	}

	if o.XIsiIfsNodePoolName != nil {

		// header param x-isi-ifs-node-pool-name
		if err := r.SetHeaderParam("x-isi-ifs-node-pool-name", *o.XIsiIfsNodePoolName); err != nil {
			return err
		}

	}

	// header param x-isi-ifs-target-type
	if err := r.SetHeaderParam("x-isi-ifs-target-type", o.XIsiIfsTargetType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
