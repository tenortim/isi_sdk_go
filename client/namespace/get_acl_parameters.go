// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetACLParams creates a new GetACLParams object
// with the default values initialized.
func NewGetACLParams() *GetACLParams {
	var ()
	return &GetACLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetACLParamsWithTimeout creates a new GetACLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetACLParamsWithTimeout(timeout time.Duration) *GetACLParams {
	var ()
	return &GetACLParams{

		timeout: timeout,
	}
}

// NewGetACLParamsWithContext creates a new GetACLParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetACLParamsWithContext(ctx context.Context) *GetACLParams {
	var ()
	return &GetACLParams{

		Context: ctx,
	}
}

// NewGetACLParamsWithHTTPClient creates a new GetACLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetACLParamsWithHTTPClient(client *http.Client) *GetACLParams {
	var ()
	return &GetACLParams{
		HTTPClient: client,
	}
}

/*GetACLParams contains all the parameters to send to the API endpoint
for the get Acl operation typically these are written to a http.Request
*/
type GetACLParams struct {

	/*NamespacePath
	  Namespace path relative to /.

	*/
	NamespacePath string
	/*ACL
	  Show access control lists.

	*/
	ACL bool
	/*Nsaccess
	  Indicates that the operation is on the access point instead of the store path.

	*/
	Nsaccess *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get Acl params
func (o *GetACLParams) WithTimeout(timeout time.Duration) *GetACLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Acl params
func (o *GetACLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Acl params
func (o *GetACLParams) WithContext(ctx context.Context) *GetACLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Acl params
func (o *GetACLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Acl params
func (o *GetACLParams) WithHTTPClient(client *http.Client) *GetACLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Acl params
func (o *GetACLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespacePath adds the namespacePath to the get Acl params
func (o *GetACLParams) WithNamespacePath(namespacePath string) *GetACLParams {
	o.SetNamespacePath(namespacePath)
	return o
}

// SetNamespacePath adds the namespacePath to the get Acl params
func (o *GetACLParams) SetNamespacePath(namespacePath string) {
	o.NamespacePath = namespacePath
}

// WithACL adds the acl to the get Acl params
func (o *GetACLParams) WithACL(acl bool) *GetACLParams {
	o.SetACL(acl)
	return o
}

// SetACL adds the acl to the get Acl params
func (o *GetACLParams) SetACL(acl bool) {
	o.ACL = acl
}

// WithNsaccess adds the nsaccess to the get Acl params
func (o *GetACLParams) WithNsaccess(nsaccess *bool) *GetACLParams {
	o.SetNsaccess(nsaccess)
	return o
}

// SetNsaccess adds the nsaccess to the get Acl params
func (o *GetACLParams) SetNsaccess(nsaccess *bool) {
	o.Nsaccess = nsaccess
}

// WriteToRequest writes these params to a swagger request
func (o *GetACLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param NamespacePath
	if err := r.SetPathParam("NamespacePath", o.NamespacePath); err != nil {
		return err
	}

	// query param acl
	qrACL := o.ACL
	qACL := swag.FormatBool(qrACL)
	if qACL != "" {
		if err := r.SetQueryParam("acl", qACL); err != nil {
			return err
		}
	}

	if o.Nsaccess != nil {

		// query param nsaccess
		var qrNsaccess bool
		if o.Nsaccess != nil {
			qrNsaccess = *o.Nsaccess
		}
		qNsaccess := swag.FormatBool(qrNsaccess)
		if qNsaccess != "" {
			if err := r.SetQueryParam("nsaccess", qNsaccess); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
