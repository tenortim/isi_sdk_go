// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListAccessPointsParams creates a new ListAccessPointsParams object
// with the default values initialized.
func NewListAccessPointsParams() *ListAccessPointsParams {
	var ()
	return &ListAccessPointsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListAccessPointsParamsWithTimeout creates a new ListAccessPointsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListAccessPointsParamsWithTimeout(timeout time.Duration) *ListAccessPointsParams {
	var ()
	return &ListAccessPointsParams{

		timeout: timeout,
	}
}

// NewListAccessPointsParamsWithContext creates a new ListAccessPointsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListAccessPointsParamsWithContext(ctx context.Context) *ListAccessPointsParams {
	var ()
	return &ListAccessPointsParams{

		Context: ctx,
	}
}

// NewListAccessPointsParamsWithHTTPClient creates a new ListAccessPointsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListAccessPointsParamsWithHTTPClient(client *http.Client) *ListAccessPointsParams {
	var ()
	return &ListAccessPointsParams{
		HTTPClient: client,
	}
}

/*ListAccessPointsParams contains all the parameters to send to the API endpoint
for the list access points operation typically these are written to a http.Request
*/
type ListAccessPointsParams struct {

	/*Versions
	  Protocol versions that are supported for the current namespace access server.

	*/
	Versions *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list access points params
func (o *ListAccessPointsParams) WithTimeout(timeout time.Duration) *ListAccessPointsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list access points params
func (o *ListAccessPointsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list access points params
func (o *ListAccessPointsParams) WithContext(ctx context.Context) *ListAccessPointsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list access points params
func (o *ListAccessPointsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list access points params
func (o *ListAccessPointsParams) WithHTTPClient(client *http.Client) *ListAccessPointsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list access points params
func (o *ListAccessPointsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithVersions adds the versions to the list access points params
func (o *ListAccessPointsParams) WithVersions(versions *bool) *ListAccessPointsParams {
	o.SetVersions(versions)
	return o
}

// SetVersions adds the versions to the list access points params
func (o *ListAccessPointsParams) SetVersions(versions *bool) {
	o.Versions = versions
}

// WriteToRequest writes these params to a swagger request
func (o *ListAccessPointsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Versions != nil {

		// query param versions
		var qrVersions bool
		if o.Versions != nil {
			qrVersions = *o.Versions
		}
		qVersions := swag.FormatBool(qrVersions)
		if qVersions != "" {
			if err := r.SetQueryParam("versions", qVersions); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
