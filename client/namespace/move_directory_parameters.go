// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewMoveDirectoryParams creates a new MoveDirectoryParams object
// with the default values initialized.
func NewMoveDirectoryParams() *MoveDirectoryParams {
	var ()
	return &MoveDirectoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewMoveDirectoryParamsWithTimeout creates a new MoveDirectoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewMoveDirectoryParamsWithTimeout(timeout time.Duration) *MoveDirectoryParams {
	var ()
	return &MoveDirectoryParams{

		timeout: timeout,
	}
}

// NewMoveDirectoryParamsWithContext creates a new MoveDirectoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewMoveDirectoryParamsWithContext(ctx context.Context) *MoveDirectoryParams {
	var ()
	return &MoveDirectoryParams{

		Context: ctx,
	}
}

// NewMoveDirectoryParamsWithHTTPClient creates a new MoveDirectoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewMoveDirectoryParamsWithHTTPClient(client *http.Client) *MoveDirectoryParams {
	var ()
	return &MoveDirectoryParams{
		HTTPClient: client,
	}
}

/*MoveDirectoryParams contains all the parameters to send to the API endpoint
for the move directory operation typically these are written to a http.Request
*/
type MoveDirectoryParams struct {

	/*DirectoryPath
	  Directory path relative to /.

	*/
	DirectoryPath string
	/*XIsiIfsSetLocation
	  Specifies the full path for the destination directory.

	*/
	XIsiIfsSetLocation string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the move directory params
func (o *MoveDirectoryParams) WithTimeout(timeout time.Duration) *MoveDirectoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the move directory params
func (o *MoveDirectoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the move directory params
func (o *MoveDirectoryParams) WithContext(ctx context.Context) *MoveDirectoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the move directory params
func (o *MoveDirectoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the move directory params
func (o *MoveDirectoryParams) WithHTTPClient(client *http.Client) *MoveDirectoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the move directory params
func (o *MoveDirectoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDirectoryPath adds the directoryPath to the move directory params
func (o *MoveDirectoryParams) WithDirectoryPath(directoryPath string) *MoveDirectoryParams {
	o.SetDirectoryPath(directoryPath)
	return o
}

// SetDirectoryPath adds the directoryPath to the move directory params
func (o *MoveDirectoryParams) SetDirectoryPath(directoryPath string) {
	o.DirectoryPath = directoryPath
}

// WithXIsiIfsSetLocation adds the xIsiIfsSetLocation to the move directory params
func (o *MoveDirectoryParams) WithXIsiIfsSetLocation(xIsiIfsSetLocation string) *MoveDirectoryParams {
	o.SetXIsiIfsSetLocation(xIsiIfsSetLocation)
	return o
}

// SetXIsiIfsSetLocation adds the xIsiIfsSetLocation to the move directory params
func (o *MoveDirectoryParams) SetXIsiIfsSetLocation(xIsiIfsSetLocation string) {
	o.XIsiIfsSetLocation = xIsiIfsSetLocation
}

// WriteToRequest writes these params to a swagger request
func (o *MoveDirectoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param DirectoryPath
	if err := r.SetPathParam("DirectoryPath", o.DirectoryPath); err != nil {
		return err
	}

	// header param x-isi-ifs-set-location
	if err := r.SetHeaderParam("x-isi-ifs-set-location", o.XIsiIfsSetLocation); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
