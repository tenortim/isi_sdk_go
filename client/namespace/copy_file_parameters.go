// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCopyFileParams creates a new CopyFileParams object
// with the default values initialized.
func NewCopyFileParams() *CopyFileParams {
	var ()
	return &CopyFileParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCopyFileParamsWithTimeout creates a new CopyFileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCopyFileParamsWithTimeout(timeout time.Duration) *CopyFileParams {
	var ()
	return &CopyFileParams{

		timeout: timeout,
	}
}

// NewCopyFileParamsWithContext creates a new CopyFileParams object
// with the default values initialized, and the ability to set a context for a request
func NewCopyFileParamsWithContext(ctx context.Context) *CopyFileParams {
	var ()
	return &CopyFileParams{

		Context: ctx,
	}
}

// NewCopyFileParamsWithHTTPClient creates a new CopyFileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCopyFileParamsWithHTTPClient(client *http.Client) *CopyFileParams {
	var ()
	return &CopyFileParams{
		HTTPClient: client,
	}
}

/*CopyFileParams contains all the parameters to send to the API endpoint
for the copy file operation typically these are written to a http.Request
*/
type CopyFileParams struct {

	/*FileCopyTarget
	  File copy destination relative to /.

	*/
	FileCopyTarget string
	/*Clone
	  You must set this parameter to true in order to clone a file.

	*/
	Clone *bool
	/*Overwrite
	  Specifies if an existing file should be overwritten by a new file with the same name.

	*/
	Overwrite *bool
	/*Snapshot
	  Specifies a snapshot name to clone the file from.

	*/
	Snapshot *string
	/*XIsiIfsCopySource
	  Specifies the full path to the source file.

	*/
	XIsiIfsCopySource string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the copy file params
func (o *CopyFileParams) WithTimeout(timeout time.Duration) *CopyFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the copy file params
func (o *CopyFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the copy file params
func (o *CopyFileParams) WithContext(ctx context.Context) *CopyFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the copy file params
func (o *CopyFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the copy file params
func (o *CopyFileParams) WithHTTPClient(client *http.Client) *CopyFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the copy file params
func (o *CopyFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFileCopyTarget adds the fileCopyTarget to the copy file params
func (o *CopyFileParams) WithFileCopyTarget(fileCopyTarget string) *CopyFileParams {
	o.SetFileCopyTarget(fileCopyTarget)
	return o
}

// SetFileCopyTarget adds the fileCopyTarget to the copy file params
func (o *CopyFileParams) SetFileCopyTarget(fileCopyTarget string) {
	o.FileCopyTarget = fileCopyTarget
}

// WithClone adds the clone to the copy file params
func (o *CopyFileParams) WithClone(clone *bool) *CopyFileParams {
	o.SetClone(clone)
	return o
}

// SetClone adds the clone to the copy file params
func (o *CopyFileParams) SetClone(clone *bool) {
	o.Clone = clone
}

// WithOverwrite adds the overwrite to the copy file params
func (o *CopyFileParams) WithOverwrite(overwrite *bool) *CopyFileParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the copy file params
func (o *CopyFileParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithSnapshot adds the snapshot to the copy file params
func (o *CopyFileParams) WithSnapshot(snapshot *string) *CopyFileParams {
	o.SetSnapshot(snapshot)
	return o
}

// SetSnapshot adds the snapshot to the copy file params
func (o *CopyFileParams) SetSnapshot(snapshot *string) {
	o.Snapshot = snapshot
}

// WithXIsiIfsCopySource adds the xIsiIfsCopySource to the copy file params
func (o *CopyFileParams) WithXIsiIfsCopySource(xIsiIfsCopySource string) *CopyFileParams {
	o.SetXIsiIfsCopySource(xIsiIfsCopySource)
	return o
}

// SetXIsiIfsCopySource adds the xIsiIfsCopySource to the copy file params
func (o *CopyFileParams) SetXIsiIfsCopySource(xIsiIfsCopySource string) {
	o.XIsiIfsCopySource = xIsiIfsCopySource
}

// WriteToRequest writes these params to a swagger request
func (o *CopyFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param FileCopyTarget
	if err := r.SetPathParam("FileCopyTarget", o.FileCopyTarget); err != nil {
		return err
	}

	if o.Clone != nil {

		// query param clone
		var qrClone bool
		if o.Clone != nil {
			qrClone = *o.Clone
		}
		qClone := swag.FormatBool(qrClone)
		if qClone != "" {
			if err := r.SetQueryParam("clone", qClone); err != nil {
				return err
			}
		}

	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	if o.Snapshot != nil {

		// query param snapshot
		var qrSnapshot string
		if o.Snapshot != nil {
			qrSnapshot = *o.Snapshot
		}
		qSnapshot := qrSnapshot
		if qSnapshot != "" {
			if err := r.SetQueryParam("snapshot", qSnapshot); err != nil {
				return err
			}
		}

	}

	// header param x-isi-ifs-copy-source
	if err := r.SetHeaderParam("x-isi-ifs-copy-source", o.XIsiIfsCopySource); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
