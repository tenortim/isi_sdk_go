// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewSetACLParams creates a new SetACLParams object
// with the default values initialized.
func NewSetACLParams() *SetACLParams {
	var ()
	return &SetACLParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSetACLParamsWithTimeout creates a new SetACLParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSetACLParamsWithTimeout(timeout time.Duration) *SetACLParams {
	var ()
	return &SetACLParams{

		timeout: timeout,
	}
}

// NewSetACLParamsWithContext creates a new SetACLParams object
// with the default values initialized, and the ability to set a context for a request
func NewSetACLParamsWithContext(ctx context.Context) *SetACLParams {
	var ()
	return &SetACLParams{

		Context: ctx,
	}
}

// NewSetACLParamsWithHTTPClient creates a new SetACLParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSetACLParamsWithHTTPClient(client *http.Client) *SetACLParams {
	var ()
	return &SetACLParams{
		HTTPClient: client,
	}
}

/*SetACLParams contains all the parameters to send to the API endpoint
for the set Acl operation typically these are written to a http.Request
*/
type SetACLParams struct {

	/*NamespaceACL
	  Namespace ACL parameters model.

	*/
	NamespaceACL *models.NamespaceACL
	/*NamespacePath
	  Namespace path relative to /.

	*/
	NamespacePath string
	/*ACL
	  Update access control lists.

	*/
	ACL bool
	/*Nsaccess
	  Indicates that the operation is on the access point instead of the store path.

	*/
	Nsaccess *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the set Acl params
func (o *SetACLParams) WithTimeout(timeout time.Duration) *SetACLParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the set Acl params
func (o *SetACLParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the set Acl params
func (o *SetACLParams) WithContext(ctx context.Context) *SetACLParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the set Acl params
func (o *SetACLParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the set Acl params
func (o *SetACLParams) WithHTTPClient(client *http.Client) *SetACLParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the set Acl params
func (o *SetACLParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNamespaceACL adds the namespaceACL to the set Acl params
func (o *SetACLParams) WithNamespaceACL(namespaceACL *models.NamespaceACL) *SetACLParams {
	o.SetNamespaceACL(namespaceACL)
	return o
}

// SetNamespaceACL adds the namespaceAcl to the set Acl params
func (o *SetACLParams) SetNamespaceACL(namespaceACL *models.NamespaceACL) {
	o.NamespaceACL = namespaceACL
}

// WithNamespacePath adds the namespacePath to the set Acl params
func (o *SetACLParams) WithNamespacePath(namespacePath string) *SetACLParams {
	o.SetNamespacePath(namespacePath)
	return o
}

// SetNamespacePath adds the namespacePath to the set Acl params
func (o *SetACLParams) SetNamespacePath(namespacePath string) {
	o.NamespacePath = namespacePath
}

// WithACL adds the acl to the set Acl params
func (o *SetACLParams) WithACL(acl bool) *SetACLParams {
	o.SetACL(acl)
	return o
}

// SetACL adds the acl to the set Acl params
func (o *SetACLParams) SetACL(acl bool) {
	o.ACL = acl
}

// WithNsaccess adds the nsaccess to the set Acl params
func (o *SetACLParams) WithNsaccess(nsaccess *bool) *SetACLParams {
	o.SetNsaccess(nsaccess)
	return o
}

// SetNsaccess adds the nsaccess to the set Acl params
func (o *SetACLParams) SetNsaccess(nsaccess *bool) {
	o.Nsaccess = nsaccess
}

// WriteToRequest writes these params to a swagger request
func (o *SetACLParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NamespaceACL != nil {
		if err := r.SetBodyParam(o.NamespaceACL); err != nil {
			return err
		}
	}

	// path param NamespacePath
	if err := r.SetPathParam("NamespacePath", o.NamespacePath); err != nil {
		return err
	}

	// query param acl
	qrACL := o.ACL
	qACL := swag.FormatBool(qrACL)
	if qACL != "" {
		if err := r.SetQueryParam("acl", qACL); err != nil {
			return err
		}
	}

	if o.Nsaccess != nil {

		// query param nsaccess
		var qrNsaccess bool
		if o.Nsaccess != nil {
			qrNsaccess = *o.Nsaccess
		}
		qNsaccess := swag.FormatBool(qrNsaccess)
		if qNsaccess != "" {
			if err := r.SetQueryParam("nsaccess", qNsaccess); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
