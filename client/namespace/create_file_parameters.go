// Code generated by go-swagger; DO NOT EDIT.

package namespace

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewCreateFileParams creates a new CreateFileParams object
// with the default values initialized.
func NewCreateFileParams() *CreateFileParams {
	var (
		contentTypeDefault          = string("binary/octet-stream")
		xIsiIfsAccessControlDefault = string("0600")
		xIsiIfsTargetTypeDefault    = string("object")
	)
	return &CreateFileParams{
		ContentType:          &contentTypeDefault,
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFileParamsWithTimeout creates a new CreateFileParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateFileParamsWithTimeout(timeout time.Duration) *CreateFileParams {
	var (
		contentTypeDefault          = string("binary/octet-stream")
		xIsiIfsAccessControlDefault = string("0600")
		xIsiIfsTargetTypeDefault    = string("object")
	)
	return &CreateFileParams{
		ContentType:          &contentTypeDefault,
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		timeout: timeout,
	}
}

// NewCreateFileParamsWithContext creates a new CreateFileParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateFileParamsWithContext(ctx context.Context) *CreateFileParams {
	var (
		contentTypeDefault          = string("binary/octet-stream")
		xIsiIfsAccessControlDefault = string("0600")
		xIsiIfsTargetTypeDefault    = string("object")
	)
	return &CreateFileParams{
		ContentType:          &contentTypeDefault,
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,

		Context: ctx,
	}
}

// NewCreateFileParamsWithHTTPClient creates a new CreateFileParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateFileParamsWithHTTPClient(client *http.Client) *CreateFileParams {
	var (
		contentTypeDefault          = string("binary/octet-stream")
		xIsiIfsAccessControlDefault = string("0600")
		xIsiIfsTargetTypeDefault    = string("object")
	)
	return &CreateFileParams{
		ContentType:          &contentTypeDefault,
		XIsiIfsAccessControl: &xIsiIfsAccessControlDefault,
		XIsiIfsTargetType:    xIsiIfsTargetTypeDefault,
		HTTPClient:           client,
	}
}

/*CreateFileParams contains all the parameters to send to the API endpoint
for the create file operation typically these are written to a http.Request
*/
type CreateFileParams struct {

	/*ContentEncoding
	  Specifies the content encoding that was applied to the object content, so that decoding can be applied when retrieving the content.

	*/
	ContentEncoding *string
	/*ContentType
	  Specifies a standard MIME-type description of the content format.

	*/
	ContentType *string
	/*FileContents
	  The contents of the file object.

	*/
	FileContents string
	/*FilePath
	  File path relative to /.

	*/
	FilePath string
	/*Overwrite
	  Deletes and replaces the existing user attributes and ACLs of the directory with user-specified attributes and ACLS from the header, when set to true.

	*/
	Overwrite *bool
	/*XIsiIfsAccessControl
	  Specifies a pre-defined ACL value or POSIX mode with a string in octal string format.

	*/
	XIsiIfsAccessControl *string
	/*XIsiIfsTargetType
	  Specifies the resource type.

	*/
	XIsiIfsTargetType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create file params
func (o *CreateFileParams) WithTimeout(timeout time.Duration) *CreateFileParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create file params
func (o *CreateFileParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create file params
func (o *CreateFileParams) WithContext(ctx context.Context) *CreateFileParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create file params
func (o *CreateFileParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create file params
func (o *CreateFileParams) WithHTTPClient(client *http.Client) *CreateFileParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create file params
func (o *CreateFileParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContentEncoding adds the contentEncoding to the create file params
func (o *CreateFileParams) WithContentEncoding(contentEncoding *string) *CreateFileParams {
	o.SetContentEncoding(contentEncoding)
	return o
}

// SetContentEncoding adds the contentEncoding to the create file params
func (o *CreateFileParams) SetContentEncoding(contentEncoding *string) {
	o.ContentEncoding = contentEncoding
}

// WithContentType adds the contentType to the create file params
func (o *CreateFileParams) WithContentType(contentType *string) *CreateFileParams {
	o.SetContentType(contentType)
	return o
}

// SetContentType adds the contentType to the create file params
func (o *CreateFileParams) SetContentType(contentType *string) {
	o.ContentType = contentType
}

// WithFileContents adds the fileContents to the create file params
func (o *CreateFileParams) WithFileContents(fileContents string) *CreateFileParams {
	o.SetFileContents(fileContents)
	return o
}

// SetFileContents adds the fileContents to the create file params
func (o *CreateFileParams) SetFileContents(fileContents string) {
	o.FileContents = fileContents
}

// WithFilePath adds the filePath to the create file params
func (o *CreateFileParams) WithFilePath(filePath string) *CreateFileParams {
	o.SetFilePath(filePath)
	return o
}

// SetFilePath adds the filePath to the create file params
func (o *CreateFileParams) SetFilePath(filePath string) {
	o.FilePath = filePath
}

// WithOverwrite adds the overwrite to the create file params
func (o *CreateFileParams) WithOverwrite(overwrite *bool) *CreateFileParams {
	o.SetOverwrite(overwrite)
	return o
}

// SetOverwrite adds the overwrite to the create file params
func (o *CreateFileParams) SetOverwrite(overwrite *bool) {
	o.Overwrite = overwrite
}

// WithXIsiIfsAccessControl adds the xIsiIfsAccessControl to the create file params
func (o *CreateFileParams) WithXIsiIfsAccessControl(xIsiIfsAccessControl *string) *CreateFileParams {
	o.SetXIsiIfsAccessControl(xIsiIfsAccessControl)
	return o
}

// SetXIsiIfsAccessControl adds the xIsiIfsAccessControl to the create file params
func (o *CreateFileParams) SetXIsiIfsAccessControl(xIsiIfsAccessControl *string) {
	o.XIsiIfsAccessControl = xIsiIfsAccessControl
}

// WithXIsiIfsTargetType adds the xIsiIfsTargetType to the create file params
func (o *CreateFileParams) WithXIsiIfsTargetType(xIsiIfsTargetType string) *CreateFileParams {
	o.SetXIsiIfsTargetType(xIsiIfsTargetType)
	return o
}

// SetXIsiIfsTargetType adds the xIsiIfsTargetType to the create file params
func (o *CreateFileParams) SetXIsiIfsTargetType(xIsiIfsTargetType string) {
	o.XIsiIfsTargetType = xIsiIfsTargetType
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFileParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ContentEncoding != nil {

		// header param Content-Encoding
		if err := r.SetHeaderParam("Content-Encoding", *o.ContentEncoding); err != nil {
			return err
		}

	}

	if o.ContentType != nil {

		// header param Content-Type
		if err := r.SetHeaderParam("Content-Type", *o.ContentType); err != nil {
			return err
		}

	}

	if err := r.SetBodyParam(o.FileContents); err != nil {
		return err
	}

	// path param FilePath
	if err := r.SetPathParam("FilePath", o.FilePath); err != nil {
		return err
	}

	if o.Overwrite != nil {

		// query param overwrite
		var qrOverwrite bool
		if o.Overwrite != nil {
			qrOverwrite = *o.Overwrite
		}
		qOverwrite := swag.FormatBool(qrOverwrite)
		if qOverwrite != "" {
			if err := r.SetQueryParam("overwrite", qOverwrite); err != nil {
				return err
			}
		}

	}

	if o.XIsiIfsAccessControl != nil {

		// header param x-isi-ifs-access-control
		if err := r.SetHeaderParam("x-isi-ifs-access-control", *o.XIsiIfsAccessControl); err != nil {
			return err
		}

	}

	// header param x-isi-ifs-target-type
	if err := r.SetHeaderParam("x-isi-ifs-target-type", o.XIsiIfsTargetType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
