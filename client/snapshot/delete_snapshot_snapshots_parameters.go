// Code generated by go-swagger; DO NOT EDIT.

package snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteSnapshotSnapshotsParams creates a new DeleteSnapshotSnapshotsParams object
// with the default values initialized.
func NewDeleteSnapshotSnapshotsParams() *DeleteSnapshotSnapshotsParams {
	var ()
	return &DeleteSnapshotSnapshotsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSnapshotSnapshotsParamsWithTimeout creates a new DeleteSnapshotSnapshotsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSnapshotSnapshotsParamsWithTimeout(timeout time.Duration) *DeleteSnapshotSnapshotsParams {
	var ()
	return &DeleteSnapshotSnapshotsParams{

		timeout: timeout,
	}
}

// NewDeleteSnapshotSnapshotsParamsWithContext creates a new DeleteSnapshotSnapshotsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSnapshotSnapshotsParamsWithContext(ctx context.Context) *DeleteSnapshotSnapshotsParams {
	var ()
	return &DeleteSnapshotSnapshotsParams{

		Context: ctx,
	}
}

// NewDeleteSnapshotSnapshotsParamsWithHTTPClient creates a new DeleteSnapshotSnapshotsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSnapshotSnapshotsParamsWithHTTPClient(client *http.Client) *DeleteSnapshotSnapshotsParams {
	var ()
	return &DeleteSnapshotSnapshotsParams{
		HTTPClient: client,
	}
}

/*DeleteSnapshotSnapshotsParams contains all the parameters to send to the API endpoint
for the delete snapshot snapshots operation typically these are written to a http.Request
*/
type DeleteSnapshotSnapshotsParams struct {

	/*Schedule
	  Only list snapshots created by this schedule.

	*/
	Schedule *string
	/*Type
	  Only list snapshots matching this type.

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) WithTimeout(timeout time.Duration) *DeleteSnapshotSnapshotsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) WithContext(ctx context.Context) *DeleteSnapshotSnapshotsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) WithHTTPClient(client *http.Client) *DeleteSnapshotSnapshotsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSchedule adds the schedule to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) WithSchedule(schedule *string) *DeleteSnapshotSnapshotsParams {
	o.SetSchedule(schedule)
	return o
}

// SetSchedule adds the schedule to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) SetSchedule(schedule *string) {
	o.Schedule = schedule
}

// WithType adds the typeVar to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) WithType(typeVar *string) *DeleteSnapshotSnapshotsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the delete snapshot snapshots params
func (o *DeleteSnapshotSnapshotsParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSnapshotSnapshotsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Schedule != nil {

		// query param schedule
		var qrSchedule string
		if o.Schedule != nil {
			qrSchedule = *o.Schedule
		}
		qSchedule := qrSchedule
		if qSchedule != "" {
			if err := r.SetQueryParam("schedule", qSchedule); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
