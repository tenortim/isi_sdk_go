// Code generated by go-swagger; DO NOT EDIT.

package snapshot

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new snapshot API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for snapshot API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSnapshotAlias Create a new snapshot alias.
*/
func (a *Client) CreateSnapshotAlias(params *CreateSnapshotAliasParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotAlias",
		Method:             "POST",
		PathPattern:        "/platform/1/snapshot/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotAliasOK), nil

}

/*
CreateSnapshotChangelist Create a new changelist.
*/
func (a *Client) CreateSnapshotChangelist(params *CreateSnapshotChangelistParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotChangelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotChangelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotChangelist",
		Method:             "POST",
		PathPattern:        "/platform/1/snapshot/changelists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotChangelistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotChangelistOK), nil

}

/*
CreateSnapshotRepstate Create a new repstates.
*/
func (a *Client) CreateSnapshotRepstate(params *CreateSnapshotRepstateParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotRepstateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotRepstateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotRepstate",
		Method:             "POST",
		PathPattern:        "/platform/1/snapshot/repstates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotRepstateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotRepstateOK), nil

}

/*
CreateSnapshotSchedule Create a new schedule.
*/
func (a *Client) CreateSnapshotSchedule(params *CreateSnapshotScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotSchedule",
		Method:             "POST",
		PathPattern:        "/platform/3/snapshot/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotScheduleOK), nil

}

/*
CreateSnapshotSnapshot Create a new snapshot.
*/
func (a *Client) CreateSnapshotSnapshot(params *CreateSnapshotSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSnapshotSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSnapshotSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSnapshotSnapshot",
		Method:             "POST",
		PathPattern:        "/platform/1/snapshot/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSnapshotSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSnapshotSnapshotOK), nil

}

/*
DeleteSnapshotAlias Delete the snapshot alias
*/
func (a *Client) DeleteSnapshotAlias(params *DeleteSnapshotAliasParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotAlias",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/aliases/{SnapshotAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotAliasNoContent), nil

}

/*
DeleteSnapshotAliases Delete all or matching snapshot aliases.
*/
func (a *Client) DeleteSnapshotAliases(params *DeleteSnapshotAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotAliasesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotAliases",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotAliasesNoContent), nil

}

/*
DeleteSnapshotChangelist Delete the specified changelist.
*/
func (a *Client) DeleteSnapshotChangelist(params *DeleteSnapshotChangelistParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotChangelistNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotChangelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotChangelist",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/changelists/{SnapshotChangelistId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotChangelistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotChangelistNoContent), nil

}

/*
DeleteSnapshotRepstate Delete the specified repstate.
*/
func (a *Client) DeleteSnapshotRepstate(params *DeleteSnapshotRepstateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotRepstateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotRepstateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotRepstate",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/repstates/{SnapshotRepstateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotRepstateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotRepstateNoContent), nil

}

/*
DeleteSnapshotSchedule Delete the schedule. This does not affect already created snapshots.
*/
func (a *Client) DeleteSnapshotSchedule(params *DeleteSnapshotScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotSchedule",
		Method:             "DELETE",
		PathPattern:        "/platform/3/snapshot/schedules/{SnapshotScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotScheduleNoContent), nil

}

/*
DeleteSnapshotSchedules Delete all snapshot schedules.
*/
func (a *Client) DeleteSnapshotSchedules(params *DeleteSnapshotSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotSchedulesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotSchedules",
		Method:             "DELETE",
		PathPattern:        "/platform/3/snapshot/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotSchedulesNoContent), nil

}

/*
DeleteSnapshotSnapshot Delete the snapshot. Deleted snapshots will be placed into a deleting state until the system can reclaim the space used by the snapshot.
*/
func (a *Client) DeleteSnapshotSnapshot(params *DeleteSnapshotSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotSnapshotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotSnapshot",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotSnapshotNoContent), nil

}

/*
DeleteSnapshotSnapshots Delete all or matching snapshots.
*/
func (a *Client) DeleteSnapshotSnapshots(params *DeleteSnapshotSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSnapshotSnapshotsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSnapshotSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSnapshotSnapshots",
		Method:             "DELETE",
		PathPattern:        "/platform/1/snapshot/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSnapshotSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSnapshotSnapshotsNoContent), nil

}

/*
GetSnapshotAlias Retrieve snapshot alias information.
*/
func (a *Client) GetSnapshotAlias(params *GetSnapshotAliasParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotAlias",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/aliases/{SnapshotAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotAliasOK), nil

}

/*
GetSnapshotChangelist Retrieve basic information on a changelist.
*/
func (a *Client) GetSnapshotChangelist(params *GetSnapshotChangelistParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotChangelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotChangelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotChangelist",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/changelists/{SnapshotChangelistId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotChangelistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotChangelistOK), nil

}

/*
GetSnapshotLicense Retrieve license information.
*/
func (a *Client) GetSnapshotLicense(params *GetSnapshotLicenseParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotLicenseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotLicenseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotLicense",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/license",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotLicenseReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotLicenseOK), nil

}

/*
GetSnapshotPending Return list of snapshots to be taken.
*/
func (a *Client) GetSnapshotPending(params *GetSnapshotPendingParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotPendingOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotPendingParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotPending",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/pending",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotPendingReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotPendingOK), nil

}

/*
GetSnapshotRepstate Retrieve basic information on a repstate.
*/
func (a *Client) GetSnapshotRepstate(params *GetSnapshotRepstateParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotRepstateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotRepstateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotRepstate",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/repstates/{SnapshotRepstateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotRepstateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotRepstateOK), nil

}

/*
GetSnapshotSchedule Retrieve the schedule.
*/
func (a *Client) GetSnapshotSchedule(params *GetSnapshotScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotSchedule",
		Method:             "GET",
		PathPattern:        "/platform/3/snapshot/schedules/{SnapshotScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotScheduleOK), nil

}

/*
GetSnapshotSettings List all settings
*/
func (a *Client) GetSnapshotSettings(params *GetSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotSettings",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotSettingsOK), nil

}

/*
GetSnapshotSnapshot Retrieve snapshot information.
*/
func (a *Client) GetSnapshotSnapshot(params *GetSnapshotSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotSnapshotOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotSnapshot",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotSnapshotOK), nil

}

/*
GetSnapshotSnapshotsSummary Return summary information about snapshots.
*/
func (a *Client) GetSnapshotSnapshotsSummary(params *GetSnapshotSnapshotsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnapshotSnapshotsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnapshotSnapshotsSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnapshotSnapshotsSummary",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/snapshots-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnapshotSnapshotsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnapshotSnapshotsSummaryOK), nil

}

/*
ListSnapshotAliases List all or matching snapshot aliases.
*/
func (a *Client) ListSnapshotAliases(params *ListSnapshotAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotAliases",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotAliasesOK), nil

}

/*
ListSnapshotChangelists List all changelists.
*/
func (a *Client) ListSnapshotChangelists(params *ListSnapshotChangelistsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotChangelistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotChangelistsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotChangelists",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/changelists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotChangelistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotChangelistsOK), nil

}

/*
ListSnapshotRepstates List all repstates.
*/
func (a *Client) ListSnapshotRepstates(params *ListSnapshotRepstatesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotRepstatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotRepstatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotRepstates",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/repstates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotRepstatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotRepstatesOK), nil

}

/*
ListSnapshotSchedules List all or matching schedules.
*/
func (a *Client) ListSnapshotSchedules(params *ListSnapshotSchedulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotSchedulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotSchedulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotSchedules",
		Method:             "GET",
		PathPattern:        "/platform/3/snapshot/schedules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotSchedulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotSchedulesOK), nil

}

/*
ListSnapshotSnapshots List all or matching snapshots.
*/
func (a *Client) ListSnapshotSnapshots(params *ListSnapshotSnapshotsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSnapshotSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSnapshotSnapshotsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSnapshotSnapshots",
		Method:             "GET",
		PathPattern:        "/platform/1/snapshot/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSnapshotSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSnapshotSnapshotsOK), nil

}

/*
UpdateSnapshotAlias Modify snapshot alias. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSnapshotAlias(params *UpdateSnapshotAliasParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnapshotAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnapshotAlias",
		Method:             "PUT",
		PathPattern:        "/platform/1/snapshot/aliases/{SnapshotAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnapshotAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnapshotAliasNoContent), nil

}

/*
UpdateSnapshotSchedule Modify the schedule. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSnapshotSchedule(params *UpdateSnapshotScheduleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnapshotScheduleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnapshotSchedule",
		Method:             "PUT",
		PathPattern:        "/platform/3/snapshot/schedules/{SnapshotScheduleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnapshotScheduleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnapshotScheduleNoContent), nil

}

/*
UpdateSnapshotSettings Modify one or more settings.
*/
func (a *Client) UpdateSnapshotSettings(params *UpdateSnapshotSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnapshotSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnapshotSettings",
		Method:             "PUT",
		PathPattern:        "/platform/1/snapshot/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnapshotSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnapshotSettingsNoContent), nil

}

/*
UpdateSnapshotSnapshot Modify snapshot. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSnapshotSnapshot(params *UpdateSnapshotSnapshotParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnapshotSnapshotNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnapshotSnapshotParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnapshotSnapshot",
		Method:             "PUT",
		PathPattern:        "/platform/1/snapshot/snapshots/{SnapshotSnapshotId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnapshotSnapshotReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnapshotSnapshotNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
