// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteSmbLogLevelFiltersParams creates a new DeleteSmbLogLevelFiltersParams object
// with the default values initialized.
func NewDeleteSmbLogLevelFiltersParams() *DeleteSmbLogLevelFiltersParams {
	var ()
	return &DeleteSmbLogLevelFiltersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSmbLogLevelFiltersParamsWithTimeout creates a new DeleteSmbLogLevelFiltersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSmbLogLevelFiltersParamsWithTimeout(timeout time.Duration) *DeleteSmbLogLevelFiltersParams {
	var ()
	return &DeleteSmbLogLevelFiltersParams{

		timeout: timeout,
	}
}

// NewDeleteSmbLogLevelFiltersParamsWithContext creates a new DeleteSmbLogLevelFiltersParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSmbLogLevelFiltersParamsWithContext(ctx context.Context) *DeleteSmbLogLevelFiltersParams {
	var ()
	return &DeleteSmbLogLevelFiltersParams{

		Context: ctx,
	}
}

// NewDeleteSmbLogLevelFiltersParamsWithHTTPClient creates a new DeleteSmbLogLevelFiltersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSmbLogLevelFiltersParamsWithHTTPClient(client *http.Client) *DeleteSmbLogLevelFiltersParams {
	var ()
	return &DeleteSmbLogLevelFiltersParams{
		HTTPClient: client,
	}
}

/*DeleteSmbLogLevelFiltersParams contains all the parameters to send to the API endpoint
for the delete smb log level filters operation typically these are written to a http.Request
*/
type DeleteSmbLogLevelFiltersParams struct {

	/*Level
	  Only return results with a given level.

	*/
	Level *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) WithTimeout(timeout time.Duration) *DeleteSmbLogLevelFiltersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) WithContext(ctx context.Context) *DeleteSmbLogLevelFiltersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) WithHTTPClient(client *http.Client) *DeleteSmbLogLevelFiltersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLevel adds the level to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) WithLevel(level *string) *DeleteSmbLogLevelFiltersParams {
	o.SetLevel(level)
	return o
}

// SetLevel adds the level to the delete smb log level filters params
func (o *DeleteSmbLogLevelFiltersParams) SetLevel(level *string) {
	o.Level = level
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSmbLogLevelFiltersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Level != nil {

		// query param level
		var qrLevel string
		if o.Level != nil {
			qrLevel = *o.Level
		}
		qLevel := qrLevel
		if qLevel != "" {
			if err := r.SetQueryParam("level", qLevel); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
