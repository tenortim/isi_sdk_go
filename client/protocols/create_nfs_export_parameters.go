// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateNfsExportParams creates a new CreateNfsExportParams object
// with the default values initialized.
func NewCreateNfsExportParams() *CreateNfsExportParams {
	var ()
	return &CreateNfsExportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNfsExportParamsWithTimeout creates a new CreateNfsExportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNfsExportParamsWithTimeout(timeout time.Duration) *CreateNfsExportParams {
	var ()
	return &CreateNfsExportParams{

		timeout: timeout,
	}
}

// NewCreateNfsExportParamsWithContext creates a new CreateNfsExportParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNfsExportParamsWithContext(ctx context.Context) *CreateNfsExportParams {
	var ()
	return &CreateNfsExportParams{

		Context: ctx,
	}
}

// NewCreateNfsExportParamsWithHTTPClient creates a new CreateNfsExportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNfsExportParamsWithHTTPClient(client *http.Client) *CreateNfsExportParams {
	var ()
	return &CreateNfsExportParams{
		HTTPClient: client,
	}
}

/*CreateNfsExportParams contains all the parameters to send to the API endpoint
for the create nfs export operation typically these are written to a http.Request
*/
type CreateNfsExportParams struct {

	/*NfsExport*/
	NfsExport *models.NfsExportCreateParams
	/*Force
	  If true, the export will be created even if it conflicts with another export.

	*/
	Force *bool
	/*IgnoreBadAuth
	  Ignore invalid users.

	*/
	IgnoreBadAuth *bool
	/*IgnoreBadPaths
	  Ignore nonexistent or otherwise bad paths.

	*/
	IgnoreBadPaths *bool
	/*IgnoreConflicts
	  Ignore conflicts with existing exports.

	*/
	IgnoreConflicts *bool
	/*IgnoreUnresolvableHosts
	  Ignore unresolvable hosts.

	*/
	IgnoreUnresolvableHosts *bool
	/*Zone
	  Access zone

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create nfs export params
func (o *CreateNfsExportParams) WithTimeout(timeout time.Duration) *CreateNfsExportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create nfs export params
func (o *CreateNfsExportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create nfs export params
func (o *CreateNfsExportParams) WithContext(ctx context.Context) *CreateNfsExportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create nfs export params
func (o *CreateNfsExportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create nfs export params
func (o *CreateNfsExportParams) WithHTTPClient(client *http.Client) *CreateNfsExportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create nfs export params
func (o *CreateNfsExportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNfsExport adds the nfsExport to the create nfs export params
func (o *CreateNfsExportParams) WithNfsExport(nfsExport *models.NfsExportCreateParams) *CreateNfsExportParams {
	o.SetNfsExport(nfsExport)
	return o
}

// SetNfsExport adds the nfsExport to the create nfs export params
func (o *CreateNfsExportParams) SetNfsExport(nfsExport *models.NfsExportCreateParams) {
	o.NfsExport = nfsExport
}

// WithForce adds the force to the create nfs export params
func (o *CreateNfsExportParams) WithForce(force *bool) *CreateNfsExportParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the create nfs export params
func (o *CreateNfsExportParams) SetForce(force *bool) {
	o.Force = force
}

// WithIgnoreBadAuth adds the ignoreBadAuth to the create nfs export params
func (o *CreateNfsExportParams) WithIgnoreBadAuth(ignoreBadAuth *bool) *CreateNfsExportParams {
	o.SetIgnoreBadAuth(ignoreBadAuth)
	return o
}

// SetIgnoreBadAuth adds the ignoreBadAuth to the create nfs export params
func (o *CreateNfsExportParams) SetIgnoreBadAuth(ignoreBadAuth *bool) {
	o.IgnoreBadAuth = ignoreBadAuth
}

// WithIgnoreBadPaths adds the ignoreBadPaths to the create nfs export params
func (o *CreateNfsExportParams) WithIgnoreBadPaths(ignoreBadPaths *bool) *CreateNfsExportParams {
	o.SetIgnoreBadPaths(ignoreBadPaths)
	return o
}

// SetIgnoreBadPaths adds the ignoreBadPaths to the create nfs export params
func (o *CreateNfsExportParams) SetIgnoreBadPaths(ignoreBadPaths *bool) {
	o.IgnoreBadPaths = ignoreBadPaths
}

// WithIgnoreConflicts adds the ignoreConflicts to the create nfs export params
func (o *CreateNfsExportParams) WithIgnoreConflicts(ignoreConflicts *bool) *CreateNfsExportParams {
	o.SetIgnoreConflicts(ignoreConflicts)
	return o
}

// SetIgnoreConflicts adds the ignoreConflicts to the create nfs export params
func (o *CreateNfsExportParams) SetIgnoreConflicts(ignoreConflicts *bool) {
	o.IgnoreConflicts = ignoreConflicts
}

// WithIgnoreUnresolvableHosts adds the ignoreUnresolvableHosts to the create nfs export params
func (o *CreateNfsExportParams) WithIgnoreUnresolvableHosts(ignoreUnresolvableHosts *bool) *CreateNfsExportParams {
	o.SetIgnoreUnresolvableHosts(ignoreUnresolvableHosts)
	return o
}

// SetIgnoreUnresolvableHosts adds the ignoreUnresolvableHosts to the create nfs export params
func (o *CreateNfsExportParams) SetIgnoreUnresolvableHosts(ignoreUnresolvableHosts *bool) {
	o.IgnoreUnresolvableHosts = ignoreUnresolvableHosts
}

// WithZone adds the zone to the create nfs export params
func (o *CreateNfsExportParams) WithZone(zone *string) *CreateNfsExportParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the create nfs export params
func (o *CreateNfsExportParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNfsExportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NfsExport != nil {
		if err := r.SetBodyParam(o.NfsExport); err != nil {
			return err
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.IgnoreBadAuth != nil {

		// query param ignore_bad_auth
		var qrIgnoreBadAuth bool
		if o.IgnoreBadAuth != nil {
			qrIgnoreBadAuth = *o.IgnoreBadAuth
		}
		qIgnoreBadAuth := swag.FormatBool(qrIgnoreBadAuth)
		if qIgnoreBadAuth != "" {
			if err := r.SetQueryParam("ignore_bad_auth", qIgnoreBadAuth); err != nil {
				return err
			}
		}

	}

	if o.IgnoreBadPaths != nil {

		// query param ignore_bad_paths
		var qrIgnoreBadPaths bool
		if o.IgnoreBadPaths != nil {
			qrIgnoreBadPaths = *o.IgnoreBadPaths
		}
		qIgnoreBadPaths := swag.FormatBool(qrIgnoreBadPaths)
		if qIgnoreBadPaths != "" {
			if err := r.SetQueryParam("ignore_bad_paths", qIgnoreBadPaths); err != nil {
				return err
			}
		}

	}

	if o.IgnoreConflicts != nil {

		// query param ignore_conflicts
		var qrIgnoreConflicts bool
		if o.IgnoreConflicts != nil {
			qrIgnoreConflicts = *o.IgnoreConflicts
		}
		qIgnoreConflicts := swag.FormatBool(qrIgnoreConflicts)
		if qIgnoreConflicts != "" {
			if err := r.SetQueryParam("ignore_conflicts", qIgnoreConflicts); err != nil {
				return err
			}
		}

	}

	if o.IgnoreUnresolvableHosts != nil {

		// query param ignore_unresolvable_hosts
		var qrIgnoreUnresolvableHosts bool
		if o.IgnoreUnresolvableHosts != nil {
			qrIgnoreUnresolvableHosts = *o.IgnoreUnresolvableHosts
		}
		qIgnoreUnresolvableHosts := swag.FormatBool(qrIgnoreUnresolvableHosts)
		if qIgnoreUnresolvableHosts != "" {
			if err := r.SetQueryParam("ignore_unresolvable_hosts", qIgnoreUnresolvableHosts); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
