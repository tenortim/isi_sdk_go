// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new protocols API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for protocols API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateHdfsProxyuser Create a new HDFS proxyuser.
*/
func (a *Client) CreateHdfsProxyuser(params *CreateHdfsProxyuserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHdfsProxyuserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHdfsProxyuserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHdfsProxyuser",
		Method:             "POST",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHdfsProxyuserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHdfsProxyuserOK), nil

}

/*
CreateHdfsRack Create a new HDFS rack.
*/
func (a *Client) CreateHdfsRack(params *CreateHdfsRackParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHdfsRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHdfsRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHdfsRack",
		Method:             "POST",
		PathPattern:        "/platform/1/protocols/hdfs/racks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHdfsRackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHdfsRackOK), nil

}

/*
CreateNdmpSettingsVariable Create a preferred NDMP environment variable.
*/
func (a *Client) CreateNdmpSettingsVariable(params *CreateNdmpSettingsVariableParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNdmpSettingsVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNdmpSettingsVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNdmpSettingsVariable",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNdmpSettingsVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNdmpSettingsVariableOK), nil

}

/*
CreateNdmpUser Created a new user.
*/
func (a *Client) CreateNdmpUser(params *CreateNdmpUserParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNdmpUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNdmpUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNdmpUser",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/ndmp/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNdmpUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNdmpUserOK), nil

}

/*
CreateNfsAlias Create a new NFS alias.
*/
func (a *Client) CreateNfsAlias(params *CreateNfsAliasParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsAlias",
		Method:             "POST",
		PathPattern:        "/platform/2/protocols/nfs/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsAliasOK), nil

}

/*
CreateNfsExport Create a new NFS export.
*/
func (a *Client) CreateNfsExport(params *CreateNfsExportParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsExport",
		Method:             "POST",
		PathPattern:        "/platform/2/protocols/nfs/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsExportOK), nil

}

/*
CreateNfsNetgroupCheckItem Update the NFS netgroups in the cache.
*/
func (a *Client) CreateNfsNetgroupCheckItem(params *CreateNfsNetgroupCheckItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsNetgroupCheckItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsNetgroupCheckItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsNetgroupCheckItem",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/nfs/netgroup/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsNetgroupCheckItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsNetgroupCheckItemOK), nil

}

/*
CreateNfsNetgroupFlushItem Flush the NFS netgroups in the cache.
*/
func (a *Client) CreateNfsNetgroupFlushItem(params *CreateNfsNetgroupFlushItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsNetgroupFlushItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsNetgroupFlushItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsNetgroupFlushItem",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/nfs/netgroup/flush",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsNetgroupFlushItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsNetgroupFlushItemOK), nil

}

/*
CreateNfsNlmSessionsCheckItem Perform an active scan for lost NFSv3 locks.
*/
func (a *Client) CreateNfsNlmSessionsCheckItem(params *CreateNfsNlmSessionsCheckItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsNlmSessionsCheckItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsNlmSessionsCheckItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsNlmSessionsCheckItem",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/nfs/nlm/sessions-check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsNlmSessionsCheckItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsNlmSessionsCheckItemOK), nil

}

/*
CreateNfsReloadItem Reload default NFS export configuration.
*/
func (a *Client) CreateNfsReloadItem(params *CreateNfsReloadItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNfsReloadItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNfsReloadItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNfsReloadItem",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/nfs/reload",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNfsReloadItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNfsReloadItemOK), nil

}

/*
CreateNtpServer Create an NTP server entry.
*/
func (a *Client) CreateNtpServer(params *CreateNtpServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNtpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNtpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNtpServer",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/ntp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNtpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNtpServerOK), nil

}

/*
CreateSmbLogLevelFilter Add an SMB log filter.
*/
func (a *Client) CreateSmbLogLevelFilter(params *CreateSmbLogLevelFilterParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSmbLogLevelFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmbLogLevelFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmbLogLevelFilter",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/smb/log-level/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSmbLogLevelFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSmbLogLevelFilterOK), nil

}

/*
CreateSmbShare Create a new share.
*/
func (a *Client) CreateSmbShare(params *CreateSmbShareParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSmbShareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmbShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmbShare",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/smb/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSmbShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSmbShareOK), nil

}

/*
CreateSwiftAccount Create a new Swift account
*/
func (a *Client) CreateSwiftAccount(params *CreateSwiftAccountParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSwiftAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSwiftAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSwiftAccount",
		Method:             "POST",
		PathPattern:        "/platform/3/protocols/swift/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSwiftAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSwiftAccountOK), nil

}

/*
DeleteHdfsProxyuser Delete an HDFS proxyuser.
*/
func (a *Client) DeleteHdfsProxyuser(params *DeleteHdfsProxyuserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHdfsProxyuserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHdfsProxyuserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHdfsProxyuser",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHdfsProxyuserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHdfsProxyuserNoContent), nil

}

/*
DeleteHdfsRack Delete the HDFS rack.
*/
func (a *Client) DeleteHdfsRack(params *DeleteHdfsRackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteHdfsRackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHdfsRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHdfsRack",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/hdfs/racks/{HdfsRackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteHdfsRackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteHdfsRackNoContent), nil

}

/*
DeleteNdmpContextsBackupByID Delete a backup context
*/
func (a *Client) DeleteNdmpContextsBackupByID(params *DeleteNdmpContextsBackupByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpContextsBackupByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpContextsBackupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpContextsBackupById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/backup/{NdmpContextsBackupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpContextsBackupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpContextsBackupByIDNoContent), nil

}

/*
DeleteNdmpContextsBreByID Delete a NDMP BRE context
*/
func (a *Client) DeleteNdmpContextsBreByID(params *DeleteNdmpContextsBreByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpContextsBreByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpContextsBreByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpContextsBreById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/bre/{NdmpContextsBreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpContextsBreByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpContextsBreByIDNoContent), nil

}

/*
DeleteNdmpContextsRestoreByID Delete a restore context
*/
func (a *Client) DeleteNdmpContextsRestoreByID(params *DeleteNdmpContextsRestoreByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpContextsRestoreByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpContextsRestoreByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpContextsRestoreById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/restore/{NdmpContextsRestoreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpContextsRestoreByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpContextsRestoreByIDNoContent), nil

}

/*
DeleteNdmpDumpdate Delete dumpdates entries of a specified path.
*/
func (a *Client) DeleteNdmpDumpdate(params *DeleteNdmpDumpdateParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpDumpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpDumpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpDumpdate",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/dumpdates/{NdmpDumpdateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpDumpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpDumpdateNoContent), nil

}

/*
DeleteNdmpSession Delete the ndmp session.
*/
func (a *Client) DeleteNdmpSession(params *DeleteNdmpSessionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpSession",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/sessions/{NdmpSessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpSessionNoContent), nil

}

/*
DeleteNdmpSettingsVariable Delete preferred environment variable entries
*/
func (a *Client) DeleteNdmpSettingsVariable(params *DeleteNdmpSettingsVariableParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpSettingsVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpSettingsVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpSettingsVariable",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpSettingsVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpSettingsVariableNoContent), nil

}

/*
DeleteNdmpUser Delete the user.
*/
func (a *Client) DeleteNdmpUser(params *DeleteNdmpUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNdmpUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNdmpUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNdmpUser",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ndmp/users/{NdmpUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNdmpUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNdmpUserNoContent), nil

}

/*
DeleteNfsAlias Delete the export.
*/
func (a *Client) DeleteNfsAlias(params *DeleteNfsAliasParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNfsAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNfsAlias",
		Method:             "DELETE",
		PathPattern:        "/platform/2/protocols/nfs/aliases/{NfsAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNfsAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNfsAliasNoContent), nil

}

/*
DeleteNfsExport Delete the export.
*/
func (a *Client) DeleteNfsExport(params *DeleteNfsExportParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNfsExportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNfsExport",
		Method:             "DELETE",
		PathPattern:        "/platform/2/protocols/nfs/exports/{NfsExportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNfsExportNoContent), nil

}

/*
DeleteNfsNlmSession Delete all lock state for this host.
*/
func (a *Client) DeleteNfsNlmSession(params *DeleteNfsNlmSessionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNfsNlmSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNfsNlmSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNfsNlmSession",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/nfs/nlm/sessions/{NfsNlmSessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNfsNlmSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNfsNlmSessionNoContent), nil

}

/*
DeleteNtpServer Delete an NTP server entry.
*/
func (a *Client) DeleteNtpServer(params *DeleteNtpServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNtpServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNtpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNtpServer",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ntp/servers/{NtpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNtpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNtpServerNoContent), nil

}

/*
DeleteNtpServers Delete all NTP server entries.
*/
func (a *Client) DeleteNtpServers(params *DeleteNtpServersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNtpServersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNtpServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNtpServers",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/ntp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNtpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNtpServersNoContent), nil

}

/*
DeleteSmbLogLevelFilter Delete log filter.
*/
func (a *Client) DeleteSmbLogLevelFilter(params *DeleteSmbLogLevelFilterParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbLogLevelFilterNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbLogLevelFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbLogLevelFilter",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/smb/log-level/filters/{SmbLogLevelFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbLogLevelFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbLogLevelFilterNoContent), nil

}

/*
DeleteSmbLogLevelFilters Delete existing SMB log filters.
*/
func (a *Client) DeleteSmbLogLevelFilters(params *DeleteSmbLogLevelFiltersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbLogLevelFiltersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbLogLevelFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbLogLevelFilters",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/smb/log-level/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbLogLevelFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbLogLevelFiltersNoContent), nil

}

/*
DeleteSmbOpenfile Close the file in the SMB server.
*/
func (a *Client) DeleteSmbOpenfile(params *DeleteSmbOpenfileParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbOpenfileNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbOpenfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbOpenfile",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/smb/openfiles/{SmbOpenfileId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbOpenfileReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbOpenfileNoContent), nil

}

/*
DeleteSmbSession Close the SMB session.
*/
func (a *Client) DeleteSmbSession(params *DeleteSmbSessionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbSessionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbSession",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/smb/sessions/{SmbSessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbSessionNoContent), nil

}

/*
DeleteSmbSessionsComputerUser Close the SMB session.
*/
func (a *Client) DeleteSmbSessionsComputerUser(params *DeleteSmbSessionsComputerUserParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbSessionsComputerUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbSessionsComputerUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbSessionsComputerUser",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/smb/sessions/{Computer}/{SmbSessionsComputerUser}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbSessionsComputerUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbSessionsComputerUserNoContent), nil

}

/*
DeleteSmbShare Delete the share.
*/
func (a *Client) DeleteSmbShare(params *DeleteSmbShareParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbShareNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbShare",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/smb/shares/{SmbShareId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbShareNoContent), nil

}

/*
DeleteSmbShares Delete multiple smb shares.
*/
func (a *Client) DeleteSmbShares(params *DeleteSmbSharesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSmbSharesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmbSharesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmbShares",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/smb/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSmbSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmbSharesNoContent), nil

}

/*
DeleteSwiftAccount Delete a Swift account.
*/
func (a *Client) DeleteSwiftAccount(params *DeleteSwiftAccountParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSwiftAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSwiftAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSwiftAccount",
		Method:             "DELETE",
		PathPattern:        "/platform/3/protocols/swift/accounts/{SwiftAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSwiftAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSwiftAccountNoContent), nil

}

/*
GetFtpSettings Retrieve the FTP settings.
*/
func (a *Client) GetFtpSettings(params *GetFtpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFtpSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFtpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFtpSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ftp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFtpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFtpSettingsOK), nil

}

/*
GetHdfsLogLevel Retrieve the HDFS service log-level.
*/
func (a *Client) GetHdfsLogLevel(params *GetHdfsLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*GetHdfsLogLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHdfsLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHdfsLogLevel",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/hdfs/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHdfsLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHdfsLogLevelOK), nil

}

/*
GetHdfsProxyuser View the proxyuser.
*/
func (a *Client) GetHdfsProxyuser(params *GetHdfsProxyuserParams, authInfo runtime.ClientAuthInfoWriter) (*GetHdfsProxyuserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHdfsProxyuserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHdfsProxyuser",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHdfsProxyuserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHdfsProxyuserOK), nil

}

/*
GetHdfsRack Retrieve the HDFS rack.
*/
func (a *Client) GetHdfsRack(params *GetHdfsRackParams, authInfo runtime.ClientAuthInfoWriter) (*GetHdfsRackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHdfsRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHdfsRack",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/hdfs/racks/{HdfsRackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHdfsRackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHdfsRackOK), nil

}

/*
GetHdfsSettings Retrieve HDFS properties.
*/
func (a *Client) GetHdfsSettings(params *GetHdfsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetHdfsSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHdfsSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHdfsSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/hdfs/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHdfsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHdfsSettingsOK), nil

}

/*
GetHTTPSettings Retrieve HTTP properties.
*/
func (a *Client) GetHTTPSettings(params *GetHTTPSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetHTTPSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHTTPSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHttpSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/http/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHTTPSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHTTPSettingsOK), nil

}

/*
GetNdmpContextsBackup Get List of NDMP Backup Contexts.
*/
func (a *Client) GetNdmpContextsBackup(params *GetNdmpContextsBackupParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsBackup",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsBackupOK), nil

}

/*
GetNdmpContextsBackupByID View a NDMP backup context
*/
func (a *Client) GetNdmpContextsBackupByID(params *GetNdmpContextsBackupByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsBackupByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsBackupByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsBackupById",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/backup/{NdmpContextsBackupId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsBackupByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsBackupByIDOK), nil

}

/*
GetNdmpContextsBre Get list of NDMP BRE Contexts.
*/
func (a *Client) GetNdmpContextsBre(params *GetNdmpContextsBreParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsBreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsBreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsBre",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/bre",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsBreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsBreOK), nil

}

/*
GetNdmpContextsBreByID View a NDMP BRE context
*/
func (a *Client) GetNdmpContextsBreByID(params *GetNdmpContextsBreByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsBreByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsBreByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsBreById",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/bre/{NdmpContextsBreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsBreByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsBreByIDOK), nil

}

/*
GetNdmpContextsRestore Get List of NDMP Restore Contexts.
*/
func (a *Client) GetNdmpContextsRestore(params *GetNdmpContextsRestoreParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsRestore",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsRestoreReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsRestoreOK), nil

}

/*
GetNdmpContextsRestoreByID View a NDMP restore context
*/
func (a *Client) GetNdmpContextsRestoreByID(params *GetNdmpContextsRestoreByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpContextsRestoreByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpContextsRestoreByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpContextsRestoreById",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/contexts/restore/{NdmpContextsRestoreId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpContextsRestoreByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpContextsRestoreByIDOK), nil

}

/*
GetNdmpDiagnostics List ndmp diagnostics settings.
*/
func (a *Client) GetNdmpDiagnostics(params *GetNdmpDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpDiagnostics",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpDiagnosticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpDiagnosticsOK), nil

}

/*
GetNdmpDumpdate List of dumpdates entries.
*/
func (a *Client) GetNdmpDumpdate(params *GetNdmpDumpdateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpDumpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpDumpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpDumpdate",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/dumpdates/{NdmpDumpdateId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpDumpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpDumpdateOK), nil

}

/*
GetNdmpLogs Get NDMP logs
*/
func (a *Client) GetNdmpLogs(params *GetNdmpLogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpLogs",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpLogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpLogsOK), nil

}

/*
GetNdmpSession Retrieve the ndmp session.
*/
func (a *Client) GetNdmpSession(params *GetNdmpSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpSession",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/sessions/{NdmpSessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpSessionOK), nil

}

/*
GetNdmpSessions List all ndmp sessions.
*/
func (a *Client) GetNdmpSessions(params *GetNdmpSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpSessions",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpSessionsOK), nil

}

/*
GetNdmpSettingsDmas List of supported dma vendors.
*/
func (a *Client) GetNdmpSettingsDmas(params *GetNdmpSettingsDmasParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpSettingsDmasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpSettingsDmasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpSettingsDmas",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/settings/dmas",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpSettingsDmasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpSettingsDmasOK), nil

}

/*
GetNdmpSettingsGlobal List global ndmp settings.
*/
func (a *Client) GetNdmpSettingsGlobal(params *GetNdmpSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpSettingsGlobalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpSettingsGlobal",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpSettingsGlobalOK), nil

}

/*
GetNdmpSettingsVariable List of preferred environment variables.
*/
func (a *Client) GetNdmpSettingsVariable(params *GetNdmpSettingsVariableParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpSettingsVariableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpSettingsVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpSettingsVariable",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpSettingsVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpSettingsVariableOK), nil

}

/*
GetNdmpUser Retrieve the user.
*/
func (a *Client) GetNdmpUser(params *GetNdmpUserParams, authInfo runtime.ClientAuthInfoWriter) (*GetNdmpUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNdmpUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNdmpUser",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/users/{NdmpUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNdmpUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNdmpUserOK), nil

}

/*
GetNfsAlias Retrieve export information.
*/
func (a *Client) GetNfsAlias(params *GetNfsAliasParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsAliasOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsAlias",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/aliases/{NfsAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsAliasOK), nil

}

/*
GetNfsCheck Retrieve NFS export validation information.
*/
func (a *Client) GetNfsCheck(params *GetNfsCheckParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsCheckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsCheckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsCheck",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/check",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsCheckReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsCheckOK), nil

}

/*
GetNfsExport Retrieve export information.
*/
func (a *Client) GetNfsExport(params *GetNfsExportParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsExport",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/exports/{NfsExportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsExportOK), nil

}

/*
GetNfsExportsSummary Retrieve NFS export summary information.
*/
func (a *Client) GetNfsExportsSummary(params *GetNfsExportsSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsExportsSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsExportsSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsExportsSummary",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/exports-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsExportsSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsExportsSummaryOK), nil

}

/*
GetNfsLogLevel Get the current NFS service logging level.
*/
func (a *Client) GetNfsLogLevel(params *GetNfsLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsLogLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsLogLevel",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/nfs/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsLogLevelOK), nil

}

/*
GetNfsNetgroup Get the current NFS netgroup cache settings.
*/
func (a *Client) GetNfsNetgroup(params *GetNfsNetgroupParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsNetgroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsNetgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsNetgroup",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/nfs/netgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsNetgroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsNetgroupOK), nil

}

/*
GetNfsNlmLocks List all NLM locks.
*/
func (a *Client) GetNfsNlmLocks(params *GetNfsNlmLocksParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsNlmLocksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsNlmLocksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsNlmLocks",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/nlm/locks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsNlmLocksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsNlmLocksOK), nil

}

/*
GetNfsNlmSession Retrieve all lock state for a single client.
*/
func (a *Client) GetNfsNlmSession(params *GetNfsNlmSessionParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsNlmSessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsNlmSessionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsNlmSession",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/nfs/nlm/sessions/{NfsNlmSessionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsNlmSessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsNlmSessionOK), nil

}

/*
GetNfsNlmSessions List all NSM clients (optionally filtered by either zone or IP)
*/
func (a *Client) GetNfsNlmSessions(params *GetNfsNlmSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsNlmSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsNlmSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsNlmSessions",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/nfs/nlm/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsNlmSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsNlmSessionsOK), nil

}

/*
GetNfsNlmWaiters List all NLM lock waiters.
*/
func (a *Client) GetNfsNlmWaiters(params *GetNfsNlmWaitersParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsNlmWaitersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsNlmWaitersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsNlmWaiters",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/nlm/waiters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsNlmWaitersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsNlmWaitersOK), nil

}

/*
GetNfsSettingsExport Retrieve export information.
*/
func (a *Client) GetNfsSettingsExport(params *GetNfsSettingsExportParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsSettingsExportOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsSettingsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsSettingsExport",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/settings/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsSettingsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsSettingsExportOK), nil

}

/*
GetNfsSettingsGlobal Retrieve the NFS configuration.
*/
func (a *Client) GetNfsSettingsGlobal(params *GetNfsSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsSettingsGlobalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsSettingsGlobal",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/nfs/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsSettingsGlobalOK), nil

}

/*
GetNfsSettingsZone Retrieve the NFS server settings for this zone.
*/
func (a *Client) GetNfsSettingsZone(params *GetNfsSettingsZoneParams, authInfo runtime.ClientAuthInfoWriter) (*GetNfsSettingsZoneOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNfsSettingsZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNfsSettingsZone",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/settings/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNfsSettingsZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNfsSettingsZoneOK), nil

}

/*
GetNtpServer Retrieve one NTP server.
*/
func (a *Client) GetNtpServer(params *GetNtpServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetNtpServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNtpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNtpServer",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ntp/servers/{NtpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNtpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNtpServerOK), nil

}

/*
GetNtpSettings Retrieve the NTP settings.
*/
func (a *Client) GetNtpSettings(params *GetNtpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNtpSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNtpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNtpSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ntp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNtpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNtpSettingsOK), nil

}

/*
GetSmbLogLevel Get the current SMB logging level.
*/
func (a *Client) GetSmbLogLevel(params *GetSmbLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbLogLevelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbLogLevel",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbLogLevelOK), nil

}

/*
GetSmbLogLevelFilter View log filter.
*/
func (a *Client) GetSmbLogLevelFilter(params *GetSmbLogLevelFilterParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbLogLevelFilterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbLogLevelFilterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbLogLevelFilter",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/log-level/filters/{SmbLogLevelFilterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbLogLevelFilterReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbLogLevelFilterOK), nil

}

/*
GetSmbOpenfiles List open files.
*/
func (a *Client) GetSmbOpenfiles(params *GetSmbOpenfilesParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbOpenfilesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbOpenfilesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbOpenfiles",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/smb/openfiles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbOpenfilesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbOpenfilesOK), nil

}

/*
GetSmbSessions List open sessions.
*/
func (a *Client) GetSmbSessions(params *GetSmbSessionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbSessionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbSessionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbSessions",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/smb/sessions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbSessionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbSessionsOK), nil

}

/*
GetSmbSettingsGlobal List all settings.
*/
func (a *Client) GetSmbSettingsGlobal(params *GetSmbSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbSettingsGlobalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbSettingsGlobal",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbSettingsGlobalOK), nil

}

/*
GetSmbSettingsShare List all settings.
*/
func (a *Client) GetSmbSettingsShare(params *GetSmbSettingsShareParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbSettingsShareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbSettingsShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbSettingsShare",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/settings/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbSettingsShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbSettingsShareOK), nil

}

/*
GetSmbShare Retrieve share.
*/
func (a *Client) GetSmbShare(params *GetSmbShareParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbShareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbShare",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/shares/{SmbShareId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbShareOK), nil

}

/*
GetSmbSharesSummary Return summary information about shares.
*/
func (a *Client) GetSmbSharesSummary(params *GetSmbSharesSummaryParams, authInfo runtime.ClientAuthInfoWriter) (*GetSmbSharesSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmbSharesSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmbSharesSummary",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/smb/shares-summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSmbSharesSummaryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmbSharesSummaryOK), nil

}

/*
GetSnmpSettings Retrieve the SNMP settings.
*/
func (a *Client) GetSnmpSettings(params *GetSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSnmpSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSnmpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSnmpSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/snmp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSnmpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSnmpSettingsOK), nil

}

/*
GetSwiftAccount List a swift account.
*/
func (a *Client) GetSwiftAccount(params *GetSwiftAccountParams, authInfo runtime.ClientAuthInfoWriter) (*GetSwiftAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSwiftAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSwiftAccount",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/swift/accounts/{SwiftAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSwiftAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSwiftAccountOK), nil

}

/*
ListHdfsProxyusers List all proxyusers.
*/
func (a *Client) ListHdfsProxyusers(params *ListHdfsProxyusersParams, authInfo runtime.ClientAuthInfoWriter) (*ListHdfsProxyusersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHdfsProxyusersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listHdfsProxyusers",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListHdfsProxyusersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListHdfsProxyusersOK), nil

}

/*
ListHdfsRacks List all racks.
*/
func (a *Client) ListHdfsRacks(params *ListHdfsRacksParams, authInfo runtime.ClientAuthInfoWriter) (*ListHdfsRacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListHdfsRacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listHdfsRacks",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/hdfs/racks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListHdfsRacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListHdfsRacksOK), nil

}

/*
ListNdmpUsers List all ndmp administrators.
*/
func (a *Client) ListNdmpUsers(params *ListNdmpUsersParams, authInfo runtime.ClientAuthInfoWriter) (*ListNdmpUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNdmpUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNdmpUsers",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ndmp/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNdmpUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNdmpUsersOK), nil

}

/*
ListNfsAliases List all NFS aliases.
*/
func (a *Client) ListNfsAliases(params *ListNfsAliasesParams, authInfo runtime.ClientAuthInfoWriter) (*ListNfsAliasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNfsAliasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNfsAliases",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/aliases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNfsAliasesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNfsAliasesOK), nil

}

/*
ListNfsExports List all NFS exports.
*/
func (a *Client) ListNfsExports(params *ListNfsExportsParams, authInfo runtime.ClientAuthInfoWriter) (*ListNfsExportsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNfsExportsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNfsExports",
		Method:             "GET",
		PathPattern:        "/platform/2/protocols/nfs/exports",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNfsExportsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNfsExportsOK), nil

}

/*
ListNtpServers List all NTP servers.
*/
func (a *Client) ListNtpServers(params *ListNtpServersParams, authInfo runtime.ClientAuthInfoWriter) (*ListNtpServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNtpServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNtpServers",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/ntp/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNtpServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNtpServersOK), nil

}

/*
ListSmbLogLevelFilters Get the current SMB log filters.
*/
func (a *Client) ListSmbLogLevelFilters(params *ListSmbLogLevelFiltersParams, authInfo runtime.ClientAuthInfoWriter) (*ListSmbLogLevelFiltersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmbLogLevelFiltersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSmbLogLevelFilters",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/log-level/filters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSmbLogLevelFiltersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSmbLogLevelFiltersOK), nil

}

/*
ListSmbShares List all shares.
*/
func (a *Client) ListSmbShares(params *ListSmbSharesParams, authInfo runtime.ClientAuthInfoWriter) (*ListSmbSharesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmbSharesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSmbShares",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/smb/shares",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSmbSharesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSmbSharesOK), nil

}

/*
ListSwiftAccounts List all swift accounts.
*/
func (a *Client) ListSwiftAccounts(params *ListSwiftAccountsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSwiftAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSwiftAccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSwiftAccounts",
		Method:             "GET",
		PathPattern:        "/platform/3/protocols/swift/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSwiftAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSwiftAccountsOK), nil

}

/*
UpdateFtpSettings Modify the FTP settings. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateFtpSettings(params *UpdateFtpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFtpSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFtpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFtpSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ftp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFtpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFtpSettingsNoContent), nil

}

/*
UpdateHdfsLogLevel Modify the HDFS service log-level.
*/
func (a *Client) UpdateHdfsLogLevel(params *UpdateHdfsLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHdfsLogLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHdfsLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHdfsLogLevel",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/hdfs/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHdfsLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHdfsLogLevelNoContent), nil

}

/*
UpdateHdfsProxyuser Modify an HDFS proxyuser.
*/
func (a *Client) UpdateHdfsProxyuser(params *UpdateHdfsProxyuserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHdfsProxyuserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHdfsProxyuserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHdfsProxyuser",
		Method:             "PUT",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{HdfsProxyuserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHdfsProxyuserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHdfsProxyuserNoContent), nil

}

/*
UpdateHdfsRack Modify the HDFS rack
*/
func (a *Client) UpdateHdfsRack(params *UpdateHdfsRackParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHdfsRackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHdfsRackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHdfsRack",
		Method:             "PUT",
		PathPattern:        "/platform/1/protocols/hdfs/racks/{HdfsRackId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHdfsRackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHdfsRackNoContent), nil

}

/*
UpdateHdfsSettings Modify HDFS properties.
*/
func (a *Client) UpdateHdfsSettings(params *UpdateHdfsSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHdfsSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHdfsSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHdfsSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/hdfs/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHdfsSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHdfsSettingsNoContent), nil

}

/*
UpdateHTTPSettings Modify HTTP properties.
*/
func (a *Client) UpdateHTTPSettings(params *UpdateHTTPSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateHTTPSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateHTTPSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateHttpSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/http/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateHTTPSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateHTTPSettingsNoContent), nil

}

/*
UpdateNdmpDiagnostics Modify ndmp diagnostics settings.
*/
func (a *Client) UpdateNdmpDiagnostics(params *UpdateNdmpDiagnosticsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNdmpDiagnosticsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNdmpDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNdmpDiagnostics",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ndmp/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNdmpDiagnosticsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNdmpDiagnosticsNoContent), nil

}

/*
UpdateNdmpSettingsGlobal Modify one or more settings.
*/
func (a *Client) UpdateNdmpSettingsGlobal(params *UpdateNdmpSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNdmpSettingsGlobalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNdmpSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNdmpSettingsGlobal",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ndmp/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNdmpSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNdmpSettingsGlobalNoContent), nil

}

/*
UpdateNdmpSettingsVariable Modify or create a NDMP preferred environment variable.
*/
func (a *Client) UpdateNdmpSettingsVariable(params *UpdateNdmpSettingsVariableParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNdmpSettingsVariableNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNdmpSettingsVariableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNdmpSettingsVariable",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ndmp/settings/variables/{NdmpSettingsVariableId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNdmpSettingsVariableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNdmpSettingsVariableNoContent), nil

}

/*
UpdateNdmpUser Modify the user
*/
func (a *Client) UpdateNdmpUser(params *UpdateNdmpUserParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNdmpUserNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNdmpUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNdmpUser",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ndmp/users/{NdmpUserId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNdmpUserReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNdmpUserNoContent), nil

}

/*
UpdateNfsAlias Modify the alias. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateNfsAlias(params *UpdateNfsAliasParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsAliasNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsAliasParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsAlias",
		Method:             "PUT",
		PathPattern:        "/platform/2/protocols/nfs/aliases/{NfsAliasId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsAliasReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsAliasNoContent), nil

}

/*
UpdateNfsExport Modify the export. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateNfsExport(params *UpdateNfsExportParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsExportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsExport",
		Method:             "PUT",
		PathPattern:        "/platform/2/protocols/nfs/exports/{NfsExportId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsExportNoContent), nil

}

/*
UpdateNfsLogLevel Set the current NFS service logging level.
*/
func (a *Client) UpdateNfsLogLevel(params *UpdateNfsLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsLogLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsLogLevel",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/nfs/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsLogLevelNoContent), nil

}

/*
UpdateNfsNetgroup Modify the current NFS netgroup settings.
*/
func (a *Client) UpdateNfsNetgroup(params *UpdateNfsNetgroupParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsNetgroupNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsNetgroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsNetgroup",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/nfs/netgroup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsNetgroupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsNetgroupNoContent), nil

}

/*
UpdateNfsSettingsExport Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateNfsSettingsExport(params *UpdateNfsSettingsExportParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsSettingsExportNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsSettingsExportParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsSettingsExport",
		Method:             "PUT",
		PathPattern:        "/platform/2/protocols/nfs/settings/export",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsSettingsExportReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsSettingsExportNoContent), nil

}

/*
UpdateNfsSettingsGlobal Modify the default values for NFS exports. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateNfsSettingsGlobal(params *UpdateNfsSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsSettingsGlobalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsSettingsGlobal",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/nfs/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsSettingsGlobalNoContent), nil

}

/*
UpdateNfsSettingsZone Modify the NFS server settings for this zone.
*/
func (a *Client) UpdateNfsSettingsZone(params *UpdateNfsSettingsZoneParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNfsSettingsZoneNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNfsSettingsZoneParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNfsSettingsZone",
		Method:             "PUT",
		PathPattern:        "/platform/2/protocols/nfs/settings/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNfsSettingsZoneReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNfsSettingsZoneNoContent), nil

}

/*
UpdateNtpServer Modify the key value for an NTP server.
*/
func (a *Client) UpdateNtpServer(params *UpdateNtpServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNtpServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNtpServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNtpServer",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ntp/servers/{NtpServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNtpServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNtpServerNoContent), nil

}

/*
UpdateNtpSettings Modify the NTP settings. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateNtpSettings(params *UpdateNtpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNtpSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNtpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNtpSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/ntp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNtpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNtpSettingsNoContent), nil

}

/*
UpdateSmbLogLevel Set the current SMB logging level.
*/
func (a *Client) UpdateSmbLogLevel(params *UpdateSmbLogLevelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmbLogLevelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmbLogLevelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmbLogLevel",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/smb/log-level",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmbLogLevelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSmbLogLevelNoContent), nil

}

/*
UpdateSmbSettingsGlobal Modify one or more settings.
*/
func (a *Client) UpdateSmbSettingsGlobal(params *UpdateSmbSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmbSettingsGlobalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmbSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmbSettingsGlobal",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/smb/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmbSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSmbSettingsGlobalNoContent), nil

}

/*
UpdateSmbSettingsShare Modify one or more settings.
*/
func (a *Client) UpdateSmbSettingsShare(params *UpdateSmbSettingsShareParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmbSettingsShareNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmbSettingsShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmbSettingsShare",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/smb/settings/share",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmbSettingsShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSmbSettingsShareNoContent), nil

}

/*
UpdateSmbShare Modify share. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSmbShare(params *UpdateSmbShareParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSmbShareNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSmbShareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSmbShare",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/smb/shares/{SmbShareId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSmbShareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSmbShareNoContent), nil

}

/*
UpdateSnmpSettings Modify the SNMP settings. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateSnmpSettings(params *UpdateSnmpSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSnmpSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSnmpSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSnmpSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/snmp/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSnmpSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSnmpSettingsNoContent), nil

}

/*
UpdateSwiftAccount Modify a Swift account
*/
func (a *Client) UpdateSwiftAccount(params *UpdateSwiftAccountParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSwiftAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSwiftAccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSwiftAccount",
		Method:             "PUT",
		PathPattern:        "/platform/3/protocols/swift/accounts/{SwiftAccountId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSwiftAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSwiftAccountNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
