// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSwiftAccountParams creates a new GetSwiftAccountParams object
// with the default values initialized.
func NewGetSwiftAccountParams() *GetSwiftAccountParams {
	var ()
	return &GetSwiftAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSwiftAccountParamsWithTimeout creates a new GetSwiftAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSwiftAccountParamsWithTimeout(timeout time.Duration) *GetSwiftAccountParams {
	var ()
	return &GetSwiftAccountParams{

		timeout: timeout,
	}
}

// NewGetSwiftAccountParamsWithContext creates a new GetSwiftAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSwiftAccountParamsWithContext(ctx context.Context) *GetSwiftAccountParams {
	var ()
	return &GetSwiftAccountParams{

		Context: ctx,
	}
}

// NewGetSwiftAccountParamsWithHTTPClient creates a new GetSwiftAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSwiftAccountParamsWithHTTPClient(client *http.Client) *GetSwiftAccountParams {
	var ()
	return &GetSwiftAccountParams{
		HTTPClient: client,
	}
}

/*GetSwiftAccountParams contains all the parameters to send to the API endpoint
for the get swift account operation typically these are written to a http.Request
*/
type GetSwiftAccountParams struct {

	/*SwiftAccountID
	  List a swift account.

	*/
	SwiftAccountID string
	/*Zone
	  Access zone which contains Swift account.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get swift account params
func (o *GetSwiftAccountParams) WithTimeout(timeout time.Duration) *GetSwiftAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get swift account params
func (o *GetSwiftAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get swift account params
func (o *GetSwiftAccountParams) WithContext(ctx context.Context) *GetSwiftAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get swift account params
func (o *GetSwiftAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get swift account params
func (o *GetSwiftAccountParams) WithHTTPClient(client *http.Client) *GetSwiftAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get swift account params
func (o *GetSwiftAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSwiftAccountID adds the swiftAccountID to the get swift account params
func (o *GetSwiftAccountParams) WithSwiftAccountID(swiftAccountID string) *GetSwiftAccountParams {
	o.SetSwiftAccountID(swiftAccountID)
	return o
}

// SetSwiftAccountID adds the swiftAccountId to the get swift account params
func (o *GetSwiftAccountParams) SetSwiftAccountID(swiftAccountID string) {
	o.SwiftAccountID = swiftAccountID
}

// WithZone adds the zone to the get swift account params
func (o *GetSwiftAccountParams) WithZone(zone *string) *GetSwiftAccountParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get swift account params
func (o *GetSwiftAccountParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetSwiftAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param SwiftAccountId
	if err := r.SetPathParam("SwiftAccountId", o.SwiftAccountID); err != nil {
		return err
	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
