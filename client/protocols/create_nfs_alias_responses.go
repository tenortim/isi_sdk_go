// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// CreateNfsAliasReader is a Reader for the CreateNfsAlias structure.
type CreateNfsAliasReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateNfsAliasReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewCreateNfsAliasOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewCreateNfsAliasDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateNfsAliasOK creates a CreateNfsAliasOK with default headers values
func NewCreateNfsAliasOK() *CreateNfsAliasOK {
	return &CreateNfsAliasOK{}
}

/*CreateNfsAliasOK handles this case with default header values.

Create a new NFS alias.
*/
type CreateNfsAliasOK struct {
	Payload *models.CreateNfsAliasResponse
}

func (o *CreateNfsAliasOK) Error() string {
	return fmt.Sprintf("[POST /platform/2/protocols/nfs/aliases][%d] createNfsAliasOK  %+v", 200, o.Payload)
}

func (o *CreateNfsAliasOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.CreateNfsAliasResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateNfsAliasDefault creates a CreateNfsAliasDefault with default headers values
func NewCreateNfsAliasDefault(code int) *CreateNfsAliasDefault {
	return &CreateNfsAliasDefault{
		_statusCode: code,
	}
}

/*CreateNfsAliasDefault handles this case with default header values.

Unexpected error
*/
type CreateNfsAliasDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the create nfs alias default response
func (o *CreateNfsAliasDefault) Code() int {
	return o._statusCode
}

func (o *CreateNfsAliasDefault) Error() string {
	return fmt.Sprintf("[POST /platform/2/protocols/nfs/aliases][%d] createNfsAlias default  %+v", o._statusCode, o.Payload)
}

func (o *CreateNfsAliasDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
