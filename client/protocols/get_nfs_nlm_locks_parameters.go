// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNfsNlmLocksParams creates a new GetNfsNlmLocksParams object
// with the default values initialized.
func NewGetNfsNlmLocksParams() *GetNfsNlmLocksParams {
	var ()
	return &GetNfsNlmLocksParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNfsNlmLocksParamsWithTimeout creates a new GetNfsNlmLocksParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNfsNlmLocksParamsWithTimeout(timeout time.Duration) *GetNfsNlmLocksParams {
	var ()
	return &GetNfsNlmLocksParams{

		timeout: timeout,
	}
}

// NewGetNfsNlmLocksParamsWithContext creates a new GetNfsNlmLocksParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNfsNlmLocksParamsWithContext(ctx context.Context) *GetNfsNlmLocksParams {
	var ()
	return &GetNfsNlmLocksParams{

		Context: ctx,
	}
}

// NewGetNfsNlmLocksParamsWithHTTPClient creates a new GetNfsNlmLocksParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNfsNlmLocksParamsWithHTTPClient(client *http.Client) *GetNfsNlmLocksParams {
	var ()
	return &GetNfsNlmLocksParams{
		HTTPClient: client,
	}
}

/*GetNfsNlmLocksParams contains all the parameters to send to the API endpoint
for the get nfs nlm locks operation typically these are written to a http.Request
*/
type GetNfsNlmLocksParams struct {

	/*Client
	  Filter locks by the specified client host name and IP address.

	*/
	Client *string
	/*ClientID
	  Filter locks by the specified client ID.

	*/
	ClientID *string
	/*Created
	  Return locks created after the specified unix epoch time.

	*/
	Created *string
	/*Dir
	  The direction of the sort.

	*/
	Dir *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Lin
	  Filter locks by the specified LIN in /ifs that is locked.

	*/
	Lin *string
	/*Path
	  Filter locks by the specified path under /ifs.

	*/
	Path *string
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Sort
	  The field that will be used for sorting.

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithTimeout(timeout time.Duration) *GetNfsNlmLocksParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithContext(ctx context.Context) *GetNfsNlmLocksParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithHTTPClient(client *http.Client) *GetNfsNlmLocksParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClient adds the client to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithClient(client *string) *GetNfsNlmLocksParams {
	o.SetClient(client)
	return o
}

// SetClient adds the client to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetClient(client *string) {
	o.Client = client
}

// WithClientID adds the clientID to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithClientID(clientID *string) *GetNfsNlmLocksParams {
	o.SetClientID(clientID)
	return o
}

// SetClientID adds the clientId to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetClientID(clientID *string) {
	o.ClientID = clientID
}

// WithCreated adds the created to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithCreated(created *string) *GetNfsNlmLocksParams {
	o.SetCreated(created)
	return o
}

// SetCreated adds the created to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetCreated(created *string) {
	o.Created = created
}

// WithDir adds the dir to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithDir(dir *string) *GetNfsNlmLocksParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetDir(dir *string) {
	o.Dir = dir
}

// WithLimit adds the limit to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithLimit(limit *int64) *GetNfsNlmLocksParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithLin adds the lin to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithLin(lin *string) *GetNfsNlmLocksParams {
	o.SetLin(lin)
	return o
}

// SetLin adds the lin to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetLin(lin *string) {
	o.Lin = lin
}

// WithPath adds the path to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithPath(path *string) *GetNfsNlmLocksParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetPath(path *string) {
	o.Path = path
}

// WithResume adds the resume to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithResume(resume *string) *GetNfsNlmLocksParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithSort adds the sort to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) WithSort(sort *string) *GetNfsNlmLocksParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get nfs nlm locks params
func (o *GetNfsNlmLocksParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetNfsNlmLocksParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Client != nil {

		// query param client
		var qrClient string
		if o.Client != nil {
			qrClient = *o.Client
		}
		qClient := qrClient
		if qClient != "" {
			if err := r.SetQueryParam("client", qClient); err != nil {
				return err
			}
		}

	}

	if o.ClientID != nil {

		// query param client_id
		var qrClientID string
		if o.ClientID != nil {
			qrClientID = *o.ClientID
		}
		qClientID := qrClientID
		if qClientID != "" {
			if err := r.SetQueryParam("client_id", qClientID); err != nil {
				return err
			}
		}

	}

	if o.Created != nil {

		// query param created
		var qrCreated string
		if o.Created != nil {
			qrCreated = *o.Created
		}
		qCreated := qrCreated
		if qCreated != "" {
			if err := r.SetQueryParam("created", qCreated); err != nil {
				return err
			}
		}

	}

	if o.Dir != nil {

		// query param dir
		var qrDir string
		if o.Dir != nil {
			qrDir = *o.Dir
		}
		qDir := qrDir
		if qDir != "" {
			if err := r.SetQueryParam("dir", qDir); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Lin != nil {

		// query param lin
		var qrLin string
		if o.Lin != nil {
			qrLin = *o.Lin
		}
		qLin := qrLin
		if qLin != "" {
			if err := r.SetQueryParam("lin", qLin); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
