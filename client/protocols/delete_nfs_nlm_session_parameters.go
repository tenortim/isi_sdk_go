// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteNfsNlmSessionParams creates a new DeleteNfsNlmSessionParams object
// with the default values initialized.
func NewDeleteNfsNlmSessionParams() *DeleteNfsNlmSessionParams {
	var ()
	return &DeleteNfsNlmSessionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteNfsNlmSessionParamsWithTimeout creates a new DeleteNfsNlmSessionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteNfsNlmSessionParamsWithTimeout(timeout time.Duration) *DeleteNfsNlmSessionParams {
	var ()
	return &DeleteNfsNlmSessionParams{

		timeout: timeout,
	}
}

// NewDeleteNfsNlmSessionParamsWithContext creates a new DeleteNfsNlmSessionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteNfsNlmSessionParamsWithContext(ctx context.Context) *DeleteNfsNlmSessionParams {
	var ()
	return &DeleteNfsNlmSessionParams{

		Context: ctx,
	}
}

// NewDeleteNfsNlmSessionParamsWithHTTPClient creates a new DeleteNfsNlmSessionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteNfsNlmSessionParamsWithHTTPClient(client *http.Client) *DeleteNfsNlmSessionParams {
	var ()
	return &DeleteNfsNlmSessionParams{
		HTTPClient: client,
	}
}

/*DeleteNfsNlmSessionParams contains all the parameters to send to the API endpoint
for the delete nfs nlm session operation typically these are written to a http.Request
*/
type DeleteNfsNlmSessionParams struct {

	/*NfsNlmSessionID
	  Delete all lock state for this host.

	*/
	NfsNlmSessionID string
	/*ClusterIP
	  An IP address for which NSM has client records

	*/
	ClusterIP *string
	/*Refresh
	  if set to true, the client will be given a chance to reclaim its locks before they are destroyed

	*/
	Refresh *bool
	/*Zone
	  Represents an extant auth zone

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithTimeout(timeout time.Duration) *DeleteNfsNlmSessionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithContext(ctx context.Context) *DeleteNfsNlmSessionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithHTTPClient(client *http.Client) *DeleteNfsNlmSessionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNfsNlmSessionID adds the nfsNlmSessionID to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithNfsNlmSessionID(nfsNlmSessionID string) *DeleteNfsNlmSessionParams {
	o.SetNfsNlmSessionID(nfsNlmSessionID)
	return o
}

// SetNfsNlmSessionID adds the nfsNlmSessionId to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetNfsNlmSessionID(nfsNlmSessionID string) {
	o.NfsNlmSessionID = nfsNlmSessionID
}

// WithClusterIP adds the clusterIP to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithClusterIP(clusterIP *string) *DeleteNfsNlmSessionParams {
	o.SetClusterIP(clusterIP)
	return o
}

// SetClusterIP adds the clusterIp to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetClusterIP(clusterIP *string) {
	o.ClusterIP = clusterIP
}

// WithRefresh adds the refresh to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithRefresh(refresh *bool) *DeleteNfsNlmSessionParams {
	o.SetRefresh(refresh)
	return o
}

// SetRefresh adds the refresh to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetRefresh(refresh *bool) {
	o.Refresh = refresh
}

// WithZone adds the zone to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) WithZone(zone *string) *DeleteNfsNlmSessionParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the delete nfs nlm session params
func (o *DeleteNfsNlmSessionParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteNfsNlmSessionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param NfsNlmSessionId
	if err := r.SetPathParam("NfsNlmSessionId", o.NfsNlmSessionID); err != nil {
		return err
	}

	if o.ClusterIP != nil {

		// query param cluster_ip
		var qrClusterIP string
		if o.ClusterIP != nil {
			qrClusterIP = *o.ClusterIP
		}
		qClusterIP := qrClusterIP
		if qClusterIP != "" {
			if err := r.SetQueryParam("cluster_ip", qClusterIP); err != nil {
				return err
			}
		}

	}

	if o.Refresh != nil {

		// query param refresh
		var qrRefresh bool
		if o.Refresh != nil {
			qrRefresh = *o.Refresh
		}
		qRefresh := swag.FormatBool(qrRefresh)
		if qRefresh != "" {
			if err := r.SetQueryParam("refresh", qRefresh); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
