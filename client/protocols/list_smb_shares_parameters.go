// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListSmbSharesParams creates a new ListSmbSharesParams object
// with the default values initialized.
func NewListSmbSharesParams() *ListSmbSharesParams {
	var ()
	return &ListSmbSharesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListSmbSharesParamsWithTimeout creates a new ListSmbSharesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListSmbSharesParamsWithTimeout(timeout time.Duration) *ListSmbSharesParams {
	var ()
	return &ListSmbSharesParams{

		timeout: timeout,
	}
}

// NewListSmbSharesParamsWithContext creates a new ListSmbSharesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListSmbSharesParamsWithContext(ctx context.Context) *ListSmbSharesParams {
	var ()
	return &ListSmbSharesParams{

		Context: ctx,
	}
}

// NewListSmbSharesParamsWithHTTPClient creates a new ListSmbSharesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListSmbSharesParamsWithHTTPClient(client *http.Client) *ListSmbSharesParams {
	var ()
	return &ListSmbSharesParams{
		HTTPClient: client,
	}
}

/*ListSmbSharesParams contains all the parameters to send to the API endpoint
for the list smb shares operation typically these are written to a http.Request
*/
type ListSmbSharesParams struct {

	/*Dir
	  The direction of the sort.

	*/
	Dir *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*ResolveNames
	  If true, resolve group and user names in personas.

	*/
	ResolveNames *bool
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Scope
	  If specified as "effective" or not specified, all fields are returned.  If specified as "user", only fields with non-default values are shown.  If specified as "default", the original values are returned.

	*/
	Scope *string
	/*Sort
	  Order results by this field. Default is id.

	*/
	Sort *string
	/*Zone
	  Zone which contains this share.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list smb shares params
func (o *ListSmbSharesParams) WithTimeout(timeout time.Duration) *ListSmbSharesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list smb shares params
func (o *ListSmbSharesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list smb shares params
func (o *ListSmbSharesParams) WithContext(ctx context.Context) *ListSmbSharesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list smb shares params
func (o *ListSmbSharesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list smb shares params
func (o *ListSmbSharesParams) WithHTTPClient(client *http.Client) *ListSmbSharesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list smb shares params
func (o *ListSmbSharesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDir adds the dir to the list smb shares params
func (o *ListSmbSharesParams) WithDir(dir *string) *ListSmbSharesParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the list smb shares params
func (o *ListSmbSharesParams) SetDir(dir *string) {
	o.Dir = dir
}

// WithLimit adds the limit to the list smb shares params
func (o *ListSmbSharesParams) WithLimit(limit *int64) *ListSmbSharesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list smb shares params
func (o *ListSmbSharesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithResolveNames adds the resolveNames to the list smb shares params
func (o *ListSmbSharesParams) WithResolveNames(resolveNames *bool) *ListSmbSharesParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the list smb shares params
func (o *ListSmbSharesParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WithResume adds the resume to the list smb shares params
func (o *ListSmbSharesParams) WithResume(resume *string) *ListSmbSharesParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the list smb shares params
func (o *ListSmbSharesParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithScope adds the scope to the list smb shares params
func (o *ListSmbSharesParams) WithScope(scope *string) *ListSmbSharesParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the list smb shares params
func (o *ListSmbSharesParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSort adds the sort to the list smb shares params
func (o *ListSmbSharesParams) WithSort(sort *string) *ListSmbSharesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list smb shares params
func (o *ListSmbSharesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithZone adds the zone to the list smb shares params
func (o *ListSmbSharesParams) WithZone(zone *string) *ListSmbSharesParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the list smb shares params
func (o *ListSmbSharesParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ListSmbSharesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dir != nil {

		// query param dir
		var qrDir string
		if o.Dir != nil {
			qrDir = *o.Dir
		}
		qDir := qrDir
		if qDir != "" {
			if err := r.SetQueryParam("dir", qDir); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
