// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateNfsNlmSessionsCheckItemParams creates a new CreateNfsNlmSessionsCheckItemParams object
// with the default values initialized.
func NewCreateNfsNlmSessionsCheckItemParams() *CreateNfsNlmSessionsCheckItemParams {
	var ()
	return &CreateNfsNlmSessionsCheckItemParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNfsNlmSessionsCheckItemParamsWithTimeout creates a new CreateNfsNlmSessionsCheckItemParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNfsNlmSessionsCheckItemParamsWithTimeout(timeout time.Duration) *CreateNfsNlmSessionsCheckItemParams {
	var ()
	return &CreateNfsNlmSessionsCheckItemParams{

		timeout: timeout,
	}
}

// NewCreateNfsNlmSessionsCheckItemParamsWithContext creates a new CreateNfsNlmSessionsCheckItemParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNfsNlmSessionsCheckItemParamsWithContext(ctx context.Context) *CreateNfsNlmSessionsCheckItemParams {
	var ()
	return &CreateNfsNlmSessionsCheckItemParams{

		Context: ctx,
	}
}

// NewCreateNfsNlmSessionsCheckItemParamsWithHTTPClient creates a new CreateNfsNlmSessionsCheckItemParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNfsNlmSessionsCheckItemParamsWithHTTPClient(client *http.Client) *CreateNfsNlmSessionsCheckItemParams {
	var ()
	return &CreateNfsNlmSessionsCheckItemParams{
		HTTPClient: client,
	}
}

/*CreateNfsNlmSessionsCheckItemParams contains all the parameters to send to the API endpoint
for the create nfs nlm sessions check item operation typically these are written to a http.Request
*/
type CreateNfsNlmSessionsCheckItemParams struct {

	/*NfsNlmSessionsCheckItem*/
	NfsNlmSessionsCheckItem models.Empty
	/*ClusterIP
	  An IP address for which NSM has client records

	*/
	ClusterIP *string
	/*Zone
	  Represents an extant auth zone

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithTimeout(timeout time.Duration) *CreateNfsNlmSessionsCheckItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithContext(ctx context.Context) *CreateNfsNlmSessionsCheckItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithHTTPClient(client *http.Client) *CreateNfsNlmSessionsCheckItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNfsNlmSessionsCheckItem adds the nfsNlmSessionsCheckItem to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithNfsNlmSessionsCheckItem(nfsNlmSessionsCheckItem models.Empty) *CreateNfsNlmSessionsCheckItemParams {
	o.SetNfsNlmSessionsCheckItem(nfsNlmSessionsCheckItem)
	return o
}

// SetNfsNlmSessionsCheckItem adds the nfsNlmSessionsCheckItem to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetNfsNlmSessionsCheckItem(nfsNlmSessionsCheckItem models.Empty) {
	o.NfsNlmSessionsCheckItem = nfsNlmSessionsCheckItem
}

// WithClusterIP adds the clusterIP to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithClusterIP(clusterIP *string) *CreateNfsNlmSessionsCheckItemParams {
	o.SetClusterIP(clusterIP)
	return o
}

// SetClusterIP adds the clusterIp to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetClusterIP(clusterIP *string) {
	o.ClusterIP = clusterIP
}

// WithZone adds the zone to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) WithZone(zone *string) *CreateNfsNlmSessionsCheckItemParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the create nfs nlm sessions check item params
func (o *CreateNfsNlmSessionsCheckItemParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNfsNlmSessionsCheckItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NfsNlmSessionsCheckItem != nil {
		if err := r.SetBodyParam(o.NfsNlmSessionsCheckItem); err != nil {
			return err
		}
	}

	if o.ClusterIP != nil {

		// query param cluster_ip
		var qrClusterIP string
		if o.ClusterIP != nil {
			qrClusterIP = *o.ClusterIP
		}
		qClusterIP := qrClusterIP
		if qClusterIP != "" {
			if err := r.SetQueryParam("cluster_ip", qClusterIP); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
