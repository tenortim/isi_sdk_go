// Code generated by go-swagger; DO NOT EDIT.

package protocols

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListNfsExportsParams creates a new ListNfsExportsParams object
// with the default values initialized.
func NewListNfsExportsParams() *ListNfsExportsParams {
	var ()
	return &ListNfsExportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListNfsExportsParamsWithTimeout creates a new ListNfsExportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListNfsExportsParamsWithTimeout(timeout time.Duration) *ListNfsExportsParams {
	var ()
	return &ListNfsExportsParams{

		timeout: timeout,
	}
}

// NewListNfsExportsParamsWithContext creates a new ListNfsExportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListNfsExportsParamsWithContext(ctx context.Context) *ListNfsExportsParams {
	var ()
	return &ListNfsExportsParams{

		Context: ctx,
	}
}

// NewListNfsExportsParamsWithHTTPClient creates a new ListNfsExportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListNfsExportsParamsWithHTTPClient(client *http.Client) *ListNfsExportsParams {
	var ()
	return &ListNfsExportsParams{
		HTTPClient: client,
	}
}

/*ListNfsExportsParams contains all the parameters to send to the API endpoint
for the list nfs exports operation typically these are written to a http.Request
*/
type ListNfsExportsParams struct {

	/*Check
	  Check for conflicts when listing exports.

	*/
	Check *bool
	/*Dir
	  The direction of the sort.

	*/
	Dir *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Path
	  If specified, only exports that explicitly reference at least one of the given paths will be returned.

	*/
	Path *string
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Scope
	  When specified as 'effective', or not specified, all fields are returned. When specified as 'user', only fields with non-default values are shown. When specified as 'default', the original values are returned.

	*/
	Scope *string
	/*Sort
	  The field that will be used for sorting.

	*/
	Sort *string
	/*Zone
	  Access zone

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list nfs exports params
func (o *ListNfsExportsParams) WithTimeout(timeout time.Duration) *ListNfsExportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list nfs exports params
func (o *ListNfsExportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list nfs exports params
func (o *ListNfsExportsParams) WithContext(ctx context.Context) *ListNfsExportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list nfs exports params
func (o *ListNfsExportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list nfs exports params
func (o *ListNfsExportsParams) WithHTTPClient(client *http.Client) *ListNfsExportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list nfs exports params
func (o *ListNfsExportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCheck adds the check to the list nfs exports params
func (o *ListNfsExportsParams) WithCheck(check *bool) *ListNfsExportsParams {
	o.SetCheck(check)
	return o
}

// SetCheck adds the check to the list nfs exports params
func (o *ListNfsExportsParams) SetCheck(check *bool) {
	o.Check = check
}

// WithDir adds the dir to the list nfs exports params
func (o *ListNfsExportsParams) WithDir(dir *string) *ListNfsExportsParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the list nfs exports params
func (o *ListNfsExportsParams) SetDir(dir *string) {
	o.Dir = dir
}

// WithLimit adds the limit to the list nfs exports params
func (o *ListNfsExportsParams) WithLimit(limit *int64) *ListNfsExportsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the list nfs exports params
func (o *ListNfsExportsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPath adds the path to the list nfs exports params
func (o *ListNfsExportsParams) WithPath(path *string) *ListNfsExportsParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the list nfs exports params
func (o *ListNfsExportsParams) SetPath(path *string) {
	o.Path = path
}

// WithResume adds the resume to the list nfs exports params
func (o *ListNfsExportsParams) WithResume(resume *string) *ListNfsExportsParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the list nfs exports params
func (o *ListNfsExportsParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithScope adds the scope to the list nfs exports params
func (o *ListNfsExportsParams) WithScope(scope *string) *ListNfsExportsParams {
	o.SetScope(scope)
	return o
}

// SetScope adds the scope to the list nfs exports params
func (o *ListNfsExportsParams) SetScope(scope *string) {
	o.Scope = scope
}

// WithSort adds the sort to the list nfs exports params
func (o *ListNfsExportsParams) WithSort(sort *string) *ListNfsExportsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the list nfs exports params
func (o *ListNfsExportsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithZone adds the zone to the list nfs exports params
func (o *ListNfsExportsParams) WithZone(zone *string) *ListNfsExportsParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the list nfs exports params
func (o *ListNfsExportsParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ListNfsExportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Check != nil {

		// query param check
		var qrCheck bool
		if o.Check != nil {
			qrCheck = *o.Check
		}
		qCheck := swag.FormatBool(qrCheck)
		if qCheck != "" {
			if err := r.SetQueryParam("check", qCheck); err != nil {
				return err
			}
		}

	}

	if o.Dir != nil {

		// query param dir
		var qrDir string
		if o.Dir != nil {
			qrDir = *o.Dir
		}
		qDir := qrDir
		if qDir != "" {
			if err := r.SetQueryParam("dir", qDir); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Path != nil {

		// query param path
		var qrPath string
		if o.Path != nil {
			qrPath = *o.Path
		}
		qPath := qrPath
		if qPath != "" {
			if err := r.SetQueryParam("path", qPath); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Scope != nil {

		// query param scope
		var qrScope string
		if o.Scope != nil {
			qrScope = *o.Scope
		}
		qScope := qrScope
		if qScope != "" {
			if err := r.SetQueryParam("scope", qScope); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
