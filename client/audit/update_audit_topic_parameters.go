// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateAuditTopicParams creates a new UpdateAuditTopicParams object
// with the default values initialized.
func NewUpdateAuditTopicParams() *UpdateAuditTopicParams {
	var ()
	return &UpdateAuditTopicParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuditTopicParamsWithTimeout creates a new UpdateAuditTopicParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateAuditTopicParamsWithTimeout(timeout time.Duration) *UpdateAuditTopicParams {
	var ()
	return &UpdateAuditTopicParams{

		timeout: timeout,
	}
}

// NewUpdateAuditTopicParamsWithContext creates a new UpdateAuditTopicParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateAuditTopicParamsWithContext(ctx context.Context) *UpdateAuditTopicParams {
	var ()
	return &UpdateAuditTopicParams{

		Context: ctx,
	}
}

// NewUpdateAuditTopicParamsWithHTTPClient creates a new UpdateAuditTopicParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateAuditTopicParamsWithHTTPClient(client *http.Client) *UpdateAuditTopicParams {
	var ()
	return &UpdateAuditTopicParams{
		HTTPClient: client,
	}
}

/*UpdateAuditTopicParams contains all the parameters to send to the API endpoint
for the update audit topic operation typically these are written to a http.Request
*/
type UpdateAuditTopicParams struct {

	/*AuditTopic*/
	AuditTopic *models.AuditTopic
	/*AuditTopicID
	  Modify the audit topic.

	*/
	AuditTopicID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update audit topic params
func (o *UpdateAuditTopicParams) WithTimeout(timeout time.Duration) *UpdateAuditTopicParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update audit topic params
func (o *UpdateAuditTopicParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update audit topic params
func (o *UpdateAuditTopicParams) WithContext(ctx context.Context) *UpdateAuditTopicParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update audit topic params
func (o *UpdateAuditTopicParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update audit topic params
func (o *UpdateAuditTopicParams) WithHTTPClient(client *http.Client) *UpdateAuditTopicParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update audit topic params
func (o *UpdateAuditTopicParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuditTopic adds the auditTopic to the update audit topic params
func (o *UpdateAuditTopicParams) WithAuditTopic(auditTopic *models.AuditTopic) *UpdateAuditTopicParams {
	o.SetAuditTopic(auditTopic)
	return o
}

// SetAuditTopic adds the auditTopic to the update audit topic params
func (o *UpdateAuditTopicParams) SetAuditTopic(auditTopic *models.AuditTopic) {
	o.AuditTopic = auditTopic
}

// WithAuditTopicID adds the auditTopicID to the update audit topic params
func (o *UpdateAuditTopicParams) WithAuditTopicID(auditTopicID string) *UpdateAuditTopicParams {
	o.SetAuditTopicID(auditTopicID)
	return o
}

// SetAuditTopicID adds the auditTopicId to the update audit topic params
func (o *UpdateAuditTopicParams) SetAuditTopicID(auditTopicID string) {
	o.AuditTopicID = auditTopicID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuditTopicParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AuditTopic != nil {
		if err := r.SetBodyParam(o.AuditTopic); err != nil {
			return err
		}
	}

	// path param AuditTopicId
	if err := r.SetPathParam("AuditTopicId", o.AuditTopicID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
