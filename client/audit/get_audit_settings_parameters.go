// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAuditSettingsParams creates a new GetAuditSettingsParams object
// with the default values initialized.
func NewGetAuditSettingsParams() *GetAuditSettingsParams {
	var ()
	return &GetAuditSettingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAuditSettingsParamsWithTimeout creates a new GetAuditSettingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAuditSettingsParamsWithTimeout(timeout time.Duration) *GetAuditSettingsParams {
	var ()
	return &GetAuditSettingsParams{

		timeout: timeout,
	}
}

// NewGetAuditSettingsParamsWithContext creates a new GetAuditSettingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAuditSettingsParamsWithContext(ctx context.Context) *GetAuditSettingsParams {
	var ()
	return &GetAuditSettingsParams{

		Context: ctx,
	}
}

// NewGetAuditSettingsParamsWithHTTPClient creates a new GetAuditSettingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAuditSettingsParamsWithHTTPClient(client *http.Client) *GetAuditSettingsParams {
	var ()
	return &GetAuditSettingsParams{
		HTTPClient: client,
	}
}

/*GetAuditSettingsParams contains all the parameters to send to the API endpoint
for the get audit settings operation typically these are written to a http.Request
*/
type GetAuditSettingsParams struct {

	/*Zone
	  Access zone which contains audit settings.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get audit settings params
func (o *GetAuditSettingsParams) WithTimeout(timeout time.Duration) *GetAuditSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get audit settings params
func (o *GetAuditSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get audit settings params
func (o *GetAuditSettingsParams) WithContext(ctx context.Context) *GetAuditSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get audit settings params
func (o *GetAuditSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get audit settings params
func (o *GetAuditSettingsParams) WithHTTPClient(client *http.Client) *GetAuditSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get audit settings params
func (o *GetAuditSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithZone adds the zone to the get audit settings params
func (o *GetAuditSettingsParams) WithZone(zone *string) *GetAuditSettingsParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get audit settings params
func (o *GetAuditSettingsParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetAuditSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
