// Code generated by go-swagger; DO NOT EDIT.

package audit

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new audit API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for audit API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAuditTopic Create a new audit topic.
*/
func (a *Client) CreateAuditTopic(params *CreateAuditTopicParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAuditTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAuditTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAuditTopic",
		Method:             "POST",
		PathPattern:        "/platform/1/audit/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAuditTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAuditTopicOK), nil

}

/*
DeleteAuditTopic Delete the audit topic.
*/
func (a *Client) DeleteAuditTopic(params *DeleteAuditTopicParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAuditTopicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAuditTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAuditTopic",
		Method:             "DELETE",
		PathPattern:        "/platform/1/audit/topics/{AuditTopicId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAuditTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAuditTopicNoContent), nil

}

/*
GetAuditSettings View per-Access Zone Audit settings.
*/
func (a *Client) GetAuditSettings(params *GetAuditSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuditSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/audit/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditSettingsOK), nil

}

/*
GetAuditTopic Retrieve the audit topic information.
*/
func (a *Client) GetAuditTopic(params *GetAuditTopicParams, authInfo runtime.ClientAuthInfoWriter) (*GetAuditTopicOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditTopic",
		Method:             "GET",
		PathPattern:        "/platform/1/audit/topics/{AuditTopicId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAuditTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditTopicOK), nil

}

/*
GetSettingsGlobal View Global Audit settings.
*/
func (a *Client) GetSettingsGlobal(params *GetSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*GetSettingsGlobalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSettingsGlobal",
		Method:             "GET",
		PathPattern:        "/platform/3/audit/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSettingsGlobalOK), nil

}

/*
ListAuditTopics Retrieve a list of audit topics.
*/
func (a *Client) ListAuditTopics(params *ListAuditTopicsParams, authInfo runtime.ClientAuthInfoWriter) (*ListAuditTopicsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAuditTopicsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAuditTopics",
		Method:             "GET",
		PathPattern:        "/platform/1/audit/topics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAuditTopicsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAuditTopicsOK), nil

}

/*
UpdateAuditSettings Modify per-Access Zone Audit settings.
*/
func (a *Client) UpdateAuditSettings(params *UpdateAuditSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuditSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuditSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuditSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/audit/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuditSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuditSettingsNoContent), nil

}

/*
UpdateAuditTopic Modify the audit topic.
*/
func (a *Client) UpdateAuditTopic(params *UpdateAuditTopicParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAuditTopicNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAuditTopicParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAuditTopic",
		Method:             "PUT",
		PathPattern:        "/platform/1/audit/topics/{AuditTopicId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAuditTopicReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAuditTopicNoContent), nil

}

/*
UpdateSettingsGlobal Modify Global Audit settings.
*/
func (a *Client) UpdateSettingsGlobal(params *UpdateSettingsGlobalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSettingsGlobalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSettingsGlobalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSettingsGlobal",
		Method:             "PUT",
		PathPattern:        "/platform/3/audit/settings/global",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSettingsGlobalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSettingsGlobalNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
