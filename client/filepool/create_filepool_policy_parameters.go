// Code generated by go-swagger; DO NOT EDIT.

package filepool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateFilepoolPolicyParams creates a new CreateFilepoolPolicyParams object
// with the default values initialized.
func NewCreateFilepoolPolicyParams() *CreateFilepoolPolicyParams {
	var ()
	return &CreateFilepoolPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateFilepoolPolicyParamsWithTimeout creates a new CreateFilepoolPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateFilepoolPolicyParamsWithTimeout(timeout time.Duration) *CreateFilepoolPolicyParams {
	var ()
	return &CreateFilepoolPolicyParams{

		timeout: timeout,
	}
}

// NewCreateFilepoolPolicyParamsWithContext creates a new CreateFilepoolPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateFilepoolPolicyParamsWithContext(ctx context.Context) *CreateFilepoolPolicyParams {
	var ()
	return &CreateFilepoolPolicyParams{

		Context: ctx,
	}
}

// NewCreateFilepoolPolicyParamsWithHTTPClient creates a new CreateFilepoolPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateFilepoolPolicyParamsWithHTTPClient(client *http.Client) *CreateFilepoolPolicyParams {
	var ()
	return &CreateFilepoolPolicyParams{
		HTTPClient: client,
	}
}

/*CreateFilepoolPolicyParams contains all the parameters to send to the API endpoint
for the create filepool policy operation typically these are written to a http.Request
*/
type CreateFilepoolPolicyParams struct {

	/*FilepoolPolicy*/
	FilepoolPolicy *models.FilepoolPolicyCreateParams

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create filepool policy params
func (o *CreateFilepoolPolicyParams) WithTimeout(timeout time.Duration) *CreateFilepoolPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create filepool policy params
func (o *CreateFilepoolPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create filepool policy params
func (o *CreateFilepoolPolicyParams) WithContext(ctx context.Context) *CreateFilepoolPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create filepool policy params
func (o *CreateFilepoolPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create filepool policy params
func (o *CreateFilepoolPolicyParams) WithHTTPClient(client *http.Client) *CreateFilepoolPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create filepool policy params
func (o *CreateFilepoolPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithFilepoolPolicy adds the filepoolPolicy to the create filepool policy params
func (o *CreateFilepoolPolicyParams) WithFilepoolPolicy(filepoolPolicy *models.FilepoolPolicyCreateParams) *CreateFilepoolPolicyParams {
	o.SetFilepoolPolicy(filepoolPolicy)
	return o
}

// SetFilepoolPolicy adds the filepoolPolicy to the create filepool policy params
func (o *CreateFilepoolPolicyParams) SetFilepoolPolicy(filepoolPolicy *models.FilepoolPolicyCreateParams) {
	o.FilepoolPolicy = filepoolPolicy
}

// WriteToRequest writes these params to a swagger request
func (o *CreateFilepoolPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.FilepoolPolicy != nil {
		if err := r.SetBodyParam(o.FilepoolPolicy); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
