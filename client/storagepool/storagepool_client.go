// Code generated by go-swagger; DO NOT EDIT.

package storagepool

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new storagepool API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for storagepool API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCompatibilitiesClassActiveItem Create a new compatibility
*/
func (a *Client) CreateCompatibilitiesClassActiveItem(params *CreateCompatibilitiesClassActiveItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCompatibilitiesClassActiveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCompatibilitiesClassActiveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCompatibilitiesClassActiveItem",
		Method:             "POST",
		PathPattern:        "/platform/1/storagepool/compatibilities/class/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCompatibilitiesClassActiveItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCompatibilitiesClassActiveItemOK), nil

}

/*
CreateCompatibilitiesSsdActiveItem Create a new ssd compatibility
*/
func (a *Client) CreateCompatibilitiesSsdActiveItem(params *CreateCompatibilitiesSsdActiveItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCompatibilitiesSsdActiveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCompatibilitiesSsdActiveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCompatibilitiesSsdActiveItem",
		Method:             "POST",
		PathPattern:        "/platform/3/storagepool/compatibilities/ssd/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCompatibilitiesSsdActiveItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCompatibilitiesSsdActiveItemOK), nil

}

/*
CreateStoragepoolNodepool Create a new node pool.
*/
func (a *Client) CreateStoragepoolNodepool(params *CreateStoragepoolNodepoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStoragepoolNodepoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoragepoolNodepoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStoragepoolNodepool",
		Method:             "POST",
		PathPattern:        "/platform/3/storagepool/nodepools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoragepoolNodepoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStoragepoolNodepoolOK), nil

}

/*
CreateStoragepoolTier Create a new tier.
*/
func (a *Client) CreateStoragepoolTier(params *CreateStoragepoolTierParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStoragepoolTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStoragepoolTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStoragepoolTier",
		Method:             "POST",
		PathPattern:        "/platform/1/storagepool/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStoragepoolTierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStoragepoolTierOK), nil

}

/*
DeleteCompatibilitiesClassActiveByID Delete an active compatibility by id
*/
func (a *Client) DeleteCompatibilitiesClassActiveByID(params *DeleteCompatibilitiesClassActiveByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCompatibilitiesClassActiveByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCompatibilitiesClassActiveByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCompatibilitiesClassActiveById",
		Method:             "DELETE",
		PathPattern:        "/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCompatibilitiesClassActiveByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCompatibilitiesClassActiveByIDNoContent), nil

}

/*
DeleteCompatibilitiesSsdActiveByID Delete an active ssd compatibility by id
*/
func (a *Client) DeleteCompatibilitiesSsdActiveByID(params *DeleteCompatibilitiesSsdActiveByIDParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCompatibilitiesSsdActiveByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCompatibilitiesSsdActiveByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCompatibilitiesSsdActiveById",
		Method:             "DELETE",
		PathPattern:        "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCompatibilitiesSsdActiveByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCompatibilitiesSsdActiveByIDNoContent), nil

}

/*
DeleteStoragepoolNodepool Delete node pool.
*/
func (a *Client) DeleteStoragepoolNodepool(params *DeleteStoragepoolNodepoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoragepoolNodepoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoragepoolNodepoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStoragepoolNodepool",
		Method:             "DELETE",
		PathPattern:        "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoragepoolNodepoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoragepoolNodepoolNoContent), nil

}

/*
DeleteStoragepoolTier Delete tier.
*/
func (a *Client) DeleteStoragepoolTier(params *DeleteStoragepoolTierParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoragepoolTierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoragepoolTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStoragepoolTier",
		Method:             "DELETE",
		PathPattern:        "/platform/1/storagepool/tiers/{StoragepoolTierId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoragepoolTierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoragepoolTierNoContent), nil

}

/*
DeleteStoragepoolTiers Delete all tiers.
*/
func (a *Client) DeleteStoragepoolTiers(params *DeleteStoragepoolTiersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStoragepoolTiersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStoragepoolTiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStoragepoolTiers",
		Method:             "DELETE",
		PathPattern:        "/platform/1/storagepool/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStoragepoolTiersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteStoragepoolTiersNoContent), nil

}

/*
GetCompatibilitiesClassActiveByID Get an active compatibilities by id
*/
func (a *Client) GetCompatibilitiesClassActiveByID(params *GetCompatibilitiesClassActiveByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibilitiesClassActiveByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilitiesClassActiveByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatibilitiesClassActiveById",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/compatibilities/class/active/{CompatibilitiesClassActiveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilitiesClassActiveByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompatibilitiesClassActiveByIDOK), nil

}

/*
GetCompatibilitiesClassAvailable Get a list of available compatibilities
*/
func (a *Client) GetCompatibilitiesClassAvailable(params *GetCompatibilitiesClassAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibilitiesClassAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilitiesClassAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatibilitiesClassAvailable",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/compatibilities/class/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilitiesClassAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompatibilitiesClassAvailableOK), nil

}

/*
GetCompatibilitiesSsdActiveByID Get a active ssd compatibilities by id
*/
func (a *Client) GetCompatibilitiesSsdActiveByID(params *GetCompatibilitiesSsdActiveByIDParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibilitiesSsdActiveByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilitiesSsdActiveByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatibilitiesSsdActiveById",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilitiesSsdActiveByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompatibilitiesSsdActiveByIDOK), nil

}

/*
GetCompatibilitiesSsdAvailable Get a list of available ssd compatibilities
*/
func (a *Client) GetCompatibilitiesSsdAvailable(params *GetCompatibilitiesSsdAvailableParams, authInfo runtime.ClientAuthInfoWriter) (*GetCompatibilitiesSsdAvailableOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCompatibilitiesSsdAvailableParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCompatibilitiesSsdAvailable",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/compatibilities/ssd/available",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCompatibilitiesSsdAvailableReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCompatibilitiesSsdAvailableOK), nil

}

/*
GetStoragepoolNodepool Retrieve node pool information.
*/
func (a *Client) GetStoragepoolNodepool(params *GetStoragepoolNodepoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolNodepoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolNodepoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolNodepool",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolNodepoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolNodepoolOK), nil

}

/*
GetStoragepoolSettings List all settings.
*/
func (a *Client) GetStoragepoolSettings(params *GetStoragepoolSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolSettings",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolSettingsOK), nil

}

/*
GetStoragepoolStatus List any health conditions detected.
*/
func (a *Client) GetStoragepoolStatus(params *GetStoragepoolStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolStatus",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolStatusOK), nil

}

/*
GetStoragepoolStoragepools List all storage pools.
*/
func (a *Client) GetStoragepoolStoragepools(params *GetStoragepoolStoragepoolsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolStoragepoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolStoragepoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolStoragepools",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/storagepools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolStoragepoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolStoragepoolsOK), nil

}

/*
GetStoragepoolSuggestedProtectionNid Retrieve the suggested protection policy.
*/
func (a *Client) GetStoragepoolSuggestedProtectionNid(params *GetStoragepoolSuggestedProtectionNidParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolSuggestedProtectionNidOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolSuggestedProtectionNidParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolSuggestedProtectionNid",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/suggested-protection/{StoragepoolSuggestedProtectionNid}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolSuggestedProtectionNidReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolSuggestedProtectionNidOK), nil

}

/*
GetStoragepoolTier Retrieve tier information.
*/
func (a *Client) GetStoragepoolTier(params *GetStoragepoolTierParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolTierOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolTier",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/tiers/{StoragepoolTierId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolTierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolTierOK), nil

}

/*
GetStoragepoolUnprovisioned Get the unprovisioned nodes and drives
*/
func (a *Client) GetStoragepoolUnprovisioned(params *GetStoragepoolUnprovisionedParams, authInfo runtime.ClientAuthInfoWriter) (*GetStoragepoolUnprovisionedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStoragepoolUnprovisionedParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStoragepoolUnprovisioned",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/unprovisioned",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStoragepoolUnprovisionedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStoragepoolUnprovisionedOK), nil

}

/*
ListCompatibilitiesClassActive Get a list of active compatibilities
*/
func (a *Client) ListCompatibilitiesClassActive(params *ListCompatibilitiesClassActiveParams, authInfo runtime.ClientAuthInfoWriter) (*ListCompatibilitiesClassActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCompatibilitiesClassActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCompatibilitiesClassActive",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/compatibilities/class/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCompatibilitiesClassActiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCompatibilitiesClassActiveOK), nil

}

/*
ListCompatibilitiesSsdActive Get a list of active ssd compatibilities
*/
func (a *Client) ListCompatibilitiesSsdActive(params *ListCompatibilitiesSsdActiveParams, authInfo runtime.ClientAuthInfoWriter) (*ListCompatibilitiesSsdActiveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCompatibilitiesSsdActiveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCompatibilitiesSsdActive",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/compatibilities/ssd/active",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListCompatibilitiesSsdActiveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCompatibilitiesSsdActiveOK), nil

}

/*
ListStoragepoolNodepools List all node pools.
*/
func (a *Client) ListStoragepoolNodepools(params *ListStoragepoolNodepoolsParams, authInfo runtime.ClientAuthInfoWriter) (*ListStoragepoolNodepoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoragepoolNodepoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStoragepoolNodepools",
		Method:             "GET",
		PathPattern:        "/platform/3/storagepool/nodepools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStoragepoolNodepoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStoragepoolNodepoolsOK), nil

}

/*
ListStoragepoolTiers List all tiers.
*/
func (a *Client) ListStoragepoolTiers(params *ListStoragepoolTiersParams, authInfo runtime.ClientAuthInfoWriter) (*ListStoragepoolTiersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStoragepoolTiersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStoragepoolTiers",
		Method:             "GET",
		PathPattern:        "/platform/1/storagepool/tiers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListStoragepoolTiersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStoragepoolTiersOK), nil

}

/*
UpdateCompatibilitiesSsdActiveByID Modify an ssd compatibility by id
*/
func (a *Client) UpdateCompatibilitiesSsdActiveByID(params *UpdateCompatibilitiesSsdActiveByIDParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCompatibilitiesSsdActiveByIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCompatibilitiesSsdActiveByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCompatibilitiesSsdActiveById",
		Method:             "PUT",
		PathPattern:        "/platform/3/storagepool/compatibilities/ssd/active/{CompatibilitiesSsdActiveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCompatibilitiesSsdActiveByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateCompatibilitiesSsdActiveByIDNoContent), nil

}

/*
UpdateStoragepoolNodepool Modify node pool. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateStoragepoolNodepool(params *UpdateStoragepoolNodepoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStoragepoolNodepoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoragepoolNodepoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStoragepoolNodepool",
		Method:             "PUT",
		PathPattern:        "/platform/3/storagepool/nodepools/{StoragepoolNodepoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoragepoolNodepoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStoragepoolNodepoolNoContent), nil

}

/*
UpdateStoragepoolSettings Modify one or more settings.
*/
func (a *Client) UpdateStoragepoolSettings(params *UpdateStoragepoolSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStoragepoolSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoragepoolSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStoragepoolSettings",
		Method:             "PUT",
		PathPattern:        "/platform/1/storagepool/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoragepoolSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStoragepoolSettingsNoContent), nil

}

/*
UpdateStoragepoolTier Modify tier. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateStoragepoolTier(params *UpdateStoragepoolTierParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStoragepoolTierNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStoragepoolTierParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStoragepoolTier",
		Method:             "PUT",
		PathPattern:        "/platform/1/storagepool/tiers/{StoragepoolTierId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStoragepoolTierReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStoragepoolTierNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
