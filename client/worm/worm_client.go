// Code generated by go-swagger; DO NOT EDIT.

package worm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new worm API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for worm API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateWormDomain Create a WORM domain.
*/
func (a *Client) CreateWormDomain(params *CreateWormDomainParams, authInfo runtime.ClientAuthInfoWriter) (*CreateWormDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWormDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createWormDomain",
		Method:             "POST",
		PathPattern:        "/platform/1/worm/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWormDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateWormDomainOK), nil

}

/*
GetWormDomain View a single WORM domain.
*/
func (a *Client) GetWormDomain(params *GetWormDomainParams, authInfo runtime.ClientAuthInfoWriter) (*GetWormDomainOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWormDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWormDomain",
		Method:             "GET",
		PathPattern:        "/platform/1/worm/domains/{WormDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWormDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWormDomainOK), nil

}

/*
GetWormSettings Get the global WORM settings.
*/
func (a *Client) GetWormSettings(params *GetWormSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetWormSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWormSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getWormSettings",
		Method:             "GET",
		PathPattern:        "/platform/1/worm/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWormSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetWormSettingsOK), nil

}

/*
ListWormDomains List all WORM domains.
*/
func (a *Client) ListWormDomains(params *ListWormDomainsParams, authInfo runtime.ClientAuthInfoWriter) (*ListWormDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWormDomainsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listWormDomains",
		Method:             "GET",
		PathPattern:        "/platform/1/worm/domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWormDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListWormDomainsOK), nil

}

/*
UpdateWormDomain Modify a single WORM domain.
*/
func (a *Client) UpdateWormDomain(params *UpdateWormDomainParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWormDomainNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWormDomainParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWormDomain",
		Method:             "PUT",
		PathPattern:        "/platform/1/worm/domains/{WormDomainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWormDomainReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWormDomainNoContent), nil

}

/*
UpdateWormSettings Modify the global WORM settings.  All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateWormSettings(params *UpdateWormSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateWormSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWormSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateWormSettings",
		Method:             "PUT",
		PathPattern:        "/platform/1/worm/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWormSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateWormSettingsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
