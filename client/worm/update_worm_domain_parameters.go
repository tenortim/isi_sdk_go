// Code generated by go-swagger; DO NOT EDIT.

package worm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateWormDomainParams creates a new UpdateWormDomainParams object
// with the default values initialized.
func NewUpdateWormDomainParams() *UpdateWormDomainParams {
	var ()
	return &UpdateWormDomainParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateWormDomainParamsWithTimeout creates a new UpdateWormDomainParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateWormDomainParamsWithTimeout(timeout time.Duration) *UpdateWormDomainParams {
	var ()
	return &UpdateWormDomainParams{

		timeout: timeout,
	}
}

// NewUpdateWormDomainParamsWithContext creates a new UpdateWormDomainParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateWormDomainParamsWithContext(ctx context.Context) *UpdateWormDomainParams {
	var ()
	return &UpdateWormDomainParams{

		Context: ctx,
	}
}

// NewUpdateWormDomainParamsWithHTTPClient creates a new UpdateWormDomainParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateWormDomainParamsWithHTTPClient(client *http.Client) *UpdateWormDomainParams {
	var ()
	return &UpdateWormDomainParams{
		HTTPClient: client,
	}
}

/*UpdateWormDomainParams contains all the parameters to send to the API endpoint
for the update worm domain operation typically these are written to a http.Request
*/
type UpdateWormDomainParams struct {

	/*WormDomain*/
	WormDomain *models.WormDomain
	/*WormDomainID
	  Modify a single WORM domain.

	*/
	WormDomainID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update worm domain params
func (o *UpdateWormDomainParams) WithTimeout(timeout time.Duration) *UpdateWormDomainParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update worm domain params
func (o *UpdateWormDomainParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update worm domain params
func (o *UpdateWormDomainParams) WithContext(ctx context.Context) *UpdateWormDomainParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update worm domain params
func (o *UpdateWormDomainParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update worm domain params
func (o *UpdateWormDomainParams) WithHTTPClient(client *http.Client) *UpdateWormDomainParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update worm domain params
func (o *UpdateWormDomainParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWormDomain adds the wormDomain to the update worm domain params
func (o *UpdateWormDomainParams) WithWormDomain(wormDomain *models.WormDomain) *UpdateWormDomainParams {
	o.SetWormDomain(wormDomain)
	return o
}

// SetWormDomain adds the wormDomain to the update worm domain params
func (o *UpdateWormDomainParams) SetWormDomain(wormDomain *models.WormDomain) {
	o.WormDomain = wormDomain
}

// WithWormDomainID adds the wormDomainID to the update worm domain params
func (o *UpdateWormDomainParams) WithWormDomainID(wormDomainID string) *UpdateWormDomainParams {
	o.SetWormDomainID(wormDomainID)
	return o
}

// SetWormDomainID adds the wormDomainId to the update worm domain params
func (o *UpdateWormDomainParams) SetWormDomainID(wormDomainID string) {
	o.WormDomainID = wormDomainID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateWormDomainParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.WormDomain != nil {
		if err := r.SetBodyParam(o.WormDomain); err != nil {
			return err
		}
	}

	// path param WormDomainId
	if err := r.SetPathParam("WormDomainId", o.WormDomainID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
