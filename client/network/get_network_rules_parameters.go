// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetNetworkRulesParams creates a new GetNetworkRulesParams object
// with the default values initialized.
func NewGetNetworkRulesParams() *GetNetworkRulesParams {
	var ()
	return &GetNetworkRulesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetNetworkRulesParamsWithTimeout creates a new GetNetworkRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetNetworkRulesParamsWithTimeout(timeout time.Duration) *GetNetworkRulesParams {
	var ()
	return &GetNetworkRulesParams{

		timeout: timeout,
	}
}

// NewGetNetworkRulesParamsWithContext creates a new GetNetworkRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetNetworkRulesParamsWithContext(ctx context.Context) *GetNetworkRulesParams {
	var ()
	return &GetNetworkRulesParams{

		Context: ctx,
	}
}

// NewGetNetworkRulesParamsWithHTTPClient creates a new GetNetworkRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetNetworkRulesParamsWithHTTPClient(client *http.Client) *GetNetworkRulesParams {
	var ()
	return &GetNetworkRulesParams{
		HTTPClient: client,
	}
}

/*GetNetworkRulesParams contains all the parameters to send to the API endpoint
for the get network rules operation typically these are written to a http.Request
*/
type GetNetworkRulesParams struct {

	/*Dir
	  The direction of the sort.

	*/
	Dir *string
	/*Groupnet
	  Name of the groupnet to list rules from.

	*/
	Groupnet *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Pool
	  Name of the pool to list rules from.

	*/
	Pool *string
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Sort
	  The field that will be used for sorting.

	*/
	Sort *string
	/*Subnet
	  Name of the subnet to list rules from.

	*/
	Subnet *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get network rules params
func (o *GetNetworkRulesParams) WithTimeout(timeout time.Duration) *GetNetworkRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get network rules params
func (o *GetNetworkRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get network rules params
func (o *GetNetworkRulesParams) WithContext(ctx context.Context) *GetNetworkRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get network rules params
func (o *GetNetworkRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get network rules params
func (o *GetNetworkRulesParams) WithHTTPClient(client *http.Client) *GetNetworkRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get network rules params
func (o *GetNetworkRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDir adds the dir to the get network rules params
func (o *GetNetworkRulesParams) WithDir(dir *string) *GetNetworkRulesParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the get network rules params
func (o *GetNetworkRulesParams) SetDir(dir *string) {
	o.Dir = dir
}

// WithGroupnet adds the groupnet to the get network rules params
func (o *GetNetworkRulesParams) WithGroupnet(groupnet *string) *GetNetworkRulesParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the get network rules params
func (o *GetNetworkRulesParams) SetGroupnet(groupnet *string) {
	o.Groupnet = groupnet
}

// WithLimit adds the limit to the get network rules params
func (o *GetNetworkRulesParams) WithLimit(limit *int64) *GetNetworkRulesParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get network rules params
func (o *GetNetworkRulesParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPool adds the pool to the get network rules params
func (o *GetNetworkRulesParams) WithPool(pool *string) *GetNetworkRulesParams {
	o.SetPool(pool)
	return o
}

// SetPool adds the pool to the get network rules params
func (o *GetNetworkRulesParams) SetPool(pool *string) {
	o.Pool = pool
}

// WithResume adds the resume to the get network rules params
func (o *GetNetworkRulesParams) WithResume(resume *string) *GetNetworkRulesParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the get network rules params
func (o *GetNetworkRulesParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithSort adds the sort to the get network rules params
func (o *GetNetworkRulesParams) WithSort(sort *string) *GetNetworkRulesParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get network rules params
func (o *GetNetworkRulesParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithSubnet adds the subnet to the get network rules params
func (o *GetNetworkRulesParams) WithSubnet(subnet *string) *GetNetworkRulesParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the get network rules params
func (o *GetNetworkRulesParams) SetSubnet(subnet *string) {
	o.Subnet = subnet
}

// WriteToRequest writes these params to a swagger request
func (o *GetNetworkRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Dir != nil {

		// query param dir
		var qrDir string
		if o.Dir != nil {
			qrDir = *o.Dir
		}
		qDir := qrDir
		if qDir != "" {
			if err := r.SetQueryParam("dir", qDir); err != nil {
				return err
			}
		}

	}

	if o.Groupnet != nil {

		// query param groupnet
		var qrGroupnet string
		if o.Groupnet != nil {
			qrGroupnet = *o.Groupnet
		}
		qGroupnet := qrGroupnet
		if qGroupnet != "" {
			if err := r.SetQueryParam("groupnet", qGroupnet); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Pool != nil {

		// query param pool
		var qrPool string
		if o.Pool != nil {
			qrPool = *o.Pool
		}
		qPool := qrPool
		if qPool != "" {
			if err := r.SetQueryParam("pool", qPool); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Subnet != nil {

		// query param subnet
		var qrSubnet string
		if o.Subnet != nil {
			qrSubnet = *o.Subnet
		}
		qSubnet := qrSubnet
		if qSubnet != "" {
			if err := r.SetQueryParam("subnet", qSubnet); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
