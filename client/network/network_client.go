// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDnscacheFlushItem Flush the DNSCache.
*/
func (a *Client) CreateDnscacheFlushItem(params *CreateDnscacheFlushItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDnscacheFlushItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDnscacheFlushItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDnscacheFlushItem",
		Method:             "POST",
		PathPattern:        "/platform/3/network/dnscache/flush",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDnscacheFlushItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDnscacheFlushItemOK), nil

}

/*
CreateNetworkGroupnet Create a new groupnet.
*/
func (a *Client) CreateNetworkGroupnet(params *CreateNetworkGroupnetParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkGroupnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkGroupnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkGroupnet",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkGroupnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNetworkGroupnetOK), nil

}

/*
CreateNetworkScRebalanceAllItem Rebalance IP addresses in all pools.
*/
func (a *Client) CreateNetworkScRebalanceAllItem(params *CreateNetworkScRebalanceAllItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNetworkScRebalanceAllItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNetworkScRebalanceAllItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNetworkScRebalanceAllItem",
		Method:             "POST",
		PathPattern:        "/platform/3/network/sc-rebalance-all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNetworkScRebalanceAllItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNetworkScRebalanceAllItemOK), nil

}

/*
DeleteNetworkGroupnet Delete a network groupnet.
*/
func (a *Client) DeleteNetworkGroupnet(params *DeleteNetworkGroupnetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteNetworkGroupnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkGroupnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetworkGroupnet",
		Method:             "DELETE",
		PathPattern:        "/platform/3/network/groupnets/{NetworkGroupnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNetworkGroupnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteNetworkGroupnetNoContent), nil

}

/*
GetNetworkDnscache View network dns cache settings.
*/
func (a *Client) GetNetworkDnscache(params *GetNetworkDnscacheParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkDnscacheOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkDnscacheParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkDnscache",
		Method:             "GET",
		PathPattern:        "/platform/3/network/dnscache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkDnscacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkDnscacheOK), nil

}

/*
GetNetworkExternal View external network settings.
*/
func (a *Client) GetNetworkExternal(params *GetNetworkExternalParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkExternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkExternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkExternal",
		Method:             "GET",
		PathPattern:        "/platform/3/network/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkExternalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkExternalOK), nil

}

/*
GetNetworkGroupnet View a network groupnet.
*/
func (a *Client) GetNetworkGroupnet(params *GetNetworkGroupnetParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkGroupnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkGroupnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkGroupnet",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{NetworkGroupnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkGroupnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkGroupnetOK), nil

}

/*
GetNetworkInterfaces Get a list of interfaces.
*/
func (a *Client) GetNetworkInterfaces(params *GetNetworkInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkInterfaces",
		Method:             "GET",
		PathPattern:        "/platform/3/network/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkInterfacesOK), nil

}

/*
GetNetworkPools Get a list of flexnet pools.
*/
func (a *Client) GetNetworkPools(params *GetNetworkPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkPools",
		Method:             "GET",
		PathPattern:        "/platform/3/network/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkPoolsOK), nil

}

/*
GetNetworkRules Get a list of network rules.
*/
func (a *Client) GetNetworkRules(params *GetNetworkRulesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkRules",
		Method:             "GET",
		PathPattern:        "/platform/3/network/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkRulesOK), nil

}

/*
GetNetworkSubnets Get a list of subnets.
*/
func (a *Client) GetNetworkSubnets(params *GetNetworkSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNetworkSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetworkSubnets",
		Method:             "GET",
		PathPattern:        "/platform/3/network/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNetworkSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkSubnetsOK), nil

}

/*
ListNetworkGroupnets Get a list of groupnets.
*/
func (a *Client) ListNetworkGroupnets(params *ListNetworkGroupnetsParams, authInfo runtime.ClientAuthInfoWriter) (*ListNetworkGroupnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNetworkGroupnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listNetworkGroupnets",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNetworkGroupnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListNetworkGroupnetsOK), nil

}

/*
UpdateNetworkDnscache Modify network dns cache settings.
*/
func (a *Client) UpdateNetworkDnscache(params *UpdateNetworkDnscacheParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkDnscacheNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkDnscacheParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkDnscache",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/dnscache",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkDnscacheReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNetworkDnscacheNoContent), nil

}

/*
UpdateNetworkExternal Modify external network settings.
*/
func (a *Client) UpdateNetworkExternal(params *UpdateNetworkExternalParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkExternalNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkExternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkExternal",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/external",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkExternalReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNetworkExternalNoContent), nil

}

/*
UpdateNetworkGroupnet Modify a network groupnet.
*/
func (a *Client) UpdateNetworkGroupnet(params *UpdateNetworkGroupnetParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNetworkGroupnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNetworkGroupnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNetworkGroupnet",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/groupnets/{NetworkGroupnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNetworkGroupnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNetworkGroupnetNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
