// Code generated by go-swagger; DO NOT EDIT.

package network

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateNetworkDnscacheParams creates a new UpdateNetworkDnscacheParams object
// with the default values initialized.
func NewUpdateNetworkDnscacheParams() *UpdateNetworkDnscacheParams {
	var ()
	return &UpdateNetworkDnscacheParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateNetworkDnscacheParamsWithTimeout creates a new UpdateNetworkDnscacheParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateNetworkDnscacheParamsWithTimeout(timeout time.Duration) *UpdateNetworkDnscacheParams {
	var ()
	return &UpdateNetworkDnscacheParams{

		timeout: timeout,
	}
}

// NewUpdateNetworkDnscacheParamsWithContext creates a new UpdateNetworkDnscacheParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateNetworkDnscacheParamsWithContext(ctx context.Context) *UpdateNetworkDnscacheParams {
	var ()
	return &UpdateNetworkDnscacheParams{

		Context: ctx,
	}
}

// NewUpdateNetworkDnscacheParamsWithHTTPClient creates a new UpdateNetworkDnscacheParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateNetworkDnscacheParamsWithHTTPClient(client *http.Client) *UpdateNetworkDnscacheParams {
	var ()
	return &UpdateNetworkDnscacheParams{
		HTTPClient: client,
	}
}

/*UpdateNetworkDnscacheParams contains all the parameters to send to the API endpoint
for the update network dnscache operation typically these are written to a http.Request
*/
type UpdateNetworkDnscacheParams struct {

	/*NetworkDnscache*/
	NetworkDnscache *models.NetworkDnscacheExtended

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) WithTimeout(timeout time.Duration) *UpdateNetworkDnscacheParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) WithContext(ctx context.Context) *UpdateNetworkDnscacheParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) WithHTTPClient(client *http.Client) *UpdateNetworkDnscacheParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithNetworkDnscache adds the networkDnscache to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) WithNetworkDnscache(networkDnscache *models.NetworkDnscacheExtended) *UpdateNetworkDnscacheParams {
	o.SetNetworkDnscache(networkDnscache)
	return o
}

// SetNetworkDnscache adds the networkDnscache to the update network dnscache params
func (o *UpdateNetworkDnscacheParams) SetNetworkDnscache(networkDnscache *models.NetworkDnscacheExtended) {
	o.NetworkDnscache = networkDnscache
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateNetworkDnscacheParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.NetworkDnscache != nil {
		if err := r.SetBodyParam(o.NetworkDnscache); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
