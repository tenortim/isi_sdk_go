// Code generated by go-swagger; DO NOT EDIT.

package auth_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new auth roles API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth roles API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRoleMember Add a member to the role.
*/
func (a *Client) CreateRoleMember(params *CreateRoleMemberParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRoleMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRoleMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRoleMember",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/roles/{Role}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRoleMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRoleMemberOK), nil

}

/*
CreateRolePrivilege Add a privilege to the role.
*/
func (a *Client) CreateRolePrivilege(params *CreateRolePrivilegeParams, authInfo runtime.ClientAuthInfoWriter) (*CreateRolePrivilegeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRolePrivilegeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRolePrivilege",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/roles/{Role}/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateRolePrivilegeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRolePrivilegeOK), nil

}

/*
DeleteRoleMember Remove a member from the role.
*/
func (a *Client) DeleteRoleMember(params *DeleteRoleMemberParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRoleMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRoleMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRoleMember",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/roles/{Role}/members/{RoleMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRoleMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRoleMemberNoContent), nil

}

/*
DeleteRolePrivilege Remove a privilege from a role.
*/
func (a *Client) DeleteRolePrivilege(params *DeleteRolePrivilegeParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteRolePrivilegeNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRolePrivilegeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRolePrivilege",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/roles/{Role}/privileges/{RolePrivilegeId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteRolePrivilegeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRolePrivilegeNoContent), nil

}

/*
ListRoleMembers List all the members of the role.
*/
func (a *Client) ListRoleMembers(params *ListRoleMembersParams, authInfo runtime.ClientAuthInfoWriter) (*ListRoleMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRoleMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRoleMembers",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/roles/{Role}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRoleMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRoleMembersOK), nil

}

/*
ListRolePrivileges List all privileges in the role.
*/
func (a *Client) ListRolePrivileges(params *ListRolePrivilegesParams, authInfo runtime.ClientAuthInfoWriter) (*ListRolePrivilegesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRolePrivilegesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRolePrivileges",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/roles/{Role}/privileges",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListRolePrivilegesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRolePrivilegesOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
