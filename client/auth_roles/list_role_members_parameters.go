// Code generated by go-swagger; DO NOT EDIT.

package auth_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListRoleMembersParams creates a new ListRoleMembersParams object
// with the default values initialized.
func NewListRoleMembersParams() *ListRoleMembersParams {
	var ()
	return &ListRoleMembersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListRoleMembersParamsWithTimeout creates a new ListRoleMembersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListRoleMembersParamsWithTimeout(timeout time.Duration) *ListRoleMembersParams {
	var ()
	return &ListRoleMembersParams{

		timeout: timeout,
	}
}

// NewListRoleMembersParamsWithContext creates a new ListRoleMembersParams object
// with the default values initialized, and the ability to set a context for a request
func NewListRoleMembersParamsWithContext(ctx context.Context) *ListRoleMembersParams {
	var ()
	return &ListRoleMembersParams{

		Context: ctx,
	}
}

// NewListRoleMembersParamsWithHTTPClient creates a new ListRoleMembersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListRoleMembersParamsWithHTTPClient(client *http.Client) *ListRoleMembersParams {
	var ()
	return &ListRoleMembersParams{
		HTTPClient: client,
	}
}

/*ListRoleMembersParams contains all the parameters to send to the API endpoint
for the list role members operation typically these are written to a http.Request
*/
type ListRoleMembersParams struct {

	/*Role*/
	Role string
	/*ResolveNames
	  Resolve names of personas.

	*/
	ResolveNames *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list role members params
func (o *ListRoleMembersParams) WithTimeout(timeout time.Duration) *ListRoleMembersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list role members params
func (o *ListRoleMembersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list role members params
func (o *ListRoleMembersParams) WithContext(ctx context.Context) *ListRoleMembersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list role members params
func (o *ListRoleMembersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list role members params
func (o *ListRoleMembersParams) WithHTTPClient(client *http.Client) *ListRoleMembersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list role members params
func (o *ListRoleMembersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithRole adds the role to the list role members params
func (o *ListRoleMembersParams) WithRole(role string) *ListRoleMembersParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the list role members params
func (o *ListRoleMembersParams) SetRole(role string) {
	o.Role = role
}

// WithResolveNames adds the resolveNames to the list role members params
func (o *ListRoleMembersParams) WithResolveNames(resolveNames *bool) *ListRoleMembersParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the list role members params
func (o *ListRoleMembersParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WriteToRequest writes these params to a swagger request
func (o *ListRoleMembersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Role
	if err := r.SetPathParam("Role", o.Role); err != nil {
		return err
	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
