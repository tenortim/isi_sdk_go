// Code generated by go-swagger; DO NOT EDIT.

package upgrade

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetClusterPatchPatchParams creates a new GetClusterPatchPatchParams object
// with the default values initialized.
func NewGetClusterPatchPatchParams() *GetClusterPatchPatchParams {
	var ()
	return &GetClusterPatchPatchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetClusterPatchPatchParamsWithTimeout creates a new GetClusterPatchPatchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetClusterPatchPatchParamsWithTimeout(timeout time.Duration) *GetClusterPatchPatchParams {
	var ()
	return &GetClusterPatchPatchParams{

		timeout: timeout,
	}
}

// NewGetClusterPatchPatchParamsWithContext creates a new GetClusterPatchPatchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetClusterPatchPatchParamsWithContext(ctx context.Context) *GetClusterPatchPatchParams {
	var ()
	return &GetClusterPatchPatchParams{

		Context: ctx,
	}
}

// NewGetClusterPatchPatchParamsWithHTTPClient creates a new GetClusterPatchPatchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetClusterPatchPatchParamsWithHTTPClient(client *http.Client) *GetClusterPatchPatchParams {
	var ()
	return &GetClusterPatchPatchParams{
		HTTPClient: client,
	}
}

/*GetClusterPatchPatchParams contains all the parameters to send to the API endpoint
for the get cluster patch patch operation typically these are written to a http.Request
*/
type GetClusterPatchPatchParams struct {

	/*ClusterPatchPatchID
	  View a single patch.

	*/
	ClusterPatchPatchID string
	/*Local
	  Only view patch information on the local node.

	*/
	Local *bool
	/*Location
	  Path location of patch file.

	*/
	Location *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithTimeout(timeout time.Duration) *GetClusterPatchPatchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithContext(ctx context.Context) *GetClusterPatchPatchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithHTTPClient(client *http.Client) *GetClusterPatchPatchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterPatchPatchID adds the clusterPatchPatchID to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithClusterPatchPatchID(clusterPatchPatchID string) *GetClusterPatchPatchParams {
	o.SetClusterPatchPatchID(clusterPatchPatchID)
	return o
}

// SetClusterPatchPatchID adds the clusterPatchPatchId to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetClusterPatchPatchID(clusterPatchPatchID string) {
	o.ClusterPatchPatchID = clusterPatchPatchID
}

// WithLocal adds the local to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithLocal(local *bool) *GetClusterPatchPatchParams {
	o.SetLocal(local)
	return o
}

// SetLocal adds the local to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetLocal(local *bool) {
	o.Local = local
}

// WithLocation adds the location to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) WithLocation(location *string) *GetClusterPatchPatchParams {
	o.SetLocation(location)
	return o
}

// SetLocation adds the location to the get cluster patch patch params
func (o *GetClusterPatchPatchParams) SetLocation(location *string) {
	o.Location = location
}

// WriteToRequest writes these params to a swagger request
func (o *GetClusterPatchPatchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param ClusterPatchPatchId
	if err := r.SetPathParam("ClusterPatchPatchId", o.ClusterPatchPatchID); err != nil {
		return err
	}

	if o.Local != nil {

		// query param local
		var qrLocal bool
		if o.Local != nil {
			qrLocal = *o.Local
		}
		qLocal := swag.FormatBool(qrLocal)
		if qLocal != "" {
			if err := r.SetQueryParam("local", qLocal); err != nil {
				return err
			}
		}

	}

	if o.Location != nil {

		// query param location
		var qrLocation string
		if o.Location != nil {
			qrLocation = *o.Location
		}
		qLocation := qrLocation
		if qLocation != "" {
			if err := r.SetQueryParam("location", qLocation); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
