// Code generated by go-swagger; DO NOT EDIT.

package auth_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateUserChangePasswordParams creates a new UpdateUserChangePasswordParams object
// with the default values initialized.
func NewUpdateUserChangePasswordParams() *UpdateUserChangePasswordParams {
	var ()
	return &UpdateUserChangePasswordParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateUserChangePasswordParamsWithTimeout creates a new UpdateUserChangePasswordParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateUserChangePasswordParamsWithTimeout(timeout time.Duration) *UpdateUserChangePasswordParams {
	var ()
	return &UpdateUserChangePasswordParams{

		timeout: timeout,
	}
}

// NewUpdateUserChangePasswordParamsWithContext creates a new UpdateUserChangePasswordParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateUserChangePasswordParamsWithContext(ctx context.Context) *UpdateUserChangePasswordParams {
	var ()
	return &UpdateUserChangePasswordParams{

		Context: ctx,
	}
}

// NewUpdateUserChangePasswordParamsWithHTTPClient creates a new UpdateUserChangePasswordParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateUserChangePasswordParamsWithHTTPClient(client *http.Client) *UpdateUserChangePasswordParams {
	var ()
	return &UpdateUserChangePasswordParams{
		HTTPClient: client,
	}
}

/*UpdateUserChangePasswordParams contains all the parameters to send to the API endpoint
for the update user change password operation typically these are written to a http.Request
*/
type UpdateUserChangePasswordParams struct {

	/*User*/
	User string
	/*UserChangePassword*/
	UserChangePassword *models.UserChangePassword
	/*Zone
	  Specifies access zone containing user.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update user change password params
func (o *UpdateUserChangePasswordParams) WithTimeout(timeout time.Duration) *UpdateUserChangePasswordParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update user change password params
func (o *UpdateUserChangePasswordParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update user change password params
func (o *UpdateUserChangePasswordParams) WithContext(ctx context.Context) *UpdateUserChangePasswordParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update user change password params
func (o *UpdateUserChangePasswordParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update user change password params
func (o *UpdateUserChangePasswordParams) WithHTTPClient(client *http.Client) *UpdateUserChangePasswordParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update user change password params
func (o *UpdateUserChangePasswordParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the update user change password params
func (o *UpdateUserChangePasswordParams) WithUser(user string) *UpdateUserChangePasswordParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the update user change password params
func (o *UpdateUserChangePasswordParams) SetUser(user string) {
	o.User = user
}

// WithUserChangePassword adds the userChangePassword to the update user change password params
func (o *UpdateUserChangePasswordParams) WithUserChangePassword(userChangePassword *models.UserChangePassword) *UpdateUserChangePasswordParams {
	o.SetUserChangePassword(userChangePassword)
	return o
}

// SetUserChangePassword adds the userChangePassword to the update user change password params
func (o *UpdateUserChangePasswordParams) SetUserChangePassword(userChangePassword *models.UserChangePassword) {
	o.UserChangePassword = userChangePassword
}

// WithZone adds the zone to the update user change password params
func (o *UpdateUserChangePasswordParams) WithZone(zone *string) *UpdateUserChangePasswordParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the update user change password params
func (o *UpdateUserChangePasswordParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateUserChangePasswordParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param User
	if err := r.SetPathParam("User", o.User); err != nil {
		return err
	}

	if o.UserChangePassword != nil {
		if err := r.SetBodyParam(o.UserChangePassword); err != nil {
			return err
		}
	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
