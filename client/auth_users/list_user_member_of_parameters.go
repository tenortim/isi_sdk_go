// Code generated by go-swagger; DO NOT EDIT.

package auth_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListUserMemberOfParams creates a new ListUserMemberOfParams object
// with the default values initialized.
func NewListUserMemberOfParams() *ListUserMemberOfParams {
	var ()
	return &ListUserMemberOfParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListUserMemberOfParamsWithTimeout creates a new ListUserMemberOfParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListUserMemberOfParamsWithTimeout(timeout time.Duration) *ListUserMemberOfParams {
	var ()
	return &ListUserMemberOfParams{

		timeout: timeout,
	}
}

// NewListUserMemberOfParamsWithContext creates a new ListUserMemberOfParams object
// with the default values initialized, and the ability to set a context for a request
func NewListUserMemberOfParamsWithContext(ctx context.Context) *ListUserMemberOfParams {
	var ()
	return &ListUserMemberOfParams{

		Context: ctx,
	}
}

// NewListUserMemberOfParamsWithHTTPClient creates a new ListUserMemberOfParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListUserMemberOfParamsWithHTTPClient(client *http.Client) *ListUserMemberOfParams {
	var ()
	return &ListUserMemberOfParams{
		HTTPClient: client,
	}
}

/*ListUserMemberOfParams contains all the parameters to send to the API endpoint
for the list user member of operation typically these are written to a http.Request
*/
type ListUserMemberOfParams struct {

	/*User*/
	User string
	/*Provider
	  Filter groups by provider.

	*/
	Provider *string
	/*ResolveNames
	  Resolve names of personas.

	*/
	ResolveNames *bool
	/*Zone
	  Filter groups by zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list user member of params
func (o *ListUserMemberOfParams) WithTimeout(timeout time.Duration) *ListUserMemberOfParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list user member of params
func (o *ListUserMemberOfParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list user member of params
func (o *ListUserMemberOfParams) WithContext(ctx context.Context) *ListUserMemberOfParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list user member of params
func (o *ListUserMemberOfParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list user member of params
func (o *ListUserMemberOfParams) WithHTTPClient(client *http.Client) *ListUserMemberOfParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list user member of params
func (o *ListUserMemberOfParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the list user member of params
func (o *ListUserMemberOfParams) WithUser(user string) *ListUserMemberOfParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the list user member of params
func (o *ListUserMemberOfParams) SetUser(user string) {
	o.User = user
}

// WithProvider adds the provider to the list user member of params
func (o *ListUserMemberOfParams) WithProvider(provider *string) *ListUserMemberOfParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the list user member of params
func (o *ListUserMemberOfParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithResolveNames adds the resolveNames to the list user member of params
func (o *ListUserMemberOfParams) WithResolveNames(resolveNames *bool) *ListUserMemberOfParams {
	o.SetResolveNames(resolveNames)
	return o
}

// SetResolveNames adds the resolveNames to the list user member of params
func (o *ListUserMemberOfParams) SetResolveNames(resolveNames *bool) {
	o.ResolveNames = resolveNames
}

// WithZone adds the zone to the list user member of params
func (o *ListUserMemberOfParams) WithZone(zone *string) *ListUserMemberOfParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the list user member of params
func (o *ListUserMemberOfParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *ListUserMemberOfParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param User
	if err := r.SetPathParam("User", o.User); err != nil {
		return err
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.ResolveNames != nil {

		// query param resolve_names
		var qrResolveNames bool
		if o.ResolveNames != nil {
			qrResolveNames = *o.ResolveNames
		}
		qResolveNames := swag.FormatBool(qrResolveNames)
		if qResolveNames != "" {
			if err := r.SetQueryParam("resolve_names", qResolveNames); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
