// Code generated by go-swagger; DO NOT EDIT.

package auth_users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteUserMemberOfMemberOfParams creates a new DeleteUserMemberOfMemberOfParams object
// with the default values initialized.
func NewDeleteUserMemberOfMemberOfParams() *DeleteUserMemberOfMemberOfParams {
	var ()
	return &DeleteUserMemberOfMemberOfParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteUserMemberOfMemberOfParamsWithTimeout creates a new DeleteUserMemberOfMemberOfParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteUserMemberOfMemberOfParamsWithTimeout(timeout time.Duration) *DeleteUserMemberOfMemberOfParams {
	var ()
	return &DeleteUserMemberOfMemberOfParams{

		timeout: timeout,
	}
}

// NewDeleteUserMemberOfMemberOfParamsWithContext creates a new DeleteUserMemberOfMemberOfParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteUserMemberOfMemberOfParamsWithContext(ctx context.Context) *DeleteUserMemberOfMemberOfParams {
	var ()
	return &DeleteUserMemberOfMemberOfParams{

		Context: ctx,
	}
}

// NewDeleteUserMemberOfMemberOfParamsWithHTTPClient creates a new DeleteUserMemberOfMemberOfParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteUserMemberOfMemberOfParamsWithHTTPClient(client *http.Client) *DeleteUserMemberOfMemberOfParams {
	var ()
	return &DeleteUserMemberOfMemberOfParams{
		HTTPClient: client,
	}
}

/*DeleteUserMemberOfMemberOfParams contains all the parameters to send to the API endpoint
for the delete user member of member of operation typically these are written to a http.Request
*/
type DeleteUserMemberOfMemberOfParams struct {

	/*User*/
	User string
	/*UserMemberOfMemberOf
	  Remove the user from the group.

	*/
	UserMemberOfMemberOf string
	/*Provider
	  Filter groups by provider.

	*/
	Provider *string
	/*Zone
	  Filter groups by zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithTimeout(timeout time.Duration) *DeleteUserMemberOfMemberOfParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithContext(ctx context.Context) *DeleteUserMemberOfMemberOfParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithHTTPClient(client *http.Client) *DeleteUserMemberOfMemberOfParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUser adds the user to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithUser(user string) *DeleteUserMemberOfMemberOfParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetUser(user string) {
	o.User = user
}

// WithUserMemberOfMemberOf adds the userMemberOfMemberOf to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithUserMemberOfMemberOf(userMemberOfMemberOf string) *DeleteUserMemberOfMemberOfParams {
	o.SetUserMemberOfMemberOf(userMemberOfMemberOf)
	return o
}

// SetUserMemberOfMemberOf adds the userMemberOfMemberOf to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetUserMemberOfMemberOf(userMemberOfMemberOf string) {
	o.UserMemberOfMemberOf = userMemberOfMemberOf
}

// WithProvider adds the provider to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithProvider(provider *string) *DeleteUserMemberOfMemberOfParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithZone adds the zone to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) WithZone(zone *string) *DeleteUserMemberOfMemberOfParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the delete user member of member of params
func (o *DeleteUserMemberOfMemberOfParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteUserMemberOfMemberOfParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param User
	if err := r.SetPathParam("User", o.User); err != nil {
		return err
	}

	// path param UserMemberOfMemberOf
	if err := r.SetPathParam("UserMemberOfMemberOf", o.UserMemberOfMemberOf); err != nil {
		return err
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
