// Code generated by go-swagger; DO NOT EDIT.

package cluster_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDrivesDriveFirmwareParams creates a new GetDrivesDriveFirmwareParams object
// with the default values initialized.
func NewGetDrivesDriveFirmwareParams() *GetDrivesDriveFirmwareParams {
	var ()
	return &GetDrivesDriveFirmwareParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDrivesDriveFirmwareParamsWithTimeout creates a new GetDrivesDriveFirmwareParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDrivesDriveFirmwareParamsWithTimeout(timeout time.Duration) *GetDrivesDriveFirmwareParams {
	var ()
	return &GetDrivesDriveFirmwareParams{

		timeout: timeout,
	}
}

// NewGetDrivesDriveFirmwareParamsWithContext creates a new GetDrivesDriveFirmwareParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDrivesDriveFirmwareParamsWithContext(ctx context.Context) *GetDrivesDriveFirmwareParams {
	var ()
	return &GetDrivesDriveFirmwareParams{

		Context: ctx,
	}
}

// NewGetDrivesDriveFirmwareParamsWithHTTPClient creates a new GetDrivesDriveFirmwareParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDrivesDriveFirmwareParamsWithHTTPClient(client *http.Client) *GetDrivesDriveFirmwareParams {
	var ()
	return &GetDrivesDriveFirmwareParams{
		HTTPClient: client,
	}
}

/*GetDrivesDriveFirmwareParams contains all the parameters to send to the API endpoint
for the get drives drive firmware operation typically these are written to a http.Request
*/
type GetDrivesDriveFirmwareParams struct {

	/*Driveid*/
	Driveid string
	/*Lnn*/
	Lnn int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) WithTimeout(timeout time.Duration) *GetDrivesDriveFirmwareParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) WithContext(ctx context.Context) *GetDrivesDriveFirmwareParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) WithHTTPClient(client *http.Client) *GetDrivesDriveFirmwareParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDriveid adds the driveid to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) WithDriveid(driveid string) *GetDrivesDriveFirmwareParams {
	o.SetDriveid(driveid)
	return o
}

// SetDriveid adds the driveid to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) SetDriveid(driveid string) {
	o.Driveid = driveid
}

// WithLnn adds the lnn to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) WithLnn(lnn int64) *GetDrivesDriveFirmwareParams {
	o.SetLnn(lnn)
	return o
}

// SetLnn adds the lnn to the get drives drive firmware params
func (o *GetDrivesDriveFirmwareParams) SetLnn(lnn int64) {
	o.Lnn = lnn
}

// WriteToRequest writes these params to a swagger request
func (o *GetDrivesDriveFirmwareParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Driveid
	if err := r.SetPathParam("Driveid", o.Driveid); err != nil {
		return err
	}

	// path param Lnn
	if err := r.SetPathParam("Lnn", swag.FormatInt64(o.Lnn)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
