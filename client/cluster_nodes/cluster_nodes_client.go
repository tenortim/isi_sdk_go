// Code generated by go-swagger; DO NOT EDIT.

package cluster_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new cluster nodes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for cluster nodes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDrivesDriveAddItem Add a drive to a node.
*/
func (a *Client) CreateDrivesDriveAddItem(params *CreateDrivesDriveAddItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveAddItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveAddItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveAddItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/add",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveAddItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveAddItemOK), nil

}

/*
CreateDrivesDriveFirmwareUpdateItem Start a drive firmware update.
*/
func (a *Client) CreateDrivesDriveFirmwareUpdateItem(params *CreateDrivesDriveFirmwareUpdateItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveFirmwareUpdateItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveFirmwareUpdateItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveFirmwareUpdateItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveFirmwareUpdateItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveFirmwareUpdateItemOK), nil

}

/*
CreateDrivesDriveFormatItem Format a drive for use by OneFS.
*/
func (a *Client) CreateDrivesDriveFormatItem(params *CreateDrivesDriveFormatItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveFormatItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveFormatItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveFormatItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/format",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveFormatItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveFormatItemOK), nil

}

/*
CreateDrivesDrivePurposeItem Assign a drive to a specific use case.
*/
func (a *Client) CreateDrivesDrivePurposeItem(params *CreateDrivesDrivePurposeItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDrivePurposeItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDrivePurposeItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDrivePurposeItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/purpose",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDrivePurposeItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDrivePurposeItemOK), nil

}

/*
CreateDrivesDriveSmartfailItem Remove a drive from use by OneFS.
*/
func (a *Client) CreateDrivesDriveSmartfailItem(params *CreateDrivesDriveSmartfailItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveSmartfailItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveSmartfailItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveSmartfailItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/smartfail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveSmartfailItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveSmartfailItemOK), nil

}

/*
CreateDrivesDriveStopfailItem Stop restriping from a smartfailing drive.
*/
func (a *Client) CreateDrivesDriveStopfailItem(params *CreateDrivesDriveStopfailItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveStopfailItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveStopfailItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveStopfailItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/stopfail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveStopfailItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveStopfailItemOK), nil

}

/*
CreateDrivesDriveSuspendItem Temporarily remove a drive from use by OneFS.
*/
func (a *Client) CreateDrivesDriveSuspendItem(params *CreateDrivesDriveSuspendItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateDrivesDriveSuspendItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDrivesDriveSuspendItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDrivesDriveSuspendItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/suspend",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateDrivesDriveSuspendItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDrivesDriveSuspendItemOK), nil

}

/*
CreateNodeRebootItem Reboot the node specified by <LNN>.
*/
func (a *Client) CreateNodeRebootItem(params *CreateNodeRebootItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNodeRebootItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeRebootItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNodeRebootItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/reboot",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNodeRebootItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNodeRebootItemOK), nil

}

/*
CreateNodeShutdownItem Shutdown the node specified by <LNN>.
*/
func (a *Client) CreateNodeShutdownItem(params *CreateNodeShutdownItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateNodeShutdownItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateNodeShutdownItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createNodeShutdownItem",
		Method:             "POST",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/shutdown",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateNodeShutdownItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateNodeShutdownItemOK), nil

}

/*
GetDrivesDriveFirmware Retrieve drive firmware information.
*/
func (a *Client) GetDrivesDriveFirmware(params *GetDrivesDriveFirmwareParams, authInfo runtime.ClientAuthInfoWriter) (*GetDrivesDriveFirmwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDrivesDriveFirmwareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDrivesDriveFirmware",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDrivesDriveFirmwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDrivesDriveFirmwareOK), nil

}

/*
GetNodeDrive Retrieve drive information.
*/
func (a *Client) GetNodeDrive(params *GetNodeDriveParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeDriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeDriveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeDrive",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{NodeDriveId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeDriveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeDriveOK), nil

}

/*
GetNodeDrives List the drives on this node.
*/
func (a *Client) GetNodeDrives(params *GetNodeDrivesParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeDrivesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeDrivesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeDrives",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeDrivesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeDrivesOK), nil

}

/*
GetNodeDrivesPurposelist Lists the available purposes for drives in this node.
*/
func (a *Client) GetNodeDrivesPurposelist(params *GetNodeDrivesPurposelistParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeDrivesPurposelistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeDrivesPurposelistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeDrivesPurposelist",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives-purposelist",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeDrivesPurposelistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeDrivesPurposelistOK), nil

}

/*
GetNodeHardware Retrieve node hardware identity information.
*/
func (a *Client) GetNodeHardware(params *GetNodeHardwareParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeHardwareOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeHardwareParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeHardware",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/hardware",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeHardwareReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeHardwareOK), nil

}

/*
GetNodeHardwareFast Quickly retrieve a subset of node hardware identity information.
*/
func (a *Client) GetNodeHardwareFast(params *GetNodeHardwareFastParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeHardwareFastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeHardwareFastParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeHardwareFast",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/hardware-fast",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeHardwareFastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeHardwareFastOK), nil

}

/*
GetNodePartitions Retrieve node partition information.
*/
func (a *Client) GetNodePartitions(params *GetNodePartitionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodePartitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodePartitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodePartitions",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/partitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodePartitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodePartitionsOK), nil

}

/*
GetNodeSensors Retrieve node sensor information.
*/
func (a *Client) GetNodeSensors(params *GetNodeSensorsParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeSensorsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeSensorsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeSensors",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/sensors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeSensorsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeSensorsOK), nil

}

/*
GetNodeState Retrieve node state information.
*/
func (a *Client) GetNodeState(params *GetNodeStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeState",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStateOK), nil

}

/*
GetNodeStateReadonly Retrieve node readonly state information.
*/
func (a *Client) GetNodeStateReadonly(params *GetNodeStateReadonlyParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStateReadonlyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStateReadonlyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStateReadonly",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/readonly",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStateReadonlyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStateReadonlyOK), nil

}

/*
GetNodeStateServicelight Retrieve node service light state information.
*/
func (a *Client) GetNodeStateServicelight(params *GetNodeStateServicelightParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStateServicelightOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStateServicelightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStateServicelight",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/servicelight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStateServicelightReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStateServicelightOK), nil

}

/*
GetNodeStateSmartfail Retrieve node smartfail state information.
*/
func (a *Client) GetNodeStateSmartfail(params *GetNodeStateSmartfailParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStateSmartfailOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStateSmartfailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStateSmartfail",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/smartfail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStateSmartfailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStateSmartfailOK), nil

}

/*
GetNodeStatus Retrieve node status information.
*/
func (a *Client) GetNodeStatus(params *GetNodeStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStatus",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStatusOK), nil

}

/*
GetNodeStatusBatterystatus Retrieve node battery status information.
*/
func (a *Client) GetNodeStatusBatterystatus(params *GetNodeStatusBatterystatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetNodeStatusBatterystatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNodeStatusBatterystatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNodeStatusBatterystatus",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/status/batterystatus",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNodeStatusBatterystatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNodeStatusBatterystatusOK), nil

}

/*
ListDrivesDriveFirmwareUpdate Retrieve firmware update information.
*/
func (a *Client) ListDrivesDriveFirmwareUpdate(params *ListDrivesDriveFirmwareUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*ListDrivesDriveFirmwareUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDrivesDriveFirmwareUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDrivesDriveFirmwareUpdate",
		Method:             "GET",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/drives/{Driveid}/firmware/update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListDrivesDriveFirmwareUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDrivesDriveFirmwareUpdateOK), nil

}

/*
UpdateNodeStateReadonly Modify one or more node readonly state settings.
*/
func (a *Client) UpdateNodeStateReadonly(params *UpdateNodeStateReadonlyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeStateReadonlyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeStateReadonlyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNodeStateReadonly",
		Method:             "PUT",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/readonly",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNodeStateReadonlyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNodeStateReadonlyNoContent), nil

}

/*
UpdateNodeStateServicelight Modify one or more node service light state settings.
*/
func (a *Client) UpdateNodeStateServicelight(params *UpdateNodeStateServicelightParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeStateServicelightNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeStateServicelightParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNodeStateServicelight",
		Method:             "PUT",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/servicelight",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNodeStateServicelightReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNodeStateServicelightNoContent), nil

}

/*
UpdateNodeStateSmartfail Modify smartfail state of the node.  Only the 'smartfailed' body member has any effect on node smartfail state.
*/
func (a *Client) UpdateNodeStateSmartfail(params *UpdateNodeStateSmartfailParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateNodeStateSmartfailNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNodeStateSmartfailParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNodeStateSmartfail",
		Method:             "PUT",
		PathPattern:        "/platform/3/cluster/nodes/{Lnn}/state/smartfail",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNodeStateSmartfailReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateNodeStateSmartfailNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
