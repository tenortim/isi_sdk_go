// Code generated by go-swagger; DO NOT EDIT.

package cluster_nodes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreateNodeRebootItemParams creates a new CreateNodeRebootItemParams object
// with the default values initialized.
func NewCreateNodeRebootItemParams() *CreateNodeRebootItemParams {
	var ()
	return &CreateNodeRebootItemParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreateNodeRebootItemParamsWithTimeout creates a new CreateNodeRebootItemParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreateNodeRebootItemParamsWithTimeout(timeout time.Duration) *CreateNodeRebootItemParams {
	var ()
	return &CreateNodeRebootItemParams{

		timeout: timeout,
	}
}

// NewCreateNodeRebootItemParamsWithContext creates a new CreateNodeRebootItemParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreateNodeRebootItemParamsWithContext(ctx context.Context) *CreateNodeRebootItemParams {
	var ()
	return &CreateNodeRebootItemParams{

		Context: ctx,
	}
}

// NewCreateNodeRebootItemParamsWithHTTPClient creates a new CreateNodeRebootItemParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreateNodeRebootItemParamsWithHTTPClient(client *http.Client) *CreateNodeRebootItemParams {
	var ()
	return &CreateNodeRebootItemParams{
		HTTPClient: client,
	}
}

/*CreateNodeRebootItemParams contains all the parameters to send to the API endpoint
for the create node reboot item operation typically these are written to a http.Request
*/
type CreateNodeRebootItemParams struct {

	/*Lnn*/
	Lnn int64
	/*NodeRebootItem*/
	NodeRebootItem models.Empty

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create node reboot item params
func (o *CreateNodeRebootItemParams) WithTimeout(timeout time.Duration) *CreateNodeRebootItemParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create node reboot item params
func (o *CreateNodeRebootItemParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create node reboot item params
func (o *CreateNodeRebootItemParams) WithContext(ctx context.Context) *CreateNodeRebootItemParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create node reboot item params
func (o *CreateNodeRebootItemParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create node reboot item params
func (o *CreateNodeRebootItemParams) WithHTTPClient(client *http.Client) *CreateNodeRebootItemParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create node reboot item params
func (o *CreateNodeRebootItemParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLnn adds the lnn to the create node reboot item params
func (o *CreateNodeRebootItemParams) WithLnn(lnn int64) *CreateNodeRebootItemParams {
	o.SetLnn(lnn)
	return o
}

// SetLnn adds the lnn to the create node reboot item params
func (o *CreateNodeRebootItemParams) SetLnn(lnn int64) {
	o.Lnn = lnn
}

// WithNodeRebootItem adds the nodeRebootItem to the create node reboot item params
func (o *CreateNodeRebootItemParams) WithNodeRebootItem(nodeRebootItem models.Empty) *CreateNodeRebootItemParams {
	o.SetNodeRebootItem(nodeRebootItem)
	return o
}

// SetNodeRebootItem adds the nodeRebootItem to the create node reboot item params
func (o *CreateNodeRebootItemParams) SetNodeRebootItem(nodeRebootItem models.Empty) {
	o.NodeRebootItem = nodeRebootItem
}

// WriteToRequest writes these params to a swagger request
func (o *CreateNodeRebootItemParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Lnn
	if err := r.SetPathParam("Lnn", swag.FormatInt64(o.Lnn)); err != nil {
		return err
	}

	if o.NodeRebootItem != nil {
		if err := r.SetBodyParam(o.NodeRebootItem); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
