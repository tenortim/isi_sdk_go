// Code generated by go-swagger; DO NOT EDIT.

package antivirus

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new antivirus API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for antivirus API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateAntivirusPolicy Create new antivirus scan policies.
*/
func (a *Client) CreateAntivirusPolicy(params *CreateAntivirusPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAntivirusPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAntivirusPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAntivirusPolicy",
		Method:             "POST",
		PathPattern:        "/platform/3/antivirus/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAntivirusPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAntivirusPolicyOK), nil

}

/*
CreateAntivirusScanItem Manually scan a file.
*/
func (a *Client) CreateAntivirusScanItem(params *CreateAntivirusScanItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAntivirusScanItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAntivirusScanItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAntivirusScanItem",
		Method:             "POST",
		PathPattern:        "/platform/3/antivirus/scan",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAntivirusScanItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAntivirusScanItemOK), nil

}

/*
CreateAntivirusServer Create new antivirus servers.
*/
func (a *Client) CreateAntivirusServer(params *CreateAntivirusServerParams, authInfo runtime.ClientAuthInfoWriter) (*CreateAntivirusServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateAntivirusServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createAntivirusServer",
		Method:             "POST",
		PathPattern:        "/platform/3/antivirus/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateAntivirusServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateAntivirusServerOK), nil

}

/*
DeleteAntivirusPolicies Delete all antivirus scan policies.
*/
func (a *Client) DeleteAntivirusPolicies(params *DeleteAntivirusPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAntivirusPoliciesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAntivirusPolicies",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAntivirusPoliciesNoContent), nil

}

/*
DeleteAntivirusPolicy Delete an antivirus scan policy.
*/
func (a *Client) DeleteAntivirusPolicy(params *DeleteAntivirusPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAntivirusPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAntivirusPolicy",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/policies/{AntivirusPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAntivirusPolicyNoContent), nil

}

/*
DeleteAntivirusServer Delete an antivirus server entry.
*/
func (a *Client) DeleteAntivirusServer(params *DeleteAntivirusServerParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAntivirusServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAntivirusServer",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/servers/{AntivirusServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAntivirusServerNoContent), nil

}

/*
DeleteAntivirusServers Delete all antivirus servers.
*/
func (a *Client) DeleteAntivirusServers(params *DeleteAntivirusServersParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteAntivirusServersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAntivirusServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteAntivirusServers",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAntivirusServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAntivirusServersNoContent), nil

}

/*
DeleteReportsScan Delete one antivirus scan report, and all of its associated threat reports.
*/
func (a *Client) DeleteReportsScan(params *DeleteReportsScanParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportsScanNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportsScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportsScan",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/reports/scans/{ReportsScanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportsScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteReportsScanNoContent), nil

}

/*
DeleteReportsScans Delete antivirus scan reports, and any threat reports associated with those scans.
*/
func (a *Client) DeleteReportsScans(params *DeleteReportsScansParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteReportsScansNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteReportsScansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteReportsScans",
		Method:             "DELETE",
		PathPattern:        "/platform/3/antivirus/reports/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteReportsScansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteReportsScansNoContent), nil

}

/*
GetAntivirusPolicy Retrieve one antivirus scan policy.
*/
func (a *Client) GetAntivirusPolicy(params *GetAntivirusPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetAntivirusPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAntivirusPolicy",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/policies/{AntivirusPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAntivirusPolicyOK), nil

}

/*
GetAntivirusQuarantinePath Retrieve the quarantine status of the file at the specified path.
*/
func (a *Client) GetAntivirusQuarantinePath(params *GetAntivirusQuarantinePathParams, authInfo runtime.ClientAuthInfoWriter) (*GetAntivirusQuarantinePathOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusQuarantinePathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAntivirusQuarantinePath",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusQuarantinePathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAntivirusQuarantinePathOK), nil

}

/*
GetAntivirusServer Retrieve one antivirus server entry.
*/
func (a *Client) GetAntivirusServer(params *GetAntivirusServerParams, authInfo runtime.ClientAuthInfoWriter) (*GetAntivirusServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAntivirusServer",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/servers/{AntivirusServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAntivirusServerOK), nil

}

/*
GetAntivirusSettings Retrieve the Antivirus settings.
*/
func (a *Client) GetAntivirusSettings(params *GetAntivirusSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetAntivirusSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAntivirusSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAntivirusSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAntivirusSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAntivirusSettingsOK), nil

}

/*
GetReportsScan Retrieve one antivirus scan report.
*/
func (a *Client) GetReportsScan(params *GetReportsScanParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportsScanOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsScanParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsScan",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/reports/scans/{ReportsScanId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportsScanReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsScanOK), nil

}

/*
GetReportsScans List antivirus scan reports.
*/
func (a *Client) GetReportsScans(params *GetReportsScansParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportsScansOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsScansParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsScans",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/reports/scans",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportsScansReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsScansOK), nil

}

/*
GetReportsThreat Retrieve one antivirus threat report.
*/
func (a *Client) GetReportsThreat(params *GetReportsThreatParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportsThreatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsThreatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsThreat",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/reports/threats/{ReportsThreatId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportsThreatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsThreatOK), nil

}

/*
GetReportsThreats List antivirus threat reports.
*/
func (a *Client) GetReportsThreats(params *GetReportsThreatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetReportsThreatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetReportsThreatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getReportsThreats",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/reports/threats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetReportsThreatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetReportsThreatsOK), nil

}

/*
ListAntivirusPolicies List antivirus scan policies.
*/
func (a *Client) ListAntivirusPolicies(params *ListAntivirusPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*ListAntivirusPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAntivirusPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAntivirusPolicies",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAntivirusPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAntivirusPoliciesOK), nil

}

/*
ListAntivirusServers List antivirus servers.
*/
func (a *Client) ListAntivirusServers(params *ListAntivirusServersParams, authInfo runtime.ClientAuthInfoWriter) (*ListAntivirusServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAntivirusServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listAntivirusServers",
		Method:             "GET",
		PathPattern:        "/platform/3/antivirus/servers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListAntivirusServersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListAntivirusServersOK), nil

}

/*
UpdateAntivirusPolicy Modify an antivirus scan policy.
*/
func (a *Client) UpdateAntivirusPolicy(params *UpdateAntivirusPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAntivirusPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAntivirusPolicy",
		Method:             "PUT",
		PathPattern:        "/platform/3/antivirus/policies/{AntivirusPolicyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAntivirusPolicyNoContent), nil

}

/*
UpdateAntivirusQuarantinePath Set the quarantine status of the file at the specified path.  Use either an empty object {} in the request body or {"quarantined":true} to quarantine the file, and {"quarantined":false} to unquarantine the file.
*/
func (a *Client) UpdateAntivirusQuarantinePath(params *UpdateAntivirusQuarantinePathParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAntivirusQuarantinePathNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusQuarantinePathParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAntivirusQuarantinePath",
		Method:             "PUT",
		PathPattern:        "/platform/3/antivirus/quarantine/{AntivirusQuarantinePath}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusQuarantinePathReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAntivirusQuarantinePathNoContent), nil

}

/*
UpdateAntivirusServer Modify an antivirus server entry.
*/
func (a *Client) UpdateAntivirusServer(params *UpdateAntivirusServerParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAntivirusServerNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAntivirusServer",
		Method:             "PUT",
		PathPattern:        "/platform/3/antivirus/servers/{AntivirusServerId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusServerReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAntivirusServerNoContent), nil

}

/*
UpdateAntivirusSettings Modify the Antivirus settings. All input fields are optional, but one or more must be supplied.
*/
func (a *Client) UpdateAntivirusSettings(params *UpdateAntivirusSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateAntivirusSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateAntivirusSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateAntivirusSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/antivirus/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateAntivirusSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateAntivirusSettingsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
