// Code generated by go-swagger; DO NOT EDIT.

package hardware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateHardwareFcportParams creates a new UpdateHardwareFcportParams object
// with the default values initialized.
func NewUpdateHardwareFcportParams() *UpdateHardwareFcportParams {
	var ()
	return &UpdateHardwareFcportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateHardwareFcportParamsWithTimeout creates a new UpdateHardwareFcportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateHardwareFcportParamsWithTimeout(timeout time.Duration) *UpdateHardwareFcportParams {
	var ()
	return &UpdateHardwareFcportParams{

		timeout: timeout,
	}
}

// NewUpdateHardwareFcportParamsWithContext creates a new UpdateHardwareFcportParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateHardwareFcportParamsWithContext(ctx context.Context) *UpdateHardwareFcportParams {
	var ()
	return &UpdateHardwareFcportParams{

		Context: ctx,
	}
}

// NewUpdateHardwareFcportParamsWithHTTPClient creates a new UpdateHardwareFcportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateHardwareFcportParamsWithHTTPClient(client *http.Client) *UpdateHardwareFcportParams {
	var ()
	return &UpdateHardwareFcportParams{
		HTTPClient: client,
	}
}

/*UpdateHardwareFcportParams contains all the parameters to send to the API endpoint
for the update hardware fcport operation typically these are written to a http.Request
*/
type UpdateHardwareFcportParams struct {

	/*HardwareFcport*/
	HardwareFcport *models.HardwareFcport
	/*HardwareFcportID
	  Change wwnn, wwpn, state, topology, or rate of a FC port

	*/
	HardwareFcportID int64
	/*Lnn
	  Logical node number.

	*/
	Lnn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithTimeout(timeout time.Duration) *UpdateHardwareFcportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithContext(ctx context.Context) *UpdateHardwareFcportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithHTTPClient(client *http.Client) *UpdateHardwareFcportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHardwareFcport adds the hardwareFcport to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithHardwareFcport(hardwareFcport *models.HardwareFcport) *UpdateHardwareFcportParams {
	o.SetHardwareFcport(hardwareFcport)
	return o
}

// SetHardwareFcport adds the hardwareFcport to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetHardwareFcport(hardwareFcport *models.HardwareFcport) {
	o.HardwareFcport = hardwareFcport
}

// WithHardwareFcportID adds the hardwareFcportID to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithHardwareFcportID(hardwareFcportID int64) *UpdateHardwareFcportParams {
	o.SetHardwareFcportID(hardwareFcportID)
	return o
}

// SetHardwareFcportID adds the hardwareFcportId to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetHardwareFcportID(hardwareFcportID int64) {
	o.HardwareFcportID = hardwareFcportID
}

// WithLnn adds the lnn to the update hardware fcport params
func (o *UpdateHardwareFcportParams) WithLnn(lnn *string) *UpdateHardwareFcportParams {
	o.SetLnn(lnn)
	return o
}

// SetLnn adds the lnn to the update hardware fcport params
func (o *UpdateHardwareFcportParams) SetLnn(lnn *string) {
	o.Lnn = lnn
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateHardwareFcportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.HardwareFcport != nil {
		if err := r.SetBodyParam(o.HardwareFcport); err != nil {
			return err
		}
	}

	// path param HardwareFcportId
	if err := r.SetPathParam("HardwareFcportId", swag.FormatInt64(o.HardwareFcportID)); err != nil {
		return err
	}

	if o.Lnn != nil {

		// query param lnn
		var qrLnn string
		if o.Lnn != nil {
			qrLnn = *o.Lnn
		}
		qLnn := qrLnn
		if qLnn != "" {
			if err := r.SetQueryParam("lnn", qLnn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
