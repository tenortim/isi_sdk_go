// Code generated by go-swagger; DO NOT EDIT.

package hardware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetHardwareFcportParams creates a new GetHardwareFcportParams object
// with the default values initialized.
func NewGetHardwareFcportParams() *GetHardwareFcportParams {
	var ()
	return &GetHardwareFcportParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetHardwareFcportParamsWithTimeout creates a new GetHardwareFcportParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetHardwareFcportParamsWithTimeout(timeout time.Duration) *GetHardwareFcportParams {
	var ()
	return &GetHardwareFcportParams{

		timeout: timeout,
	}
}

// NewGetHardwareFcportParamsWithContext creates a new GetHardwareFcportParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetHardwareFcportParamsWithContext(ctx context.Context) *GetHardwareFcportParams {
	var ()
	return &GetHardwareFcportParams{

		Context: ctx,
	}
}

// NewGetHardwareFcportParamsWithHTTPClient creates a new GetHardwareFcportParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetHardwareFcportParamsWithHTTPClient(client *http.Client) *GetHardwareFcportParams {
	var ()
	return &GetHardwareFcportParams{
		HTTPClient: client,
	}
}

/*GetHardwareFcportParams contains all the parameters to send to the API endpoint
for the get hardware fcport operation typically these are written to a http.Request
*/
type GetHardwareFcportParams struct {

	/*HardwareFcportID
	  Get one fibre-channel port

	*/
	HardwareFcportID int64
	/*Lnn
	  Logical node number.

	*/
	Lnn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get hardware fcport params
func (o *GetHardwareFcportParams) WithTimeout(timeout time.Duration) *GetHardwareFcportParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get hardware fcport params
func (o *GetHardwareFcportParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get hardware fcport params
func (o *GetHardwareFcportParams) WithContext(ctx context.Context) *GetHardwareFcportParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get hardware fcport params
func (o *GetHardwareFcportParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get hardware fcport params
func (o *GetHardwareFcportParams) WithHTTPClient(client *http.Client) *GetHardwareFcportParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get hardware fcport params
func (o *GetHardwareFcportParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHardwareFcportID adds the hardwareFcportID to the get hardware fcport params
func (o *GetHardwareFcportParams) WithHardwareFcportID(hardwareFcportID int64) *GetHardwareFcportParams {
	o.SetHardwareFcportID(hardwareFcportID)
	return o
}

// SetHardwareFcportID adds the hardwareFcportId to the get hardware fcport params
func (o *GetHardwareFcportParams) SetHardwareFcportID(hardwareFcportID int64) {
	o.HardwareFcportID = hardwareFcportID
}

// WithLnn adds the lnn to the get hardware fcport params
func (o *GetHardwareFcportParams) WithLnn(lnn *string) *GetHardwareFcportParams {
	o.SetLnn(lnn)
	return o
}

// SetLnn adds the lnn to the get hardware fcport params
func (o *GetHardwareFcportParams) SetLnn(lnn *string) {
	o.Lnn = lnn
}

// WriteToRequest writes these params to a swagger request
func (o *GetHardwareFcportParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param HardwareFcportId
	if err := r.SetPathParam("HardwareFcportId", swag.FormatInt64(o.HardwareFcportID)); err != nil {
		return err
	}

	if o.Lnn != nil {

		// query param lnn
		var qrLnn string
		if o.Lnn != nil {
			qrLnn = *o.Lnn
		}
		qLnn := qrLnn
		if qLnn != "" {
			if err := r.SetQueryParam("lnn", qLnn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
