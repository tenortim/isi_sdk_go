// Code generated by go-swagger; DO NOT EDIT.

package hardware

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteHardwareTapeNameParams creates a new DeleteHardwareTapeNameParams object
// with the default values initialized.
func NewDeleteHardwareTapeNameParams() *DeleteHardwareTapeNameParams {
	var ()
	return &DeleteHardwareTapeNameParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteHardwareTapeNameParamsWithTimeout creates a new DeleteHardwareTapeNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteHardwareTapeNameParamsWithTimeout(timeout time.Duration) *DeleteHardwareTapeNameParams {
	var ()
	return &DeleteHardwareTapeNameParams{

		timeout: timeout,
	}
}

// NewDeleteHardwareTapeNameParamsWithContext creates a new DeleteHardwareTapeNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteHardwareTapeNameParamsWithContext(ctx context.Context) *DeleteHardwareTapeNameParams {
	var ()
	return &DeleteHardwareTapeNameParams{

		Context: ctx,
	}
}

// NewDeleteHardwareTapeNameParamsWithHTTPClient creates a new DeleteHardwareTapeNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteHardwareTapeNameParamsWithHTTPClient(client *http.Client) *DeleteHardwareTapeNameParams {
	var ()
	return &DeleteHardwareTapeNameParams{
		HTTPClient: client,
	}
}

/*DeleteHardwareTapeNameParams contains all the parameters to send to the API endpoint
for the delete hardware tape name operation typically these are written to a http.Request
*/
type DeleteHardwareTapeNameParams struct {

	/*HardwareTapeName
	  Tape/Changer devices remove

	*/
	HardwareTapeName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) WithTimeout(timeout time.Duration) *DeleteHardwareTapeNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) WithContext(ctx context.Context) *DeleteHardwareTapeNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) WithHTTPClient(client *http.Client) *DeleteHardwareTapeNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithHardwareTapeName adds the hardwareTapeName to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) WithHardwareTapeName(hardwareTapeName string) *DeleteHardwareTapeNameParams {
	o.SetHardwareTapeName(hardwareTapeName)
	return o
}

// SetHardwareTapeName adds the hardwareTapeName to the delete hardware tape name params
func (o *DeleteHardwareTapeNameParams) SetHardwareTapeName(hardwareTapeName string) {
	o.HardwareTapeName = hardwareTapeName
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteHardwareTapeNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param HardwareTapeName
	if err := r.SetPathParam("HardwareTapeName", o.HardwareTapeName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
