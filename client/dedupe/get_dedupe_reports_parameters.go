// Code generated by go-swagger; DO NOT EDIT.

package dedupe

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDedupeReportsParams creates a new GetDedupeReportsParams object
// with the default values initialized.
func NewGetDedupeReportsParams() *GetDedupeReportsParams {
	var ()
	return &GetDedupeReportsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDedupeReportsParamsWithTimeout creates a new GetDedupeReportsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDedupeReportsParamsWithTimeout(timeout time.Duration) *GetDedupeReportsParams {
	var ()
	return &GetDedupeReportsParams{

		timeout: timeout,
	}
}

// NewGetDedupeReportsParamsWithContext creates a new GetDedupeReportsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDedupeReportsParamsWithContext(ctx context.Context) *GetDedupeReportsParams {
	var ()
	return &GetDedupeReportsParams{

		Context: ctx,
	}
}

// NewGetDedupeReportsParamsWithHTTPClient creates a new GetDedupeReportsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDedupeReportsParamsWithHTTPClient(client *http.Client) *GetDedupeReportsParams {
	var ()
	return &GetDedupeReportsParams{
		HTTPClient: client,
	}
}

/*GetDedupeReportsParams contains all the parameters to send to the API endpoint
for the get dedupe reports operation typically these are written to a http.Request
*/
type GetDedupeReportsParams struct {

	/*Begin
	  Restrict the query to reports at or after the given time, in seconds since the Epoch.

	*/
	Begin *int64
	/*Dir
	  The direction of the sort.

	*/
	Dir *string
	/*End
	  Restrict the query to reports at or before the given time, in seconds since the Epoch.

	*/
	End *int64
	/*JobID
	  Restrict the query to the given job ID.

	*/
	JobID *int64
	/*JobType
	  Restrict the query to the given job type.

	*/
	JobType *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*Sort
	  The field that will be used for sorting.

	*/
	Sort *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get dedupe reports params
func (o *GetDedupeReportsParams) WithTimeout(timeout time.Duration) *GetDedupeReportsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get dedupe reports params
func (o *GetDedupeReportsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get dedupe reports params
func (o *GetDedupeReportsParams) WithContext(ctx context.Context) *GetDedupeReportsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get dedupe reports params
func (o *GetDedupeReportsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get dedupe reports params
func (o *GetDedupeReportsParams) WithHTTPClient(client *http.Client) *GetDedupeReportsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get dedupe reports params
func (o *GetDedupeReportsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get dedupe reports params
func (o *GetDedupeReportsParams) WithBegin(begin *int64) *GetDedupeReportsParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get dedupe reports params
func (o *GetDedupeReportsParams) SetBegin(begin *int64) {
	o.Begin = begin
}

// WithDir adds the dir to the get dedupe reports params
func (o *GetDedupeReportsParams) WithDir(dir *string) *GetDedupeReportsParams {
	o.SetDir(dir)
	return o
}

// SetDir adds the dir to the get dedupe reports params
func (o *GetDedupeReportsParams) SetDir(dir *string) {
	o.Dir = dir
}

// WithEnd adds the end to the get dedupe reports params
func (o *GetDedupeReportsParams) WithEnd(end *int64) *GetDedupeReportsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get dedupe reports params
func (o *GetDedupeReportsParams) SetEnd(end *int64) {
	o.End = end
}

// WithJobID adds the jobID to the get dedupe reports params
func (o *GetDedupeReportsParams) WithJobID(jobID *int64) *GetDedupeReportsParams {
	o.SetJobID(jobID)
	return o
}

// SetJobID adds the jobId to the get dedupe reports params
func (o *GetDedupeReportsParams) SetJobID(jobID *int64) {
	o.JobID = jobID
}

// WithJobType adds the jobType to the get dedupe reports params
func (o *GetDedupeReportsParams) WithJobType(jobType *string) *GetDedupeReportsParams {
	o.SetJobType(jobType)
	return o
}

// SetJobType adds the jobType to the get dedupe reports params
func (o *GetDedupeReportsParams) SetJobType(jobType *string) {
	o.JobType = jobType
}

// WithLimit adds the limit to the get dedupe reports params
func (o *GetDedupeReportsParams) WithLimit(limit *int64) *GetDedupeReportsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get dedupe reports params
func (o *GetDedupeReportsParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithResume adds the resume to the get dedupe reports params
func (o *GetDedupeReportsParams) WithResume(resume *string) *GetDedupeReportsParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the get dedupe reports params
func (o *GetDedupeReportsParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithSort adds the sort to the get dedupe reports params
func (o *GetDedupeReportsParams) WithSort(sort *string) *GetDedupeReportsParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get dedupe reports params
func (o *GetDedupeReportsParams) SetSort(sort *string) {
	o.Sort = sort
}

// WriteToRequest writes these params to a swagger request
func (o *GetDedupeReportsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin int64
		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatInt64(qrBegin)
		if qBegin != "" {
			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}

	}

	if o.Dir != nil {

		// query param dir
		var qrDir string
		if o.Dir != nil {
			qrDir = *o.Dir
		}
		qDir := qrDir
		if qDir != "" {
			if err := r.SetQueryParam("dir", qDir); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param end
		var qrEnd int64
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatInt64(qrEnd)
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	if o.JobID != nil {

		// query param job_id
		var qrJobID int64
		if o.JobID != nil {
			qrJobID = *o.JobID
		}
		qJobID := swag.FormatInt64(qrJobID)
		if qJobID != "" {
			if err := r.SetQueryParam("job_id", qJobID); err != nil {
				return err
			}
		}

	}

	if o.JobType != nil {

		// query param job_type
		var qrJobType string
		if o.JobType != nil {
			qrJobType = *o.JobType
		}
		qJobType := qrJobType
		if qJobType != "" {
			if err := r.SetQueryParam("job_type", qJobType); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
