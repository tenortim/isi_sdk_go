// Code generated by go-swagger; DO NOT EDIT.

package protocols_hdfs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new protocols hdfs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for protocols hdfs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProxyusersNameMember Add a member to the HDFS proxyuser.
*/
func (a *Client) CreateProxyusersNameMember(params *CreateProxyusersNameMemberParams, authInfo runtime.ClientAuthInfoWriter) (*CreateProxyusersNameMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyusersNameMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxyusersNameMember",
		Method:             "POST",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{Name}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateProxyusersNameMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProxyusersNameMemberOK), nil

}

/*
DeleteProxyusersNameMember Remove a member from the HDFS proxyuser.
*/
func (a *Client) DeleteProxyusersNameMember(params *DeleteProxyusersNameMemberParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteProxyusersNameMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyusersNameMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxyusersNameMember",
		Method:             "DELETE",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{Name}/members/{ProxyusersNameMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteProxyusersNameMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProxyusersNameMemberNoContent), nil

}

/*
ListProxyusersNameMembers List all the members of the HDFS proxyuser.
*/
func (a *Client) ListProxyusersNameMembers(params *ListProxyusersNameMembersParams, authInfo runtime.ClientAuthInfoWriter) (*ListProxyusersNameMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProxyusersNameMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProxyusersNameMembers",
		Method:             "GET",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{Name}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListProxyusersNameMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProxyusersNameMembersOK), nil

}

/*
UpdateProxyusersNameMember Create a new HDFS proxyuser.
*/
func (a *Client) UpdateProxyusersNameMember(params *UpdateProxyusersNameMemberParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateProxyusersNameMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateProxyusersNameMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateProxyusersNameMember",
		Method:             "PUT",
		PathPattern:        "/platform/1/protocols/hdfs/proxyusers/{Name}/members/{ProxyusersNameMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateProxyusersNameMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateProxyusersNameMemberNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
