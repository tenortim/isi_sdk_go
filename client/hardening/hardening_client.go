// Code generated by go-swagger; DO NOT EDIT.

package hardening

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new hardening API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for hardening API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateHardeningApplyItem Apply hardening on the cluster.
*/
func (a *Client) CreateHardeningApplyItem(params *CreateHardeningApplyItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHardeningApplyItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHardeningApplyItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHardeningApplyItem",
		Method:             "POST",
		PathPattern:        "/platform/3/hardening/apply",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHardeningApplyItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHardeningApplyItemOK), nil

}

/*
CreateHardeningResolveItem Resolve issues related to hardening, found in current cluster configuration.
*/
func (a *Client) CreateHardeningResolveItem(params *CreateHardeningResolveItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHardeningResolveItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHardeningResolveItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHardeningResolveItem",
		Method:             "POST",
		PathPattern:        "/platform/3/hardening/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHardeningResolveItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHardeningResolveItemOK), nil

}

/*
CreateHardeningRevertItem Revert hardening on the cluster.
*/
func (a *Client) CreateHardeningRevertItem(params *CreateHardeningRevertItemParams, authInfo runtime.ClientAuthInfoWriter) (*CreateHardeningRevertItemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateHardeningRevertItemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createHardeningRevertItem",
		Method:             "POST",
		PathPattern:        "/platform/3/hardening/revert",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateHardeningRevertItemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateHardeningRevertItemOK), nil

}

/*
GetHardeningState Get the state of the current hardening operation, if one is happening.  Note that this is different from the /status resource, which returns the overall hardening status of the cluster.
*/
func (a *Client) GetHardeningState(params *GetHardeningStateParams, authInfo runtime.ClientAuthInfoWriter) (*GetHardeningStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHardeningStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHardeningState",
		Method:             "GET",
		PathPattern:        "/platform/3/hardening/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHardeningStateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHardeningStateOK), nil

}

/*
GetHardeningStatus Get a message indicating whether or not the cluster is hardened. Note that this is different from the /state resource, which returns the state of a specific hardening operation (apply or revert).
*/
func (a *Client) GetHardeningStatus(params *GetHardeningStatusParams, authInfo runtime.ClientAuthInfoWriter) (*GetHardeningStatusOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetHardeningStatusParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getHardeningStatus",
		Method:             "GET",
		PathPattern:        "/platform/3/hardening/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetHardeningStatusReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetHardeningStatusOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
