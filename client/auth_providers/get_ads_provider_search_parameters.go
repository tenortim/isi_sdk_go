// Code generated by go-swagger; DO NOT EDIT.

package auth_providers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAdsProviderSearchParams creates a new GetAdsProviderSearchParams object
// with the default values initialized.
func NewGetAdsProviderSearchParams() *GetAdsProviderSearchParams {
	var ()
	return &GetAdsProviderSearchParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAdsProviderSearchParamsWithTimeout creates a new GetAdsProviderSearchParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAdsProviderSearchParamsWithTimeout(timeout time.Duration) *GetAdsProviderSearchParams {
	var ()
	return &GetAdsProviderSearchParams{

		timeout: timeout,
	}
}

// NewGetAdsProviderSearchParamsWithContext creates a new GetAdsProviderSearchParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAdsProviderSearchParamsWithContext(ctx context.Context) *GetAdsProviderSearchParams {
	var ()
	return &GetAdsProviderSearchParams{

		Context: ctx,
	}
}

// NewGetAdsProviderSearchParamsWithHTTPClient creates a new GetAdsProviderSearchParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAdsProviderSearchParamsWithHTTPClient(client *http.Client) *GetAdsProviderSearchParams {
	var ()
	return &GetAdsProviderSearchParams{
		HTTPClient: client,
	}
}

/*GetAdsProviderSearchParams contains all the parameters to send to the API endpoint
for the get ads provider search operation typically these are written to a http.Request
*/
type GetAdsProviderSearchParams struct {

	/*ID*/
	ID string
	/*Description
	  The user or group description to search for.

	*/
	Description *string
	/*Domain
	  The domain to search in.

	*/
	Domain *string
	/*Filter
	  The LDAP filter to apply to the search.

	*/
	Filter *string
	/*Limit
	  Return no more than this many results at once (see resume).

	*/
	Limit *int64
	/*Password
	  The password for the domain if untrusted.

	*/
	Password *string
	/*Resume
	  Continue returning results from previous call using this token (token should come from the previous call, resume cannot be used with other options).

	*/
	Resume *string
	/*SearchGroups
	  If true, search for groups.

	*/
	SearchGroups *bool
	/*SearchUsers
	  If true, search for users.

	*/
	SearchUsers *bool
	/*User
	  The user name for the domain if untrusted.

	*/
	User *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithTimeout(timeout time.Duration) *GetAdsProviderSearchParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithContext(ctx context.Context) *GetAdsProviderSearchParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithHTTPClient(client *http.Client) *GetAdsProviderSearchParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithID adds the id to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithID(id string) *GetAdsProviderSearchParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetID(id string) {
	o.ID = id
}

// WithDescription adds the description to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithDescription(description *string) *GetAdsProviderSearchParams {
	o.SetDescription(description)
	return o
}

// SetDescription adds the description to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetDescription(description *string) {
	o.Description = description
}

// WithDomain adds the domain to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithDomain(domain *string) *GetAdsProviderSearchParams {
	o.SetDomain(domain)
	return o
}

// SetDomain adds the domain to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetDomain(domain *string) {
	o.Domain = domain
}

// WithFilter adds the filter to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithFilter(filter *string) *GetAdsProviderSearchParams {
	o.SetFilter(filter)
	return o
}

// SetFilter adds the filter to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetFilter(filter *string) {
	o.Filter = filter
}

// WithLimit adds the limit to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithLimit(limit *int64) *GetAdsProviderSearchParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithPassword adds the password to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithPassword(password *string) *GetAdsProviderSearchParams {
	o.SetPassword(password)
	return o
}

// SetPassword adds the password to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetPassword(password *string) {
	o.Password = password
}

// WithResume adds the resume to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithResume(resume *string) *GetAdsProviderSearchParams {
	o.SetResume(resume)
	return o
}

// SetResume adds the resume to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetResume(resume *string) {
	o.Resume = resume
}

// WithSearchGroups adds the searchGroups to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithSearchGroups(searchGroups *bool) *GetAdsProviderSearchParams {
	o.SetSearchGroups(searchGroups)
	return o
}

// SetSearchGroups adds the searchGroups to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetSearchGroups(searchGroups *bool) {
	o.SearchGroups = searchGroups
}

// WithSearchUsers adds the searchUsers to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithSearchUsers(searchUsers *bool) *GetAdsProviderSearchParams {
	o.SetSearchUsers(searchUsers)
	return o
}

// SetSearchUsers adds the searchUsers to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetSearchUsers(searchUsers *bool) {
	o.SearchUsers = searchUsers
}

// WithUser adds the user to the get ads provider search params
func (o *GetAdsProviderSearchParams) WithUser(user *string) *GetAdsProviderSearchParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get ads provider search params
func (o *GetAdsProviderSearchParams) SetUser(user *string) {
	o.User = user
}

// WriteToRequest writes these params to a swagger request
func (o *GetAdsProviderSearchParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Id
	if err := r.SetPathParam("Id", o.ID); err != nil {
		return err
	}

	if o.Description != nil {

		// query param description
		var qrDescription string
		if o.Description != nil {
			qrDescription = *o.Description
		}
		qDescription := qrDescription
		if qDescription != "" {
			if err := r.SetQueryParam("description", qDescription); err != nil {
				return err
			}
		}

	}

	if o.Domain != nil {

		// query param domain
		var qrDomain string
		if o.Domain != nil {
			qrDomain = *o.Domain
		}
		qDomain := qrDomain
		if qDomain != "" {
			if err := r.SetQueryParam("domain", qDomain); err != nil {
				return err
			}
		}

	}

	if o.Filter != nil {

		// query param filter
		var qrFilter string
		if o.Filter != nil {
			qrFilter = *o.Filter
		}
		qFilter := qrFilter
		if qFilter != "" {
			if err := r.SetQueryParam("filter", qFilter); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Password != nil {

		// query param password
		var qrPassword string
		if o.Password != nil {
			qrPassword = *o.Password
		}
		qPassword := qrPassword
		if qPassword != "" {
			if err := r.SetQueryParam("password", qPassword); err != nil {
				return err
			}
		}

	}

	if o.Resume != nil {

		// query param resume
		var qrResume string
		if o.Resume != nil {
			qrResume = *o.Resume
		}
		qResume := qrResume
		if qResume != "" {
			if err := r.SetQueryParam("resume", qResume); err != nil {
				return err
			}
		}

	}

	if o.SearchGroups != nil {

		// query param search_groups
		var qrSearchGroups bool
		if o.SearchGroups != nil {
			qrSearchGroups = *o.SearchGroups
		}
		qSearchGroups := swag.FormatBool(qrSearchGroups)
		if qSearchGroups != "" {
			if err := r.SetQueryParam("search_groups", qSearchGroups); err != nil {
				return err
			}
		}

	}

	if o.SearchUsers != nil {

		// query param search_users
		var qrSearchUsers bool
		if o.SearchUsers != nil {
			qrSearchUsers = *o.SearchUsers
		}
		qSearchUsers := swag.FormatBool(qrSearchUsers)
		if qSearchUsers != "" {
			if err := r.SetQueryParam("search_users", qSearchUsers); err != nil {
				return err
			}
		}

	}

	if o.User != nil {

		// query param user
		var qrUser string
		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {
			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
