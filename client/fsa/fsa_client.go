// Code generated by go-swagger; DO NOT EDIT.

package fsa

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new fsa API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for fsa API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFsaResult Delete the result set.
*/
func (a *Client) DeleteFsaResult(params *DeleteFsaResultParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFsaResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFsaResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFsaResult",
		Method:             "DELETE",
		PathPattern:        "/platform/3/fsa/results/{FsaResultId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFsaResultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFsaResultNoContent), nil

}

/*
DeleteFsaSettings Revert all settings to their defaults.
*/
func (a *Client) DeleteFsaSettings(params *DeleteFsaSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteFsaSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFsaSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFsaSettings",
		Method:             "DELETE",
		PathPattern:        "/platform/1/fsa/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteFsaSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFsaSettingsNoContent), nil

}

/*
GetFsaResult Retrieve result set information.
*/
func (a *Client) GetFsaResult(params *GetFsaResultParams, authInfo runtime.ClientAuthInfoWriter) (*GetFsaResultOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFsaResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFsaResult",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results/{FsaResultId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFsaResultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFsaResultOK), nil

}

/*
GetFsaResults List all results.
*/
func (a *Client) GetFsaResults(params *GetFsaResultsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFsaResultsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFsaResultsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFsaResults",
		Method:             "GET",
		PathPattern:        "/platform/3/fsa/results",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFsaResultsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFsaResultsOK), nil

}

/*
GetFsaSettings List all settings.
*/
func (a *Client) GetFsaSettings(params *GetFsaSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetFsaSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFsaSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFsaSettings",
		Method:             "GET",
		PathPattern:        "/platform/1/fsa/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetFsaSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFsaSettingsOK), nil

}

/*
UpdateFsaResult Modify result set. Only the pinned property can be changed at this time.
*/
func (a *Client) UpdateFsaResult(params *UpdateFsaResultParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFsaResultNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFsaResultParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFsaResult",
		Method:             "PUT",
		PathPattern:        "/platform/3/fsa/results/{FsaResultId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFsaResultReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFsaResultNoContent), nil

}

/*
UpdateFsaSettings Modify one or more settings.
*/
func (a *Client) UpdateFsaSettings(params *UpdateFsaSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateFsaSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateFsaSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateFsaSettings",
		Method:             "PUT",
		PathPattern:        "/platform/1/fsa/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateFsaSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateFsaSettingsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
