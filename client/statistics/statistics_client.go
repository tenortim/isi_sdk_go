// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new statistics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for statistics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetStatisticsCurrent Retrieve stats.
*/
func (a *Client) GetStatisticsCurrent(params *GetStatisticsCurrentParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsCurrent",
		Method:             "GET",
		PathPattern:        "/platform/1/statistics/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsCurrentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsCurrentOK), nil

}

/*
GetStatisticsHistory Retrieve stats.
*/
func (a *Client) GetStatisticsHistory(params *GetStatisticsHistoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsHistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsHistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsHistory",
		Method:             "GET",
		PathPattern:        "/platform/1/statistics/history",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsHistoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsHistoryOK), nil

}

/*
GetStatisticsKey List key meta-data.
*/
func (a *Client) GetStatisticsKey(params *GetStatisticsKeyParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsKeyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsKeyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsKey",
		Method:             "GET",
		PathPattern:        "/platform/1/statistics/keys/{StatisticsKeyId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsKeyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsKeyOK), nil

}

/*
GetStatisticsKeys List meta-data for matching keys.
*/
func (a *Client) GetStatisticsKeys(params *GetStatisticsKeysParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsKeys",
		Method:             "GET",
		PathPattern:        "/platform/1/statistics/keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsKeysOK), nil

}

/*
GetStatisticsOperations Retrieve operations list.
*/
func (a *Client) GetStatisticsOperations(params *GetStatisticsOperationsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsOperationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsOperationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsOperations",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/operations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsOperationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsOperationsOK), nil

}

/*
GetStatisticsProtocols Retrieve protocol list.
*/
func (a *Client) GetStatisticsProtocols(params *GetStatisticsProtocolsParams, authInfo runtime.ClientAuthInfoWriter) (*GetStatisticsProtocolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStatisticsProtocolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStatisticsProtocols",
		Method:             "GET",
		PathPattern:        "/platform/1/statistics/protocols",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStatisticsProtocolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStatisticsProtocolsOK), nil

}

/*
GetSummaryClient get summary client API
*/
func (a *Client) GetSummaryClient(params *GetSummaryClientParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummaryClientOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummaryClientParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummaryClient",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/client",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummaryClientReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummaryClientOK), nil

}

/*
GetSummaryDrive get summary drive API
*/
func (a *Client) GetSummaryDrive(params *GetSummaryDriveParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummaryDriveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummaryDriveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummaryDrive",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/drive",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummaryDriveReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummaryDriveOK), nil

}

/*
GetSummaryHeat File heat map, i.e. rate of file operations, and the type of operation listed by path/lin(s).
*/
func (a *Client) GetSummaryHeat(params *GetSummaryHeatParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummaryHeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummaryHeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummaryHeat",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/heat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummaryHeatReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummaryHeatOK), nil

}

/*
GetSummaryProtocol get summary protocol API
*/
func (a *Client) GetSummaryProtocol(params *GetSummaryProtocolParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummaryProtocolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummaryProtocolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummaryProtocol",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/protocol",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummaryProtocolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummaryProtocolOK), nil

}

/*
GetSummaryProtocolStats get summary protocol stats API
*/
func (a *Client) GetSummaryProtocolStats(params *GetSummaryProtocolStatsParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummaryProtocolStatsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummaryProtocolStatsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummaryProtocolStats",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/protocol-stats",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummaryProtocolStatsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummaryProtocolStatsOK), nil

}

/*
GetSummarySystem get summary system API
*/
func (a *Client) GetSummarySystem(params *GetSummarySystemParams, authInfo runtime.ClientAuthInfoWriter) (*GetSummarySystemOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSummarySystemParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSummarySystem",
		Method:             "GET",
		PathPattern:        "/platform/3/statistics/summary/system",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSummarySystemReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSummarySystemOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
