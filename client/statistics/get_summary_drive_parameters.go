// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSummaryDriveParams creates a new GetSummaryDriveParams object
// with the default values initialized.
func NewGetSummaryDriveParams() *GetSummaryDriveParams {
	var ()
	return &GetSummaryDriveParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewGetSummaryDriveParamsWithTimeout creates a new GetSummaryDriveParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSummaryDriveParamsWithTimeout(timeout time.Duration) *GetSummaryDriveParams {
	var ()
	return &GetSummaryDriveParams{

		requestTimeout: timeout,
	}
}

// NewGetSummaryDriveParamsWithContext creates a new GetSummaryDriveParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSummaryDriveParamsWithContext(ctx context.Context) *GetSummaryDriveParams {
	var ()
	return &GetSummaryDriveParams{

		Context: ctx,
	}
}

// NewGetSummaryDriveParamsWithHTTPClient creates a new GetSummaryDriveParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSummaryDriveParamsWithHTTPClient(client *http.Client) *GetSummaryDriveParams {
	var ()
	return &GetSummaryDriveParams{
		HTTPClient: client,
	}
}

/*GetSummaryDriveParams contains all the parameters to send to the API endpoint
for the get summary drive operation typically these are written to a http.Request
*/
type GetSummaryDriveParams struct {

	/*Degraded
	  Continue to report if some nodes do not respond.

	*/
	Degraded *bool
	/*Nodes
	  Specify node(s) for which statistics should be reported. A comma separated set of numbers. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate only the local node.

	*/
	Nodes *string
	/*Sort
	  { drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.

	*/
	Sort *string
	/*Timeout
	  Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.

	*/
	Timeout *int64
	/*Type
	  Specify drive type(s) for which statistics should be reported.

	*/
	Type *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the get summary drive params
func (o *GetSummaryDriveParams) WithRequestTimeout(timeout time.Duration) *GetSummaryDriveParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the get summary drive params
func (o *GetSummaryDriveParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the get summary drive params
func (o *GetSummaryDriveParams) WithContext(ctx context.Context) *GetSummaryDriveParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get summary drive params
func (o *GetSummaryDriveParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get summary drive params
func (o *GetSummaryDriveParams) WithHTTPClient(client *http.Client) *GetSummaryDriveParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get summary drive params
func (o *GetSummaryDriveParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDegraded adds the degraded to the get summary drive params
func (o *GetSummaryDriveParams) WithDegraded(degraded *bool) *GetSummaryDriveParams {
	o.SetDegraded(degraded)
	return o
}

// SetDegraded adds the degraded to the get summary drive params
func (o *GetSummaryDriveParams) SetDegraded(degraded *bool) {
	o.Degraded = degraded
}

// WithNodes adds the nodes to the get summary drive params
func (o *GetSummaryDriveParams) WithNodes(nodes *string) *GetSummaryDriveParams {
	o.SetNodes(nodes)
	return o
}

// SetNodes adds the nodes to the get summary drive params
func (o *GetSummaryDriveParams) SetNodes(nodes *string) {
	o.Nodes = nodes
}

// WithSort adds the sort to the get summary drive params
func (o *GetSummaryDriveParams) WithSort(sort *string) *GetSummaryDriveParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get summary drive params
func (o *GetSummaryDriveParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTimeout adds the timeout to the get summary drive params
func (o *GetSummaryDriveParams) WithTimeout(timeout *int64) *GetSummaryDriveParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get summary drive params
func (o *GetSummaryDriveParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WithType adds the typeVar to the get summary drive params
func (o *GetSummaryDriveParams) WithType(typeVar *string) *GetSummaryDriveParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get summary drive params
func (o *GetSummaryDriveParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetSummaryDriveParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.Degraded != nil {

		// query param degraded
		var qrDegraded bool
		if o.Degraded != nil {
			qrDegraded = *o.Degraded
		}
		qDegraded := swag.FormatBool(qrDegraded)
		if qDegraded != "" {
			if err := r.SetQueryParam("degraded", qDegraded); err != nil {
				return err
			}
		}

	}

	if o.Nodes != nil {

		// query param nodes
		var qrNodes string
		if o.Nodes != nil {
			qrNodes = *o.Nodes
		}
		qNodes := qrNodes
		if qNodes != "" {
			if err := r.SetQueryParam("nodes", qNodes); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
