// Code generated by go-swagger; DO NOT EDIT.

package statistics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSummaryClientParams creates a new GetSummaryClientParams object
// with the default values initialized.
func NewGetSummaryClientParams() *GetSummaryClientParams {
	var ()
	return &GetSummaryClientParams{

		requestTimeout: cr.DefaultTimeout,
	}
}

// NewGetSummaryClientParamsWithTimeout creates a new GetSummaryClientParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSummaryClientParamsWithTimeout(timeout time.Duration) *GetSummaryClientParams {
	var ()
	return &GetSummaryClientParams{

		requestTimeout: timeout,
	}
}

// NewGetSummaryClientParamsWithContext creates a new GetSummaryClientParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSummaryClientParamsWithContext(ctx context.Context) *GetSummaryClientParams {
	var ()
	return &GetSummaryClientParams{

		Context: ctx,
	}
}

// NewGetSummaryClientParamsWithHTTPClient creates a new GetSummaryClientParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSummaryClientParamsWithHTTPClient(client *http.Client) *GetSummaryClientParams {
	var ()
	return &GetSummaryClientParams{
		HTTPClient: client,
	}
}

/*GetSummaryClientParams contains all the parameters to send to the API endpoint
for the get summary client operation typically these are written to a http.Request
*/
type GetSummaryClientParams struct {

	/*Classes
	  Specify class(es) for which statistics should be reported. Default is all supported classes.

	*/
	Classes *string
	/*Degraded
	  Continue to report if some nodes do not respond.

	*/
	Degraded *bool
	/*LocalAddresses
	  A comma seperated list. Only report statistics for operations handled by the local hosts with dotted-quad IP addresses enumerated.

	*/
	LocalAddresses *string
	/*LocalNames
	  A comma seperated list. Only report statistics for operations handled by the local hosts with resolved names enumerated.

	*/
	LocalNames *string
	/*Nodes
	  A comma seperated list. Specify node(s) for which statistics should be reported. Default is 'all'. Zero (0) should be passed in as the sole argument to indicate local.

	*/
	Nodes *string
	/*Numeric
	  Whether to convert hostnames or usernames to their human readable form. False by default.

	*/
	Numeric *bool
	/*Protocols
	  A comma seperated list of the protocol(s) you wish to return. Default is 'all' of the folowing: nfs3|smb1|nlm|ftp|http|siq|iscsi|smb2|nfs4|papi|jobd|irp|lsass_in|lsass_out|hdfs|internal|external

	*/
	Protocols *string
	/*RemoteAddresses
	  A comma seperated list. Only report statistics for operations requested by the remote clients with dotted-quad IP addresses enumerated.

	*/
	RemoteAddresses *string
	/*RemoteNames
	  A comma seperated list. Only report statistics for operations requested by the remote clients with resolved names enumerated.

	*/
	RemoteNames *string
	/*Sort
	  { drive_id | type | xfers_in | bytes_in | xfer_size_in | xfers_out | bytes_out | xfer_size_out | access_latency | access_slow | iosched_latency | iosched_queue | busy | used_bytes_percent | used_inodes } Sort data by the specified comma-separated field(s). Prepend 'asc:' or 'desc:' to a field to change the sort direction.

	*/
	Sort *string
	/*Timeout
	  Timeout remote commands after NUM seconds, where NUM is the integer passed to the argument.

	*/
	Timeout *int64
	/*Totalby
	  A comma separated list specifying what should be unique. node|protocol|class|local_addr|local_name|remote_addr|remote_name|user_id|user_name|devid

	*/
	Totalby *string
	/*UserIds
	  A comma seperated list. Only report statistics for operations requested by users with numeric UIDs enumerated.

	*/
	UserIds *string
	/*UserNames
	  A comma seperated list. Only report statistics for operations requested by users with resolved names enumerated.

	*/
	UserNames *string

	requestTimeout time.Duration
	Context        context.Context
	HTTPClient     *http.Client
}

// WithRequestTimeout adds the timeout to the get summary client params
func (o *GetSummaryClientParams) WithRequestTimeout(timeout time.Duration) *GetSummaryClientParams {
	o.SetRequestTimeout(timeout)
	return o
}

// SetRequestTimeout adds the timeout to the get summary client params
func (o *GetSummaryClientParams) SetRequestTimeout(timeout time.Duration) {
	o.requestTimeout = timeout
}

// WithContext adds the context to the get summary client params
func (o *GetSummaryClientParams) WithContext(ctx context.Context) *GetSummaryClientParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get summary client params
func (o *GetSummaryClientParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get summary client params
func (o *GetSummaryClientParams) WithHTTPClient(client *http.Client) *GetSummaryClientParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get summary client params
func (o *GetSummaryClientParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClasses adds the classes to the get summary client params
func (o *GetSummaryClientParams) WithClasses(classes *string) *GetSummaryClientParams {
	o.SetClasses(classes)
	return o
}

// SetClasses adds the classes to the get summary client params
func (o *GetSummaryClientParams) SetClasses(classes *string) {
	o.Classes = classes
}

// WithDegraded adds the degraded to the get summary client params
func (o *GetSummaryClientParams) WithDegraded(degraded *bool) *GetSummaryClientParams {
	o.SetDegraded(degraded)
	return o
}

// SetDegraded adds the degraded to the get summary client params
func (o *GetSummaryClientParams) SetDegraded(degraded *bool) {
	o.Degraded = degraded
}

// WithLocalAddresses adds the localAddresses to the get summary client params
func (o *GetSummaryClientParams) WithLocalAddresses(localAddresses *string) *GetSummaryClientParams {
	o.SetLocalAddresses(localAddresses)
	return o
}

// SetLocalAddresses adds the localAddresses to the get summary client params
func (o *GetSummaryClientParams) SetLocalAddresses(localAddresses *string) {
	o.LocalAddresses = localAddresses
}

// WithLocalNames adds the localNames to the get summary client params
func (o *GetSummaryClientParams) WithLocalNames(localNames *string) *GetSummaryClientParams {
	o.SetLocalNames(localNames)
	return o
}

// SetLocalNames adds the localNames to the get summary client params
func (o *GetSummaryClientParams) SetLocalNames(localNames *string) {
	o.LocalNames = localNames
}

// WithNodes adds the nodes to the get summary client params
func (o *GetSummaryClientParams) WithNodes(nodes *string) *GetSummaryClientParams {
	o.SetNodes(nodes)
	return o
}

// SetNodes adds the nodes to the get summary client params
func (o *GetSummaryClientParams) SetNodes(nodes *string) {
	o.Nodes = nodes
}

// WithNumeric adds the numeric to the get summary client params
func (o *GetSummaryClientParams) WithNumeric(numeric *bool) *GetSummaryClientParams {
	o.SetNumeric(numeric)
	return o
}

// SetNumeric adds the numeric to the get summary client params
func (o *GetSummaryClientParams) SetNumeric(numeric *bool) {
	o.Numeric = numeric
}

// WithProtocols adds the protocols to the get summary client params
func (o *GetSummaryClientParams) WithProtocols(protocols *string) *GetSummaryClientParams {
	o.SetProtocols(protocols)
	return o
}

// SetProtocols adds the protocols to the get summary client params
func (o *GetSummaryClientParams) SetProtocols(protocols *string) {
	o.Protocols = protocols
}

// WithRemoteAddresses adds the remoteAddresses to the get summary client params
func (o *GetSummaryClientParams) WithRemoteAddresses(remoteAddresses *string) *GetSummaryClientParams {
	o.SetRemoteAddresses(remoteAddresses)
	return o
}

// SetRemoteAddresses adds the remoteAddresses to the get summary client params
func (o *GetSummaryClientParams) SetRemoteAddresses(remoteAddresses *string) {
	o.RemoteAddresses = remoteAddresses
}

// WithRemoteNames adds the remoteNames to the get summary client params
func (o *GetSummaryClientParams) WithRemoteNames(remoteNames *string) *GetSummaryClientParams {
	o.SetRemoteNames(remoteNames)
	return o
}

// SetRemoteNames adds the remoteNames to the get summary client params
func (o *GetSummaryClientParams) SetRemoteNames(remoteNames *string) {
	o.RemoteNames = remoteNames
}

// WithSort adds the sort to the get summary client params
func (o *GetSummaryClientParams) WithSort(sort *string) *GetSummaryClientParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get summary client params
func (o *GetSummaryClientParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithTimeout adds the timeout to the get summary client params
func (o *GetSummaryClientParams) WithTimeout(timeout *int64) *GetSummaryClientParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get summary client params
func (o *GetSummaryClientParams) SetTimeout(timeout *int64) {
	o.Timeout = timeout
}

// WithTotalby adds the totalby to the get summary client params
func (o *GetSummaryClientParams) WithTotalby(totalby *string) *GetSummaryClientParams {
	o.SetTotalby(totalby)
	return o
}

// SetTotalby adds the totalby to the get summary client params
func (o *GetSummaryClientParams) SetTotalby(totalby *string) {
	o.Totalby = totalby
}

// WithUserIds adds the userIds to the get summary client params
func (o *GetSummaryClientParams) WithUserIds(userIds *string) *GetSummaryClientParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the get summary client params
func (o *GetSummaryClientParams) SetUserIds(userIds *string) {
	o.UserIds = userIds
}

// WithUserNames adds the userNames to the get summary client params
func (o *GetSummaryClientParams) WithUserNames(userNames *string) *GetSummaryClientParams {
	o.SetUserNames(userNames)
	return o
}

// SetUserNames adds the userNames to the get summary client params
func (o *GetSummaryClientParams) SetUserNames(userNames *string) {
	o.UserNames = userNames
}

// WriteToRequest writes these params to a swagger request
func (o *GetSummaryClientParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.requestTimeout); err != nil {
		return err
	}
	var res []error

	if o.Classes != nil {

		// query param classes
		var qrClasses string
		if o.Classes != nil {
			qrClasses = *o.Classes
		}
		qClasses := qrClasses
		if qClasses != "" {
			if err := r.SetQueryParam("classes", qClasses); err != nil {
				return err
			}
		}

	}

	if o.Degraded != nil {

		// query param degraded
		var qrDegraded bool
		if o.Degraded != nil {
			qrDegraded = *o.Degraded
		}
		qDegraded := swag.FormatBool(qrDegraded)
		if qDegraded != "" {
			if err := r.SetQueryParam("degraded", qDegraded); err != nil {
				return err
			}
		}

	}

	if o.LocalAddresses != nil {

		// query param local_addresses
		var qrLocalAddresses string
		if o.LocalAddresses != nil {
			qrLocalAddresses = *o.LocalAddresses
		}
		qLocalAddresses := qrLocalAddresses
		if qLocalAddresses != "" {
			if err := r.SetQueryParam("local_addresses", qLocalAddresses); err != nil {
				return err
			}
		}

	}

	if o.LocalNames != nil {

		// query param local_names
		var qrLocalNames string
		if o.LocalNames != nil {
			qrLocalNames = *o.LocalNames
		}
		qLocalNames := qrLocalNames
		if qLocalNames != "" {
			if err := r.SetQueryParam("local_names", qLocalNames); err != nil {
				return err
			}
		}

	}

	if o.Nodes != nil {

		// query param nodes
		var qrNodes string
		if o.Nodes != nil {
			qrNodes = *o.Nodes
		}
		qNodes := qrNodes
		if qNodes != "" {
			if err := r.SetQueryParam("nodes", qNodes); err != nil {
				return err
			}
		}

	}

	if o.Numeric != nil {

		// query param numeric
		var qrNumeric bool
		if o.Numeric != nil {
			qrNumeric = *o.Numeric
		}
		qNumeric := swag.FormatBool(qrNumeric)
		if qNumeric != "" {
			if err := r.SetQueryParam("numeric", qNumeric); err != nil {
				return err
			}
		}

	}

	if o.Protocols != nil {

		// query param protocols
		var qrProtocols string
		if o.Protocols != nil {
			qrProtocols = *o.Protocols
		}
		qProtocols := qrProtocols
		if qProtocols != "" {
			if err := r.SetQueryParam("protocols", qProtocols); err != nil {
				return err
			}
		}

	}

	if o.RemoteAddresses != nil {

		// query param remote_addresses
		var qrRemoteAddresses string
		if o.RemoteAddresses != nil {
			qrRemoteAddresses = *o.RemoteAddresses
		}
		qRemoteAddresses := qrRemoteAddresses
		if qRemoteAddresses != "" {
			if err := r.SetQueryParam("remote_addresses", qRemoteAddresses); err != nil {
				return err
			}
		}

	}

	if o.RemoteNames != nil {

		// query param remote_names
		var qrRemoteNames string
		if o.RemoteNames != nil {
			qrRemoteNames = *o.RemoteNames
		}
		qRemoteNames := qrRemoteNames
		if qRemoteNames != "" {
			if err := r.SetQueryParam("remote_names", qRemoteNames); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.Timeout != nil {

		// query param timeout
		var qrTimeout int64
		if o.Timeout != nil {
			qrTimeout = *o.Timeout
		}
		qTimeout := swag.FormatInt64(qrTimeout)
		if qTimeout != "" {
			if err := r.SetQueryParam("timeout", qTimeout); err != nil {
				return err
			}
		}

	}

	if o.Totalby != nil {

		// query param totalby
		var qrTotalby string
		if o.Totalby != nil {
			qrTotalby = *o.Totalby
		}
		qTotalby := qrTotalby
		if qTotalby != "" {
			if err := r.SetQueryParam("totalby", qTotalby); err != nil {
				return err
			}
		}

	}

	if o.UserIds != nil {

		// query param user_ids
		var qrUserIds string
		if o.UserIds != nil {
			qrUserIds = *o.UserIds
		}
		qUserIds := qrUserIds
		if qUserIds != "" {
			if err := r.SetQueryParam("user_ids", qUserIds); err != nil {
				return err
			}
		}

	}

	if o.UserNames != nil {

		// query param user_names
		var qrUserNames string
		if o.UserNames != nil {
			qrUserNames = *o.UserNames
		}
		qUserNames := qrUserNames
		if qUserNames != "" {
			if err := r.SetQueryParam("user_names", qUserNames); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
