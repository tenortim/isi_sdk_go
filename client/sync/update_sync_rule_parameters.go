// Code generated by go-swagger; DO NOT EDIT.

package sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateSyncRuleParams creates a new UpdateSyncRuleParams object
// with the default values initialized.
func NewUpdateSyncRuleParams() *UpdateSyncRuleParams {
	var ()
	return &UpdateSyncRuleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSyncRuleParamsWithTimeout creates a new UpdateSyncRuleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSyncRuleParamsWithTimeout(timeout time.Duration) *UpdateSyncRuleParams {
	var ()
	return &UpdateSyncRuleParams{

		timeout: timeout,
	}
}

// NewUpdateSyncRuleParamsWithContext creates a new UpdateSyncRuleParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSyncRuleParamsWithContext(ctx context.Context) *UpdateSyncRuleParams {
	var ()
	return &UpdateSyncRuleParams{

		Context: ctx,
	}
}

// NewUpdateSyncRuleParamsWithHTTPClient creates a new UpdateSyncRuleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSyncRuleParamsWithHTTPClient(client *http.Client) *UpdateSyncRuleParams {
	var ()
	return &UpdateSyncRuleParams{
		HTTPClient: client,
	}
}

/*UpdateSyncRuleParams contains all the parameters to send to the API endpoint
for the update sync rule operation typically these are written to a http.Request
*/
type UpdateSyncRuleParams struct {

	/*SyncRule*/
	SyncRule *models.SyncRule
	/*SyncRuleID
	  Modify a single SyncIQ performance rule.

	*/
	SyncRuleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update sync rule params
func (o *UpdateSyncRuleParams) WithTimeout(timeout time.Duration) *UpdateSyncRuleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update sync rule params
func (o *UpdateSyncRuleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update sync rule params
func (o *UpdateSyncRuleParams) WithContext(ctx context.Context) *UpdateSyncRuleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update sync rule params
func (o *UpdateSyncRuleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update sync rule params
func (o *UpdateSyncRuleParams) WithHTTPClient(client *http.Client) *UpdateSyncRuleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update sync rule params
func (o *UpdateSyncRuleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSyncRule adds the syncRule to the update sync rule params
func (o *UpdateSyncRuleParams) WithSyncRule(syncRule *models.SyncRule) *UpdateSyncRuleParams {
	o.SetSyncRule(syncRule)
	return o
}

// SetSyncRule adds the syncRule to the update sync rule params
func (o *UpdateSyncRuleParams) SetSyncRule(syncRule *models.SyncRule) {
	o.SyncRule = syncRule
}

// WithSyncRuleID adds the syncRuleID to the update sync rule params
func (o *UpdateSyncRuleParams) WithSyncRuleID(syncRuleID string) *UpdateSyncRuleParams {
	o.SetSyncRuleID(syncRuleID)
	return o
}

// SetSyncRuleID adds the syncRuleId to the update sync rule params
func (o *UpdateSyncRuleParams) SetSyncRuleID(syncRuleID string) {
	o.SyncRuleID = syncRuleID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSyncRuleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SyncRule != nil {
		if err := r.SetBodyParam(o.SyncRule); err != nil {
			return err
		}
	}

	// path param SyncRuleId
	if err := r.SetPathParam("SyncRuleId", o.SyncRuleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
