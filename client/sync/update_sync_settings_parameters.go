// Code generated by go-swagger; DO NOT EDIT.

package sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateSyncSettingsParams creates a new UpdateSyncSettingsParams object
// with the default values initialized.
func NewUpdateSyncSettingsParams() *UpdateSyncSettingsParams {
	var ()
	return &UpdateSyncSettingsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSyncSettingsParamsWithTimeout creates a new UpdateSyncSettingsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSyncSettingsParamsWithTimeout(timeout time.Duration) *UpdateSyncSettingsParams {
	var ()
	return &UpdateSyncSettingsParams{

		timeout: timeout,
	}
}

// NewUpdateSyncSettingsParamsWithContext creates a new UpdateSyncSettingsParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSyncSettingsParamsWithContext(ctx context.Context) *UpdateSyncSettingsParams {
	var ()
	return &UpdateSyncSettingsParams{

		Context: ctx,
	}
}

// NewUpdateSyncSettingsParamsWithHTTPClient creates a new UpdateSyncSettingsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSyncSettingsParamsWithHTTPClient(client *http.Client) *UpdateSyncSettingsParams {
	var ()
	return &UpdateSyncSettingsParams{
		HTTPClient: client,
	}
}

/*UpdateSyncSettingsParams contains all the parameters to send to the API endpoint
for the update sync settings operation typically these are written to a http.Request
*/
type UpdateSyncSettingsParams struct {

	/*SyncSettings*/
	SyncSettings *models.SyncSettingsExtended

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update sync settings params
func (o *UpdateSyncSettingsParams) WithTimeout(timeout time.Duration) *UpdateSyncSettingsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update sync settings params
func (o *UpdateSyncSettingsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update sync settings params
func (o *UpdateSyncSettingsParams) WithContext(ctx context.Context) *UpdateSyncSettingsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update sync settings params
func (o *UpdateSyncSettingsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update sync settings params
func (o *UpdateSyncSettingsParams) WithHTTPClient(client *http.Client) *UpdateSyncSettingsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update sync settings params
func (o *UpdateSyncSettingsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSyncSettings adds the syncSettings to the update sync settings params
func (o *UpdateSyncSettingsParams) WithSyncSettings(syncSettings *models.SyncSettingsExtended) *UpdateSyncSettingsParams {
	o.SetSyncSettings(syncSettings)
	return o
}

// SetSyncSettings adds the syncSettings to the update sync settings params
func (o *UpdateSyncSettingsParams) SetSyncSettings(syncSettings *models.SyncSettingsExtended) {
	o.SyncSettings = syncSettings
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSyncSettingsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SyncSettings != nil {
		if err := r.SetBodyParam(o.SyncSettings); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
