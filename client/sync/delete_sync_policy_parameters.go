// Code generated by go-swagger; DO NOT EDIT.

package sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteSyncPolicyParams creates a new DeleteSyncPolicyParams object
// with the default values initialized.
func NewDeleteSyncPolicyParams() *DeleteSyncPolicyParams {
	var ()
	return &DeleteSyncPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteSyncPolicyParamsWithTimeout creates a new DeleteSyncPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteSyncPolicyParamsWithTimeout(timeout time.Duration) *DeleteSyncPolicyParams {
	var ()
	return &DeleteSyncPolicyParams{

		timeout: timeout,
	}
}

// NewDeleteSyncPolicyParamsWithContext creates a new DeleteSyncPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteSyncPolicyParamsWithContext(ctx context.Context) *DeleteSyncPolicyParams {
	var ()
	return &DeleteSyncPolicyParams{

		Context: ctx,
	}
}

// NewDeleteSyncPolicyParamsWithHTTPClient creates a new DeleteSyncPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteSyncPolicyParamsWithHTTPClient(client *http.Client) *DeleteSyncPolicyParams {
	var ()
	return &DeleteSyncPolicyParams{
		HTTPClient: client,
	}
}

/*DeleteSyncPolicyParams contains all the parameters to send to the API endpoint
for the delete sync policy operation typically these are written to a http.Request
*/
type DeleteSyncPolicyParams struct {

	/*SyncPolicyID
	  Delete a single SyncIQ policy.

	*/
	SyncPolicyID string
	/*Force
	  Ignore any running jobs when preparing to delete a policy.

	*/
	Force *bool
	/*LocalOnly
	  Skip deleting the policy association on the target.

	*/
	LocalOnly *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithTimeout(timeout time.Duration) *DeleteSyncPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithContext(ctx context.Context) *DeleteSyncPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithHTTPClient(client *http.Client) *DeleteSyncPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSyncPolicyID adds the syncPolicyID to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithSyncPolicyID(syncPolicyID string) *DeleteSyncPolicyParams {
	o.SetSyncPolicyID(syncPolicyID)
	return o
}

// SetSyncPolicyID adds the syncPolicyId to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetSyncPolicyID(syncPolicyID string) {
	o.SyncPolicyID = syncPolicyID
}

// WithForce adds the force to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithForce(force *bool) *DeleteSyncPolicyParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetForce(force *bool) {
	o.Force = force
}

// WithLocalOnly adds the localOnly to the delete sync policy params
func (o *DeleteSyncPolicyParams) WithLocalOnly(localOnly *bool) *DeleteSyncPolicyParams {
	o.SetLocalOnly(localOnly)
	return o
}

// SetLocalOnly adds the localOnly to the delete sync policy params
func (o *DeleteSyncPolicyParams) SetLocalOnly(localOnly *bool) {
	o.LocalOnly = localOnly
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteSyncPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param SyncPolicyId
	if err := r.SetPathParam("SyncPolicyId", o.SyncPolicyID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if o.LocalOnly != nil {

		// query param local_only
		var qrLocalOnly bool
		if o.LocalOnly != nil {
			qrLocalOnly = *o.LocalOnly
		}
		qLocalOnly := swag.FormatBool(qrLocalOnly)
		if qLocalOnly != "" {
			if err := r.SetQueryParam("local_only", qLocalOnly); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
