// Code generated by go-swagger; DO NOT EDIT.

package sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateSyncJobParams creates a new UpdateSyncJobParams object
// with the default values initialized.
func NewUpdateSyncJobParams() *UpdateSyncJobParams {
	var ()
	return &UpdateSyncJobParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSyncJobParamsWithTimeout creates a new UpdateSyncJobParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSyncJobParamsWithTimeout(timeout time.Duration) *UpdateSyncJobParams {
	var ()
	return &UpdateSyncJobParams{

		timeout: timeout,
	}
}

// NewUpdateSyncJobParamsWithContext creates a new UpdateSyncJobParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSyncJobParamsWithContext(ctx context.Context) *UpdateSyncJobParams {
	var ()
	return &UpdateSyncJobParams{

		Context: ctx,
	}
}

// NewUpdateSyncJobParamsWithHTTPClient creates a new UpdateSyncJobParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSyncJobParamsWithHTTPClient(client *http.Client) *UpdateSyncJobParams {
	var ()
	return &UpdateSyncJobParams{
		HTTPClient: client,
	}
}

/*UpdateSyncJobParams contains all the parameters to send to the API endpoint
for the update sync job operation typically these are written to a http.Request
*/
type UpdateSyncJobParams struct {

	/*SyncJob*/
	SyncJob *models.SyncJob
	/*SyncJobID
	  Perform an action (pause, cancel, etc...) on a single job.

	*/
	SyncJobID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update sync job params
func (o *UpdateSyncJobParams) WithTimeout(timeout time.Duration) *UpdateSyncJobParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update sync job params
func (o *UpdateSyncJobParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update sync job params
func (o *UpdateSyncJobParams) WithContext(ctx context.Context) *UpdateSyncJobParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update sync job params
func (o *UpdateSyncJobParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update sync job params
func (o *UpdateSyncJobParams) WithHTTPClient(client *http.Client) *UpdateSyncJobParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update sync job params
func (o *UpdateSyncJobParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSyncJob adds the syncJob to the update sync job params
func (o *UpdateSyncJobParams) WithSyncJob(syncJob *models.SyncJob) *UpdateSyncJobParams {
	o.SetSyncJob(syncJob)
	return o
}

// SetSyncJob adds the syncJob to the update sync job params
func (o *UpdateSyncJobParams) SetSyncJob(syncJob *models.SyncJob) {
	o.SyncJob = syncJob
}

// WithSyncJobID adds the syncJobID to the update sync job params
func (o *UpdateSyncJobParams) WithSyncJobID(syncJobID string) *UpdateSyncJobParams {
	o.SetSyncJobID(syncJobID)
	return o
}

// SetSyncJobID adds the syncJobId to the update sync job params
func (o *UpdateSyncJobParams) SetSyncJobID(syncJobID string) {
	o.SyncJobID = syncJobID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSyncJobParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SyncJob != nil {
		if err := r.SetBodyParam(o.SyncJob); err != nil {
			return err
		}
	}

	// path param SyncJobId
	if err := r.SetPathParam("SyncJobId", o.SyncJobID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
