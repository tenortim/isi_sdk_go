// Code generated by go-swagger; DO NOT EDIT.

package sync

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateSyncPolicyParams creates a new UpdateSyncPolicyParams object
// with the default values initialized.
func NewUpdateSyncPolicyParams() *UpdateSyncPolicyParams {
	var ()
	return &UpdateSyncPolicyParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSyncPolicyParamsWithTimeout creates a new UpdateSyncPolicyParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSyncPolicyParamsWithTimeout(timeout time.Duration) *UpdateSyncPolicyParams {
	var ()
	return &UpdateSyncPolicyParams{

		timeout: timeout,
	}
}

// NewUpdateSyncPolicyParamsWithContext creates a new UpdateSyncPolicyParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSyncPolicyParamsWithContext(ctx context.Context) *UpdateSyncPolicyParams {
	var ()
	return &UpdateSyncPolicyParams{

		Context: ctx,
	}
}

// NewUpdateSyncPolicyParamsWithHTTPClient creates a new UpdateSyncPolicyParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSyncPolicyParamsWithHTTPClient(client *http.Client) *UpdateSyncPolicyParams {
	var ()
	return &UpdateSyncPolicyParams{
		HTTPClient: client,
	}
}

/*UpdateSyncPolicyParams contains all the parameters to send to the API endpoint
for the update sync policy operation typically these are written to a http.Request
*/
type UpdateSyncPolicyParams struct {

	/*SyncPolicy*/
	SyncPolicy *models.SyncPolicy
	/*SyncPolicyID
	  Modify a single SyncIQ policy.

	*/
	SyncPolicyID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update sync policy params
func (o *UpdateSyncPolicyParams) WithTimeout(timeout time.Duration) *UpdateSyncPolicyParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update sync policy params
func (o *UpdateSyncPolicyParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update sync policy params
func (o *UpdateSyncPolicyParams) WithContext(ctx context.Context) *UpdateSyncPolicyParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update sync policy params
func (o *UpdateSyncPolicyParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update sync policy params
func (o *UpdateSyncPolicyParams) WithHTTPClient(client *http.Client) *UpdateSyncPolicyParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update sync policy params
func (o *UpdateSyncPolicyParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSyncPolicy adds the syncPolicy to the update sync policy params
func (o *UpdateSyncPolicyParams) WithSyncPolicy(syncPolicy *models.SyncPolicy) *UpdateSyncPolicyParams {
	o.SetSyncPolicy(syncPolicy)
	return o
}

// SetSyncPolicy adds the syncPolicy to the update sync policy params
func (o *UpdateSyncPolicyParams) SetSyncPolicy(syncPolicy *models.SyncPolicy) {
	o.SyncPolicy = syncPolicy
}

// WithSyncPolicyID adds the syncPolicyID to the update sync policy params
func (o *UpdateSyncPolicyParams) WithSyncPolicyID(syncPolicyID string) *UpdateSyncPolicyParams {
	o.SetSyncPolicyID(syncPolicyID)
	return o
}

// SetSyncPolicyID adds the syncPolicyId to the update sync policy params
func (o *UpdateSyncPolicyParams) SetSyncPolicyID(syncPolicyID string) {
	o.SyncPolicyID = syncPolicyID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSyncPolicyParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.SyncPolicy != nil {
		if err := r.SetBodyParam(o.SyncPolicy); err != nil {
			return err
		}
	}

	// path param SyncPolicyId
	if err := r.SetPathParam("SyncPolicyId", o.SyncPolicyID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
