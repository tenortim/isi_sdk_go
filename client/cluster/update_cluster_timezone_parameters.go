// Code generated by go-swagger; DO NOT EDIT.

package cluster

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateClusterTimezoneParams creates a new UpdateClusterTimezoneParams object
// with the default values initialized.
func NewUpdateClusterTimezoneParams() *UpdateClusterTimezoneParams {
	var ()
	return &UpdateClusterTimezoneParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateClusterTimezoneParamsWithTimeout creates a new UpdateClusterTimezoneParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateClusterTimezoneParamsWithTimeout(timeout time.Duration) *UpdateClusterTimezoneParams {
	var ()
	return &UpdateClusterTimezoneParams{

		timeout: timeout,
	}
}

// NewUpdateClusterTimezoneParamsWithContext creates a new UpdateClusterTimezoneParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateClusterTimezoneParamsWithContext(ctx context.Context) *UpdateClusterTimezoneParams {
	var ()
	return &UpdateClusterTimezoneParams{

		Context: ctx,
	}
}

// NewUpdateClusterTimezoneParamsWithHTTPClient creates a new UpdateClusterTimezoneParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateClusterTimezoneParamsWithHTTPClient(client *http.Client) *UpdateClusterTimezoneParams {
	var ()
	return &UpdateClusterTimezoneParams{
		HTTPClient: client,
	}
}

/*UpdateClusterTimezoneParams contains all the parameters to send to the API endpoint
for the update cluster timezone operation typically these are written to a http.Request
*/
type UpdateClusterTimezoneParams struct {

	/*ClusterTimezone*/
	ClusterTimezone *models.ClusterTimezoneExtended

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) WithTimeout(timeout time.Duration) *UpdateClusterTimezoneParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) WithContext(ctx context.Context) *UpdateClusterTimezoneParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) WithHTTPClient(client *http.Client) *UpdateClusterTimezoneParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterTimezone adds the clusterTimezone to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) WithClusterTimezone(clusterTimezone *models.ClusterTimezoneExtended) *UpdateClusterTimezoneParams {
	o.SetClusterTimezone(clusterTimezone)
	return o
}

// SetClusterTimezone adds the clusterTimezone to the update cluster timezone params
func (o *UpdateClusterTimezoneParams) SetClusterTimezone(clusterTimezone *models.ClusterTimezoneExtended) {
	o.ClusterTimezone = clusterTimezone
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateClusterTimezoneParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ClusterTimezone != nil {
		if err := r.SetBodyParam(o.ClusterTimezone); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
