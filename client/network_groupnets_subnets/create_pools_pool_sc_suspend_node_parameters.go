// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets_subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewCreatePoolsPoolScSuspendNodeParams creates a new CreatePoolsPoolScSuspendNodeParams object
// with the default values initialized.
func NewCreatePoolsPoolScSuspendNodeParams() *CreatePoolsPoolScSuspendNodeParams {
	var ()
	return &CreatePoolsPoolScSuspendNodeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCreatePoolsPoolScSuspendNodeParamsWithTimeout creates a new CreatePoolsPoolScSuspendNodeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCreatePoolsPoolScSuspendNodeParamsWithTimeout(timeout time.Duration) *CreatePoolsPoolScSuspendNodeParams {
	var ()
	return &CreatePoolsPoolScSuspendNodeParams{

		timeout: timeout,
	}
}

// NewCreatePoolsPoolScSuspendNodeParamsWithContext creates a new CreatePoolsPoolScSuspendNodeParams object
// with the default values initialized, and the ability to set a context for a request
func NewCreatePoolsPoolScSuspendNodeParamsWithContext(ctx context.Context) *CreatePoolsPoolScSuspendNodeParams {
	var ()
	return &CreatePoolsPoolScSuspendNodeParams{

		Context: ctx,
	}
}

// NewCreatePoolsPoolScSuspendNodeParamsWithHTTPClient creates a new CreatePoolsPoolScSuspendNodeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCreatePoolsPoolScSuspendNodeParamsWithHTTPClient(client *http.Client) *CreatePoolsPoolScSuspendNodeParams {
	var ()
	return &CreatePoolsPoolScSuspendNodeParams{
		HTTPClient: client,
	}
}

/*CreatePoolsPoolScSuspendNodeParams contains all the parameters to send to the API endpoint
for the create pools pool sc suspend node operation typically these are written to a http.Request
*/
type CreatePoolsPoolScSuspendNodeParams struct {

	/*Groupnet*/
	Groupnet string
	/*Pool*/
	Pool string
	/*PoolsPoolScSuspendNode*/
	PoolsPoolScSuspendNode *models.PoolsPoolScResumeNode
	/*Subnet*/
	Subnet string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithTimeout(timeout time.Duration) *CreatePoolsPoolScSuspendNodeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithContext(ctx context.Context) *CreatePoolsPoolScSuspendNodeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithHTTPClient(client *http.Client) *CreatePoolsPoolScSuspendNodeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupnet adds the groupnet to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithGroupnet(groupnet string) *CreatePoolsPoolScSuspendNodeParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetGroupnet(groupnet string) {
	o.Groupnet = groupnet
}

// WithPool adds the pool to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithPool(pool string) *CreatePoolsPoolScSuspendNodeParams {
	o.SetPool(pool)
	return o
}

// SetPool adds the pool to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetPool(pool string) {
	o.Pool = pool
}

// WithPoolsPoolScSuspendNode adds the poolsPoolScSuspendNode to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithPoolsPoolScSuspendNode(poolsPoolScSuspendNode *models.PoolsPoolScResumeNode) *CreatePoolsPoolScSuspendNodeParams {
	o.SetPoolsPoolScSuspendNode(poolsPoolScSuspendNode)
	return o
}

// SetPoolsPoolScSuspendNode adds the poolsPoolScSuspendNode to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetPoolsPoolScSuspendNode(poolsPoolScSuspendNode *models.PoolsPoolScResumeNode) {
	o.PoolsPoolScSuspendNode = poolsPoolScSuspendNode
}

// WithSubnet adds the subnet to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) WithSubnet(subnet string) *CreatePoolsPoolScSuspendNodeParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the create pools pool sc suspend node params
func (o *CreatePoolsPoolScSuspendNodeParams) SetSubnet(subnet string) {
	o.Subnet = subnet
}

// WriteToRequest writes these params to a swagger request
func (o *CreatePoolsPoolScSuspendNodeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Groupnet
	if err := r.SetPathParam("Groupnet", o.Groupnet); err != nil {
		return err
	}

	// path param Pool
	if err := r.SetPathParam("Pool", o.Pool); err != nil {
		return err
	}

	if o.PoolsPoolScSuspendNode != nil {
		if err := r.SetBodyParam(o.PoolsPoolScSuspendNode); err != nil {
			return err
		}
	}

	// path param Subnet
	if err := r.SetPathParam("Subnet", o.Subnet); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
