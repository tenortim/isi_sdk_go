// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets_subnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network groupnets subnets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network groupnets subnets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreatePoolsPoolRebalanceIP Rebalance IP addresses in specified pool.
*/
func (a *Client) CreatePoolsPoolRebalanceIP(params *CreatePoolsPoolRebalanceIPParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePoolsPoolRebalanceIPOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoolsPoolRebalanceIPParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPoolsPoolRebalanceIp",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rebalance-ips",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePoolsPoolRebalanceIPReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePoolsPoolRebalanceIPOK), nil

}

/*
CreatePoolsPoolRule Create a new rule.
*/
func (a *Client) CreatePoolsPoolRule(params *CreatePoolsPoolRuleParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePoolsPoolRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoolsPoolRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPoolsPoolRule",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePoolsPoolRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePoolsPoolRuleOK), nil

}

/*
CreatePoolsPoolScResumeNode Resume suspended nodes.
*/
func (a *Client) CreatePoolsPoolScResumeNode(params *CreatePoolsPoolScResumeNodeParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePoolsPoolScResumeNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoolsPoolScResumeNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPoolsPoolScResumeNode",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-resume-nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePoolsPoolScResumeNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePoolsPoolScResumeNodeOK), nil

}

/*
CreatePoolsPoolScSuspendNode Suspend nodes.
*/
func (a *Client) CreatePoolsPoolScSuspendNode(params *CreatePoolsPoolScSuspendNodeParams, authInfo runtime.ClientAuthInfoWriter) (*CreatePoolsPoolScSuspendNodeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreatePoolsPoolScSuspendNodeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createPoolsPoolScSuspendNode",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/sc-suspend-nodes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreatePoolsPoolScSuspendNodeReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreatePoolsPoolScSuspendNodeOK), nil

}

/*
DeletePoolsPoolRule Delete a network rule.
*/
func (a *Client) DeletePoolsPoolRule(params *DeletePoolsPoolRuleParams, authInfo runtime.ClientAuthInfoWriter) (*DeletePoolsPoolRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePoolsPoolRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePoolsPoolRule",
		Method:             "DELETE",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeletePoolsPoolRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePoolsPoolRuleNoContent), nil

}

/*
GetPoolsPoolInterfaces Get a list of interfaces.
*/
func (a *Client) GetPoolsPoolInterfaces(params *GetPoolsPoolInterfacesParams, authInfo runtime.ClientAuthInfoWriter) (*GetPoolsPoolInterfacesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsPoolInterfacesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPoolsPoolInterfaces",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/interfaces",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPoolsPoolInterfacesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPoolsPoolInterfacesOK), nil

}

/*
GetPoolsPoolRule View a single network rule.
*/
func (a *Client) GetPoolsPoolRule(params *GetPoolsPoolRuleParams, authInfo runtime.ClientAuthInfoWriter) (*GetPoolsPoolRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPoolsPoolRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPoolsPoolRule",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetPoolsPoolRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPoolsPoolRuleOK), nil

}

/*
ListPoolsPoolRules Get a list of network rules.
*/
func (a *Client) ListPoolsPoolRules(params *ListPoolsPoolRulesParams, authInfo runtime.ClientAuthInfoWriter) (*ListPoolsPoolRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListPoolsPoolRulesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listPoolsPoolRules",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListPoolsPoolRulesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListPoolsPoolRulesOK), nil

}

/*
UpdatePoolsPoolRule Modify a network rule.
*/
func (a *Client) UpdatePoolsPoolRule(params *UpdatePoolsPoolRuleParams, authInfo runtime.ClientAuthInfoWriter) (*UpdatePoolsPoolRuleNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePoolsPoolRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePoolsPoolRule",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{Pool}/rules/{PoolsPoolRuleId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdatePoolsPoolRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePoolsPoolRuleNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
