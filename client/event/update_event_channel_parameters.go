// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateEventChannelParams creates a new UpdateEventChannelParams object
// with the default values initialized.
func NewUpdateEventChannelParams() *UpdateEventChannelParams {
	var ()
	return &UpdateEventChannelParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateEventChannelParamsWithTimeout creates a new UpdateEventChannelParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateEventChannelParamsWithTimeout(timeout time.Duration) *UpdateEventChannelParams {
	var ()
	return &UpdateEventChannelParams{

		timeout: timeout,
	}
}

// NewUpdateEventChannelParamsWithContext creates a new UpdateEventChannelParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateEventChannelParamsWithContext(ctx context.Context) *UpdateEventChannelParams {
	var ()
	return &UpdateEventChannelParams{

		Context: ctx,
	}
}

// NewUpdateEventChannelParamsWithHTTPClient creates a new UpdateEventChannelParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateEventChannelParamsWithHTTPClient(client *http.Client) *UpdateEventChannelParams {
	var ()
	return &UpdateEventChannelParams{
		HTTPClient: client,
	}
}

/*UpdateEventChannelParams contains all the parameters to send to the API endpoint
for the update event channel operation typically these are written to a http.Request
*/
type UpdateEventChannelParams struct {

	/*EventChannel*/
	EventChannel *models.EventChannel
	/*EventChannelID
	  Modify the alert-condition

	*/
	EventChannelID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update event channel params
func (o *UpdateEventChannelParams) WithTimeout(timeout time.Duration) *UpdateEventChannelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update event channel params
func (o *UpdateEventChannelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update event channel params
func (o *UpdateEventChannelParams) WithContext(ctx context.Context) *UpdateEventChannelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update event channel params
func (o *UpdateEventChannelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update event channel params
func (o *UpdateEventChannelParams) WithHTTPClient(client *http.Client) *UpdateEventChannelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update event channel params
func (o *UpdateEventChannelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventChannel adds the eventChannel to the update event channel params
func (o *UpdateEventChannelParams) WithEventChannel(eventChannel *models.EventChannel) *UpdateEventChannelParams {
	o.SetEventChannel(eventChannel)
	return o
}

// SetEventChannel adds the eventChannel to the update event channel params
func (o *UpdateEventChannelParams) SetEventChannel(eventChannel *models.EventChannel) {
	o.EventChannel = eventChannel
}

// WithEventChannelID adds the eventChannelID to the update event channel params
func (o *UpdateEventChannelParams) WithEventChannelID(eventChannelID string) *UpdateEventChannelParams {
	o.SetEventChannelID(eventChannelID)
	return o
}

// SetEventChannelID adds the eventChannelId to the update event channel params
func (o *UpdateEventChannelParams) SetEventChannelID(eventChannelID string) {
	o.EventChannelID = eventChannelID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateEventChannelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EventChannel != nil {
		if err := r.SetBodyParam(o.EventChannel); err != nil {
			return err
		}
	}

	// path param EventChannelId
	if err := r.SetPathParam("EventChannelId", o.EventChannelID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
