// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateEventEventgroupOccurrenceParams creates a new UpdateEventEventgroupOccurrenceParams object
// with the default values initialized.
func NewUpdateEventEventgroupOccurrenceParams() *UpdateEventEventgroupOccurrenceParams {
	var ()
	return &UpdateEventEventgroupOccurrenceParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateEventEventgroupOccurrenceParamsWithTimeout creates a new UpdateEventEventgroupOccurrenceParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateEventEventgroupOccurrenceParamsWithTimeout(timeout time.Duration) *UpdateEventEventgroupOccurrenceParams {
	var ()
	return &UpdateEventEventgroupOccurrenceParams{

		timeout: timeout,
	}
}

// NewUpdateEventEventgroupOccurrenceParamsWithContext creates a new UpdateEventEventgroupOccurrenceParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateEventEventgroupOccurrenceParamsWithContext(ctx context.Context) *UpdateEventEventgroupOccurrenceParams {
	var ()
	return &UpdateEventEventgroupOccurrenceParams{

		Context: ctx,
	}
}

// NewUpdateEventEventgroupOccurrenceParamsWithHTTPClient creates a new UpdateEventEventgroupOccurrenceParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateEventEventgroupOccurrenceParamsWithHTTPClient(client *http.Client) *UpdateEventEventgroupOccurrenceParams {
	var ()
	return &UpdateEventEventgroupOccurrenceParams{
		HTTPClient: client,
	}
}

/*UpdateEventEventgroupOccurrenceParams contains all the parameters to send to the API endpoint
for the update event eventgroup occurrence operation typically these are written to a http.Request
*/
type UpdateEventEventgroupOccurrenceParams struct {

	/*EventEventgroupOccurrence*/
	EventEventgroupOccurrence *models.EventEventgroupOccurrence
	/*EventEventgroupOccurrenceID
	  modify eventgroup occurrence.

	*/
	EventEventgroupOccurrenceID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) WithTimeout(timeout time.Duration) *UpdateEventEventgroupOccurrenceParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) WithContext(ctx context.Context) *UpdateEventEventgroupOccurrenceParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) WithHTTPClient(client *http.Client) *UpdateEventEventgroupOccurrenceParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventEventgroupOccurrence adds the eventEventgroupOccurrence to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) WithEventEventgroupOccurrence(eventEventgroupOccurrence *models.EventEventgroupOccurrence) *UpdateEventEventgroupOccurrenceParams {
	o.SetEventEventgroupOccurrence(eventEventgroupOccurrence)
	return o
}

// SetEventEventgroupOccurrence adds the eventEventgroupOccurrence to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) SetEventEventgroupOccurrence(eventEventgroupOccurrence *models.EventEventgroupOccurrence) {
	o.EventEventgroupOccurrence = eventEventgroupOccurrence
}

// WithEventEventgroupOccurrenceID adds the eventEventgroupOccurrenceID to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) WithEventEventgroupOccurrenceID(eventEventgroupOccurrenceID string) *UpdateEventEventgroupOccurrenceParams {
	o.SetEventEventgroupOccurrenceID(eventEventgroupOccurrenceID)
	return o
}

// SetEventEventgroupOccurrenceID adds the eventEventgroupOccurrenceId to the update event eventgroup occurrence params
func (o *UpdateEventEventgroupOccurrenceParams) SetEventEventgroupOccurrenceID(eventEventgroupOccurrenceID string) {
	o.EventEventgroupOccurrenceID = eventEventgroupOccurrenceID
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateEventEventgroupOccurrenceParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EventEventgroupOccurrence != nil {
		if err := r.SetBodyParam(o.EventEventgroupOccurrence); err != nil {
			return err
		}
	}

	// path param EventEventgroupOccurrenceId
	if err := r.SetPathParam("EventEventgroupOccurrenceId", o.EventEventgroupOccurrenceID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
