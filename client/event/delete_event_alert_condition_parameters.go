// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteEventAlertConditionParams creates a new DeleteEventAlertConditionParams object
// with the default values initialized.
func NewDeleteEventAlertConditionParams() *DeleteEventAlertConditionParams {
	var ()
	return &DeleteEventAlertConditionParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEventAlertConditionParamsWithTimeout creates a new DeleteEventAlertConditionParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteEventAlertConditionParamsWithTimeout(timeout time.Duration) *DeleteEventAlertConditionParams {
	var ()
	return &DeleteEventAlertConditionParams{

		timeout: timeout,
	}
}

// NewDeleteEventAlertConditionParamsWithContext creates a new DeleteEventAlertConditionParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteEventAlertConditionParamsWithContext(ctx context.Context) *DeleteEventAlertConditionParams {
	var ()
	return &DeleteEventAlertConditionParams{

		Context: ctx,
	}
}

// NewDeleteEventAlertConditionParamsWithHTTPClient creates a new DeleteEventAlertConditionParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteEventAlertConditionParamsWithHTTPClient(client *http.Client) *DeleteEventAlertConditionParams {
	var ()
	return &DeleteEventAlertConditionParams{
		HTTPClient: client,
	}
}

/*DeleteEventAlertConditionParams contains all the parameters to send to the API endpoint
for the delete event alert condition operation typically these are written to a http.Request
*/
type DeleteEventAlertConditionParams struct {

	/*EventAlertConditionID
	  Delete the alert-condition.

	*/
	EventAlertConditionID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) WithTimeout(timeout time.Duration) *DeleteEventAlertConditionParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) WithContext(ctx context.Context) *DeleteEventAlertConditionParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) WithHTTPClient(client *http.Client) *DeleteEventAlertConditionParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEventAlertConditionID adds the eventAlertConditionID to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) WithEventAlertConditionID(eventAlertConditionID string) *DeleteEventAlertConditionParams {
	o.SetEventAlertConditionID(eventAlertConditionID)
	return o
}

// SetEventAlertConditionID adds the eventAlertConditionId to the delete event alert condition params
func (o *DeleteEventAlertConditionParams) SetEventAlertConditionID(eventAlertConditionID string) {
	o.EventAlertConditionID = eventAlertConditionID
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEventAlertConditionParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param EventAlertConditionId
	if err := r.SetPathParam("EventAlertConditionId", o.EventAlertConditionID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
