// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteEventAlertConditionsParams creates a new DeleteEventAlertConditionsParams object
// with the default values initialized.
func NewDeleteEventAlertConditionsParams() *DeleteEventAlertConditionsParams {
	var ()
	return &DeleteEventAlertConditionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteEventAlertConditionsParamsWithTimeout creates a new DeleteEventAlertConditionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteEventAlertConditionsParamsWithTimeout(timeout time.Duration) *DeleteEventAlertConditionsParams {
	var ()
	return &DeleteEventAlertConditionsParams{

		timeout: timeout,
	}
}

// NewDeleteEventAlertConditionsParamsWithContext creates a new DeleteEventAlertConditionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteEventAlertConditionsParamsWithContext(ctx context.Context) *DeleteEventAlertConditionsParams {
	var ()
	return &DeleteEventAlertConditionsParams{

		Context: ctx,
	}
}

// NewDeleteEventAlertConditionsParamsWithHTTPClient creates a new DeleteEventAlertConditionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteEventAlertConditionsParamsWithHTTPClient(client *http.Client) *DeleteEventAlertConditionsParams {
	var ()
	return &DeleteEventAlertConditionsParams{
		HTTPClient: client,
	}
}

/*DeleteEventAlertConditionsParams contains all the parameters to send to the API endpoint
for the delete event alert conditions operation typically these are written to a http.Request
*/
type DeleteEventAlertConditionsParams struct {

	/*Channel
	  Delete only conditions for this channel

	*/
	Channel *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) WithTimeout(timeout time.Duration) *DeleteEventAlertConditionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) WithContext(ctx context.Context) *DeleteEventAlertConditionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) WithHTTPClient(client *http.Client) *DeleteEventAlertConditionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannel adds the channel to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) WithChannel(channel *string) *DeleteEventAlertConditionsParams {
	o.SetChannel(channel)
	return o
}

// SetChannel adds the channel to the delete event alert conditions params
func (o *DeleteEventAlertConditionsParams) SetChannel(channel *string) {
	o.Channel = channel
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteEventAlertConditionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Channel != nil {

		// query param channel`
		var qrChannel string
		if o.Channel != nil {
			qrChannel = *o.Channel
		}
		qChannel := qrChannel
		if qChannel != "" {
			if err := r.SetQueryParam("channel`", qChannel); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
