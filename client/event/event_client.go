// Code generated by go-swagger; DO NOT EDIT.

package event

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new event API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for event API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateEventAlertCondition Create a new alert condition.
*/
func (a *Client) CreateEventAlertCondition(params *CreateEventAlertConditionParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEventAlertConditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventAlertConditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventAlertCondition",
		Method:             "POST",
		PathPattern:        "/platform/3/event/alert-conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEventAlertConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateEventAlertConditionOK), nil

}

/*
CreateEventChannel Create a new channel.
*/
func (a *Client) CreateEventChannel(params *CreateEventChannelParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEventChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventChannel",
		Method:             "POST",
		PathPattern:        "/platform/3/event/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEventChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateEventChannelOK), nil

}

/*
CreateEventEvent Create a test event.
*/
func (a *Client) CreateEventEvent(params *CreateEventEventParams, authInfo runtime.ClientAuthInfoWriter) (*CreateEventEventOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateEventEventParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createEventEvent",
		Method:             "POST",
		PathPattern:        "/platform/3/event/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateEventEventReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateEventEventOK), nil

}

/*
DeleteEventAlertCondition Delete the alert-condition.
*/
func (a *Client) DeleteEventAlertCondition(params *DeleteEventAlertConditionParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventAlertConditionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventAlertConditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventAlertCondition",
		Method:             "DELETE",
		PathPattern:        "/platform/3/event/alert-conditions/{EventAlertConditionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEventAlertConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventAlertConditionNoContent), nil

}

/*
DeleteEventAlertConditions Bulk delete of alert conditions.
*/
func (a *Client) DeleteEventAlertConditions(params *DeleteEventAlertConditionsParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventAlertConditionsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventAlertConditionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventAlertConditions",
		Method:             "DELETE",
		PathPattern:        "/platform/3/event/alert-conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEventAlertConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventAlertConditionsNoContent), nil

}

/*
DeleteEventChannel Delete the alert-condition.
*/
func (a *Client) DeleteEventChannel(params *DeleteEventChannelParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteEventChannelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteEventChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteEventChannel",
		Method:             "DELETE",
		PathPattern:        "/platform/3/event/channels/{EventChannelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteEventChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteEventChannelNoContent), nil

}

/*
GetEventAlertCondition Retrieve the alert-condition.
*/
func (a *Client) GetEventAlertCondition(params *GetEventAlertConditionParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventAlertConditionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventAlertConditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventAlertCondition",
		Method:             "GET",
		PathPattern:        "/platform/3/event/alert-conditions/{EventAlertConditionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventAlertConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventAlertConditionOK), nil

}

/*
GetEventCategories List all eventgroup categories.
*/
func (a *Client) GetEventCategories(params *GetEventCategoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventCategoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventCategoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventCategories",
		Method:             "GET",
		PathPattern:        "/platform/3/event/categories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventCategoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventCategoriesOK), nil

}

/*
GetEventCategory Retrieve the eventgroup category.
*/
func (a *Client) GetEventCategory(params *GetEventCategoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventCategoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventCategoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventCategory",
		Method:             "GET",
		PathPattern:        "/platform/3/event/categories/{EventCategoryId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventCategoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventCategoryOK), nil

}

/*
GetEventChannel Retrieve the alert-condition.
*/
func (a *Client) GetEventChannel(params *GetEventChannelParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventChannelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventChannel",
		Method:             "GET",
		PathPattern:        "/platform/3/event/channels/{EventChannelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventChannelOK), nil

}

/*
GetEventEventgroupDefinition Retrieve the eventgroup definition.
*/
func (a *Client) GetEventEventgroupDefinition(params *GetEventEventgroupDefinitionParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventgroupDefinitionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventgroupDefinitionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventgroupDefinition",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventgroup-definitions/{EventEventgroupDefinitionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventgroupDefinitionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventgroupDefinitionOK), nil

}

/*
GetEventEventgroupDefinitions List all eventgroup definitions.
*/
func (a *Client) GetEventEventgroupDefinitions(params *GetEventEventgroupDefinitionsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventgroupDefinitionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventgroupDefinitionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventgroupDefinitions",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventgroup-definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventgroupDefinitionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventgroupDefinitionsOK), nil

}

/*
GetEventEventgroupOccurrence Retrieve individual eventgroup occurrence.
*/
func (a *Client) GetEventEventgroupOccurrence(params *GetEventEventgroupOccurrenceParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventgroupOccurrenceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventgroupOccurrenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventgroupOccurrence",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventgroup-occurrences/{EventEventgroupOccurrenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventgroupOccurrenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventgroupOccurrenceOK), nil

}

/*
GetEventEventgroupOccurrences List all eventgroup occurrences.
*/
func (a *Client) GetEventEventgroupOccurrences(params *GetEventEventgroupOccurrencesParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventgroupOccurrencesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventgroupOccurrencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventgroupOccurrences",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventgroup-occurrences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventgroupOccurrencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventgroupOccurrencesOK), nil

}

/*
GetEventEventlist Retrieve the list of events for a eventgroup occureence.
*/
func (a *Client) GetEventEventlist(params *GetEventEventlistParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventlistOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventlistParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventlist",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventlists/{EventEventlistId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventlistReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventlistOK), nil

}

/*
GetEventEventlists List all event occurrences grouped by eventgroup occurrence.
*/
func (a *Client) GetEventEventlists(params *GetEventEventlistsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventEventlistsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventEventlistsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventEventlists",
		Method:             "GET",
		PathPattern:        "/platform/3/event/eventlists",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventEventlistsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventEventlistsOK), nil

}

/*
GetEventSettings Retrieve the settings.
*/
func (a *Client) GetEventSettings(params *GetEventSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*GetEventSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventSettings",
		Method:             "GET",
		PathPattern:        "/platform/3/event/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetEventSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventSettingsOK), nil

}

/*
ListEventAlertConditions List all alert conditions.
*/
func (a *Client) ListEventAlertConditions(params *ListEventAlertConditionsParams, authInfo runtime.ClientAuthInfoWriter) (*ListEventAlertConditionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventAlertConditionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventAlertConditions",
		Method:             "GET",
		PathPattern:        "/platform/3/event/alert-conditions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventAlertConditionsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListEventAlertConditionsOK), nil

}

/*
ListEventChannels List all channels.
*/
func (a *Client) ListEventChannels(params *ListEventChannelsParams, authInfo runtime.ClientAuthInfoWriter) (*ListEventChannelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListEventChannelsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listEventChannels",
		Method:             "GET",
		PathPattern:        "/platform/3/event/channels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListEventChannelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListEventChannelsOK), nil

}

/*
UpdateEventAlertCondition Modify the alert-condition
*/
func (a *Client) UpdateEventAlertCondition(params *UpdateEventAlertConditionParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventAlertConditionNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventAlertConditionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEventAlertCondition",
		Method:             "PUT",
		PathPattern:        "/platform/3/event/alert-conditions/{EventAlertConditionId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventAlertConditionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEventAlertConditionNoContent), nil

}

/*
UpdateEventChannel Modify the alert-condition
*/
func (a *Client) UpdateEventChannel(params *UpdateEventChannelParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventChannelNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventChannelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEventChannel",
		Method:             "PUT",
		PathPattern:        "/platform/3/event/channels/{EventChannelId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventChannelReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEventChannelNoContent), nil

}

/*
UpdateEventEventgroupOccurrence modify eventgroup occurrence.
*/
func (a *Client) UpdateEventEventgroupOccurrence(params *UpdateEventEventgroupOccurrenceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventEventgroupOccurrenceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventEventgroupOccurrenceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEventEventgroupOccurrence",
		Method:             "PUT",
		PathPattern:        "/platform/3/event/eventgroup-occurrences/{EventEventgroupOccurrenceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventEventgroupOccurrenceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEventEventgroupOccurrenceNoContent), nil

}

/*
UpdateEventEventgroupOccurrences Modify all eventgroup occurrences, resolve or ignore all
*/
func (a *Client) UpdateEventEventgroupOccurrences(params *UpdateEventEventgroupOccurrencesParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventEventgroupOccurrencesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventEventgroupOccurrencesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEventEventgroupOccurrences",
		Method:             "PUT",
		PathPattern:        "/platform/3/event/eventgroup-occurrences",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventEventgroupOccurrencesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEventEventgroupOccurrencesNoContent), nil

}

/*
UpdateEventSettings Update settings
*/
func (a *Client) UpdateEventSettings(params *UpdateEventSettingsParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateEventSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateEventSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateEventSettings",
		Method:             "PUT",
		PathPattern:        "/platform/3/event/settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateEventSettingsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateEventSettingsNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
