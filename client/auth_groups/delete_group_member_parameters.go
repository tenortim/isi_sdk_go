// Code generated by go-swagger; DO NOT EDIT.

package auth_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteGroupMemberParams creates a new DeleteGroupMemberParams object
// with the default values initialized.
func NewDeleteGroupMemberParams() *DeleteGroupMemberParams {
	var ()
	return &DeleteGroupMemberParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteGroupMemberParamsWithTimeout creates a new DeleteGroupMemberParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteGroupMemberParamsWithTimeout(timeout time.Duration) *DeleteGroupMemberParams {
	var ()
	return &DeleteGroupMemberParams{

		timeout: timeout,
	}
}

// NewDeleteGroupMemberParamsWithContext creates a new DeleteGroupMemberParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteGroupMemberParamsWithContext(ctx context.Context) *DeleteGroupMemberParams {
	var ()
	return &DeleteGroupMemberParams{

		Context: ctx,
	}
}

// NewDeleteGroupMemberParamsWithHTTPClient creates a new DeleteGroupMemberParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteGroupMemberParamsWithHTTPClient(client *http.Client) *DeleteGroupMemberParams {
	var ()
	return &DeleteGroupMemberParams{
		HTTPClient: client,
	}
}

/*DeleteGroupMemberParams contains all the parameters to send to the API endpoint
for the delete group member operation typically these are written to a http.Request
*/
type DeleteGroupMemberParams struct {

	/*Group*/
	Group string
	/*GroupMemberID
	  Remove the member from the group.

	*/
	GroupMemberID string
	/*Provider
	  Filter group members by provider.

	*/
	Provider *string
	/*Zone
	  Filter group members by zone.

	*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete group member params
func (o *DeleteGroupMemberParams) WithTimeout(timeout time.Duration) *DeleteGroupMemberParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete group member params
func (o *DeleteGroupMemberParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete group member params
func (o *DeleteGroupMemberParams) WithContext(ctx context.Context) *DeleteGroupMemberParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete group member params
func (o *DeleteGroupMemberParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete group member params
func (o *DeleteGroupMemberParams) WithHTTPClient(client *http.Client) *DeleteGroupMemberParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete group member params
func (o *DeleteGroupMemberParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroup adds the group to the delete group member params
func (o *DeleteGroupMemberParams) WithGroup(group string) *DeleteGroupMemberParams {
	o.SetGroup(group)
	return o
}

// SetGroup adds the group to the delete group member params
func (o *DeleteGroupMemberParams) SetGroup(group string) {
	o.Group = group
}

// WithGroupMemberID adds the groupMemberID to the delete group member params
func (o *DeleteGroupMemberParams) WithGroupMemberID(groupMemberID string) *DeleteGroupMemberParams {
	o.SetGroupMemberID(groupMemberID)
	return o
}

// SetGroupMemberID adds the groupMemberId to the delete group member params
func (o *DeleteGroupMemberParams) SetGroupMemberID(groupMemberID string) {
	o.GroupMemberID = groupMemberID
}

// WithProvider adds the provider to the delete group member params
func (o *DeleteGroupMemberParams) WithProvider(provider *string) *DeleteGroupMemberParams {
	o.SetProvider(provider)
	return o
}

// SetProvider adds the provider to the delete group member params
func (o *DeleteGroupMemberParams) SetProvider(provider *string) {
	o.Provider = provider
}

// WithZone adds the zone to the delete group member params
func (o *DeleteGroupMemberParams) WithZone(zone *string) *DeleteGroupMemberParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the delete group member params
func (o *DeleteGroupMemberParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteGroupMemberParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Group
	if err := r.SetPathParam("Group", o.Group); err != nil {
		return err
	}

	// path param GroupMemberId
	if err := r.SetPathParam("GroupMemberId", o.GroupMemberID); err != nil {
		return err
	}

	if o.Provider != nil {

		// query param provider
		var qrProvider string
		if o.Provider != nil {
			qrProvider = *o.Provider
		}
		qProvider := qrProvider
		if qProvider != "" {
			if err := r.SetQueryParam("provider", qProvider); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
