// Code generated by go-swagger; DO NOT EDIT.

package auth_groups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new auth groups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for auth groups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateGroupMember Add a member to the group.
*/
func (a *Client) CreateGroupMember(params *CreateGroupMemberParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupMemberOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGroupMember",
		Method:             "POST",
		PathPattern:        "/platform/1/auth/groups/{Group}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGroupMemberOK), nil

}

/*
DeleteGroupMember Remove the member from the group.
*/
func (a *Client) DeleteGroupMember(params *DeleteGroupMemberParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupMemberNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupMemberParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupMember",
		Method:             "DELETE",
		PathPattern:        "/platform/1/auth/groups/{Group}/members/{GroupMemberId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupMemberReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupMemberNoContent), nil

}

/*
ListGroupMembers List all the members of the group.
*/
func (a *Client) ListGroupMembers(params *ListGroupMembersParams, authInfo runtime.ClientAuthInfoWriter) (*ListGroupMembersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupMembersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupMembers",
		Method:             "GET",
		PathPattern:        "/platform/1/auth/groups/{Group}/members",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupMembersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListGroupMembersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
