// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new network groupnets API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for network groupnets API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateGroupnetSubnet Create a new subnet.
*/
func (a *Client) CreateGroupnetSubnet(params *CreateGroupnetSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*CreateGroupnetSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateGroupnetSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createGroupnetSubnet",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateGroupnetSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateGroupnetSubnetOK), nil

}

/*
CreateSubnetsSubnetPool Create a new pool.
*/
func (a *Client) CreateSubnetsSubnetPool(params *CreateSubnetsSubnetPoolParams, authInfo runtime.ClientAuthInfoWriter) (*CreateSubnetsSubnetPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSubnetsSubnetPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSubnetsSubnetPool",
		Method:             "POST",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateSubnetsSubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSubnetsSubnetPoolOK), nil

}

/*
DeleteGroupnetSubnet Delete a network subnet..
*/
func (a *Client) DeleteGroupnetSubnet(params *DeleteGroupnetSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteGroupnetSubnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteGroupnetSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteGroupnetSubnet",
		Method:             "DELETE",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteGroupnetSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteGroupnetSubnetNoContent), nil

}

/*
DeleteSubnetsSubnetPool Delete a network pool.
*/
func (a *Client) DeleteSubnetsSubnetPool(params *DeleteSubnetsSubnetPoolParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteSubnetsSubnetPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSubnetsSubnetPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSubnetsSubnetPool",
		Method:             "DELETE",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteSubnetsSubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSubnetsSubnetPoolNoContent), nil

}

/*
GetGroupnetSubnet View a network subnet.
*/
func (a *Client) GetGroupnetSubnet(params *GetGroupnetSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*GetGroupnetSubnetOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGroupnetSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGroupnetSubnet",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetGroupnetSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGroupnetSubnetOK), nil

}

/*
GetSubnetsSubnetPool View a single network pool.
*/
func (a *Client) GetSubnetsSubnetPool(params *GetSubnetsSubnetPoolParams, authInfo runtime.ClientAuthInfoWriter) (*GetSubnetsSubnetPoolOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSubnetsSubnetPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSubnetsSubnetPool",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetSubnetsSubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSubnetsSubnetPoolOK), nil

}

/*
ListGroupnetSubnets Get a list of subnets.
*/
func (a *Client) ListGroupnetSubnets(params *ListGroupnetSubnetsParams, authInfo runtime.ClientAuthInfoWriter) (*ListGroupnetSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListGroupnetSubnetsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listGroupnetSubnets",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListGroupnetSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListGroupnetSubnetsOK), nil

}

/*
ListSubnetsSubnetPools Get a list of network pools.
*/
func (a *Client) ListSubnetsSubnetPools(params *ListSubnetsSubnetPoolsParams, authInfo runtime.ClientAuthInfoWriter) (*ListSubnetsSubnetPoolsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSubnetsSubnetPoolsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSubnetsSubnetPools",
		Method:             "GET",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListSubnetsSubnetPoolsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSubnetsSubnetPoolsOK), nil

}

/*
UpdateGroupnetSubnet Modify a network subnet.
*/
func (a *Client) UpdateGroupnetSubnet(params *UpdateGroupnetSubnetParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateGroupnetSubnetNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateGroupnetSubnetParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateGroupnetSubnet",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{GroupnetSubnetId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateGroupnetSubnetReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateGroupnetSubnetNoContent), nil

}

/*
UpdateSubnetsSubnetPool Modify a network pool.
*/
func (a *Client) UpdateSubnetsSubnetPool(params *UpdateSubnetsSubnetPoolParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateSubnetsSubnetPoolNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSubnetsSubnetPoolParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSubnetsSubnetPool",
		Method:             "PUT",
		PathPattern:        "/platform/3/network/groupnets/{Groupnet}/subnets/{Subnet}/pools/{SubnetsSubnetPoolId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateSubnetsSubnetPoolReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSubnetsSubnetPoolNoContent), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
