// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateSubnetsSubnetPoolParams creates a new UpdateSubnetsSubnetPoolParams object
// with the default values initialized.
func NewUpdateSubnetsSubnetPoolParams() *UpdateSubnetsSubnetPoolParams {
	var ()
	return &UpdateSubnetsSubnetPoolParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateSubnetsSubnetPoolParamsWithTimeout creates a new UpdateSubnetsSubnetPoolParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateSubnetsSubnetPoolParamsWithTimeout(timeout time.Duration) *UpdateSubnetsSubnetPoolParams {
	var ()
	return &UpdateSubnetsSubnetPoolParams{

		timeout: timeout,
	}
}

// NewUpdateSubnetsSubnetPoolParamsWithContext creates a new UpdateSubnetsSubnetPoolParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateSubnetsSubnetPoolParamsWithContext(ctx context.Context) *UpdateSubnetsSubnetPoolParams {
	var ()
	return &UpdateSubnetsSubnetPoolParams{

		Context: ctx,
	}
}

// NewUpdateSubnetsSubnetPoolParamsWithHTTPClient creates a new UpdateSubnetsSubnetPoolParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateSubnetsSubnetPoolParamsWithHTTPClient(client *http.Client) *UpdateSubnetsSubnetPoolParams {
	var ()
	return &UpdateSubnetsSubnetPoolParams{
		HTTPClient: client,
	}
}

/*UpdateSubnetsSubnetPoolParams contains all the parameters to send to the API endpoint
for the update subnets subnet pool operation typically these are written to a http.Request
*/
type UpdateSubnetsSubnetPoolParams struct {

	/*Groupnet*/
	Groupnet string
	/*Subnet*/
	Subnet string
	/*SubnetsSubnetPool*/
	SubnetsSubnetPool *models.SubnetsSubnetPool
	/*SubnetsSubnetPoolID
	  Modify a network pool.

	*/
	SubnetsSubnetPoolID string
	/*Force
	  force creating this pool even if it causes an MTU conflict.

	*/
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithTimeout(timeout time.Duration) *UpdateSubnetsSubnetPoolParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithContext(ctx context.Context) *UpdateSubnetsSubnetPoolParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithHTTPClient(client *http.Client) *UpdateSubnetsSubnetPoolParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupnet adds the groupnet to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithGroupnet(groupnet string) *UpdateSubnetsSubnetPoolParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetGroupnet(groupnet string) {
	o.Groupnet = groupnet
}

// WithSubnet adds the subnet to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithSubnet(subnet string) *UpdateSubnetsSubnetPoolParams {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetSubnet(subnet string) {
	o.Subnet = subnet
}

// WithSubnetsSubnetPool adds the subnetsSubnetPool to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithSubnetsSubnetPool(subnetsSubnetPool *models.SubnetsSubnetPool) *UpdateSubnetsSubnetPoolParams {
	o.SetSubnetsSubnetPool(subnetsSubnetPool)
	return o
}

// SetSubnetsSubnetPool adds the subnetsSubnetPool to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetSubnetsSubnetPool(subnetsSubnetPool *models.SubnetsSubnetPool) {
	o.SubnetsSubnetPool = subnetsSubnetPool
}

// WithSubnetsSubnetPoolID adds the subnetsSubnetPoolID to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithSubnetsSubnetPoolID(subnetsSubnetPoolID string) *UpdateSubnetsSubnetPoolParams {
	o.SetSubnetsSubnetPoolID(subnetsSubnetPoolID)
	return o
}

// SetSubnetsSubnetPoolID adds the subnetsSubnetPoolId to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetSubnetsSubnetPoolID(subnetsSubnetPoolID string) {
	o.SubnetsSubnetPoolID = subnetsSubnetPoolID
}

// WithForce adds the force to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) WithForce(force *bool) *UpdateSubnetsSubnetPoolParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the update subnets subnet pool params
func (o *UpdateSubnetsSubnetPoolParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateSubnetsSubnetPoolParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Groupnet
	if err := r.SetPathParam("Groupnet", o.Groupnet); err != nil {
		return err
	}

	// path param Subnet
	if err := r.SetPathParam("Subnet", o.Subnet); err != nil {
		return err
	}

	if o.SubnetsSubnetPool != nil {
		if err := r.SetBodyParam(o.SubnetsSubnetPool); err != nil {
			return err
		}
	}

	// path param SubnetsSubnetPoolId
	if err := r.SetPathParam("SubnetsSubnetPoolId", o.SubnetsSubnetPoolID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
