// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/tenortim/isi_sdk_go/models"
)

// NewUpdateGroupnetSubnetParams creates a new UpdateGroupnetSubnetParams object
// with the default values initialized.
func NewUpdateGroupnetSubnetParams() *UpdateGroupnetSubnetParams {
	var ()
	return &UpdateGroupnetSubnetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateGroupnetSubnetParamsWithTimeout creates a new UpdateGroupnetSubnetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateGroupnetSubnetParamsWithTimeout(timeout time.Duration) *UpdateGroupnetSubnetParams {
	var ()
	return &UpdateGroupnetSubnetParams{

		timeout: timeout,
	}
}

// NewUpdateGroupnetSubnetParamsWithContext creates a new UpdateGroupnetSubnetParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateGroupnetSubnetParamsWithContext(ctx context.Context) *UpdateGroupnetSubnetParams {
	var ()
	return &UpdateGroupnetSubnetParams{

		Context: ctx,
	}
}

// NewUpdateGroupnetSubnetParamsWithHTTPClient creates a new UpdateGroupnetSubnetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateGroupnetSubnetParamsWithHTTPClient(client *http.Client) *UpdateGroupnetSubnetParams {
	var ()
	return &UpdateGroupnetSubnetParams{
		HTTPClient: client,
	}
}

/*UpdateGroupnetSubnetParams contains all the parameters to send to the API endpoint
for the update groupnet subnet operation typically these are written to a http.Request
*/
type UpdateGroupnetSubnetParams struct {

	/*Groupnet*/
	Groupnet string
	/*GroupnetSubnet*/
	GroupnetSubnet *models.GroupnetSubnet
	/*GroupnetSubnetID
	  Modify a network subnet.

	*/
	GroupnetSubnetID string
	/*Force
	  force modifying this subnet even if it causes an MTU conflict.

	*/
	Force *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithTimeout(timeout time.Duration) *UpdateGroupnetSubnetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithContext(ctx context.Context) *UpdateGroupnetSubnetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithHTTPClient(client *http.Client) *UpdateGroupnetSubnetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupnet adds the groupnet to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithGroupnet(groupnet string) *UpdateGroupnetSubnetParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetGroupnet(groupnet string) {
	o.Groupnet = groupnet
}

// WithGroupnetSubnet adds the groupnetSubnet to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithGroupnetSubnet(groupnetSubnet *models.GroupnetSubnet) *UpdateGroupnetSubnetParams {
	o.SetGroupnetSubnet(groupnetSubnet)
	return o
}

// SetGroupnetSubnet adds the groupnetSubnet to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetGroupnetSubnet(groupnetSubnet *models.GroupnetSubnet) {
	o.GroupnetSubnet = groupnetSubnet
}

// WithGroupnetSubnetID adds the groupnetSubnetID to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithGroupnetSubnetID(groupnetSubnetID string) *UpdateGroupnetSubnetParams {
	o.SetGroupnetSubnetID(groupnetSubnetID)
	return o
}

// SetGroupnetSubnetID adds the groupnetSubnetId to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetGroupnetSubnetID(groupnetSubnetID string) {
	o.GroupnetSubnetID = groupnetSubnetID
}

// WithForce adds the force to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) WithForce(force *bool) *UpdateGroupnetSubnetParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the update groupnet subnet params
func (o *UpdateGroupnetSubnetParams) SetForce(force *bool) {
	o.Force = force
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateGroupnetSubnetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Groupnet
	if err := r.SetPathParam("Groupnet", o.Groupnet); err != nil {
		return err
	}

	if o.GroupnetSubnet != nil {
		if err := r.SetBodyParam(o.GroupnetSubnet); err != nil {
			return err
		}
	}

	// path param GroupnetSubnetId
	if err := r.SetPathParam("GroupnetSubnetId", o.GroupnetSubnetID); err != nil {
		return err
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
