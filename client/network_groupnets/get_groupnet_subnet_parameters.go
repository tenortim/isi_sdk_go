// Code generated by go-swagger; DO NOT EDIT.

package network_groupnets

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetGroupnetSubnetParams creates a new GetGroupnetSubnetParams object
// with the default values initialized.
func NewGetGroupnetSubnetParams() *GetGroupnetSubnetParams {
	var ()
	return &GetGroupnetSubnetParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetGroupnetSubnetParamsWithTimeout creates a new GetGroupnetSubnetParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetGroupnetSubnetParamsWithTimeout(timeout time.Duration) *GetGroupnetSubnetParams {
	var ()
	return &GetGroupnetSubnetParams{

		timeout: timeout,
	}
}

// NewGetGroupnetSubnetParamsWithContext creates a new GetGroupnetSubnetParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetGroupnetSubnetParamsWithContext(ctx context.Context) *GetGroupnetSubnetParams {
	var ()
	return &GetGroupnetSubnetParams{

		Context: ctx,
	}
}

// NewGetGroupnetSubnetParamsWithHTTPClient creates a new GetGroupnetSubnetParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetGroupnetSubnetParamsWithHTTPClient(client *http.Client) *GetGroupnetSubnetParams {
	var ()
	return &GetGroupnetSubnetParams{
		HTTPClient: client,
	}
}

/*GetGroupnetSubnetParams contains all the parameters to send to the API endpoint
for the get groupnet subnet operation typically these are written to a http.Request
*/
type GetGroupnetSubnetParams struct {

	/*Groupnet*/
	Groupnet string
	/*GroupnetSubnetID
	  View a network subnet.

	*/
	GroupnetSubnetID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) WithTimeout(timeout time.Duration) *GetGroupnetSubnetParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) WithContext(ctx context.Context) *GetGroupnetSubnetParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) WithHTTPClient(client *http.Client) *GetGroupnetSubnetParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithGroupnet adds the groupnet to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) WithGroupnet(groupnet string) *GetGroupnetSubnetParams {
	o.SetGroupnet(groupnet)
	return o
}

// SetGroupnet adds the groupnet to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) SetGroupnet(groupnet string) {
	o.Groupnet = groupnet
}

// WithGroupnetSubnetID adds the groupnetSubnetID to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) WithGroupnetSubnetID(groupnetSubnetID string) *GetGroupnetSubnetParams {
	o.SetGroupnetSubnetID(groupnetSubnetID)
	return o
}

// SetGroupnetSubnetID adds the groupnetSubnetId to the get groupnet subnet params
func (o *GetGroupnetSubnetParams) SetGroupnetSubnetID(groupnetSubnetID string) {
	o.GroupnetSubnetID = groupnetSubnetID
}

// WriteToRequest writes these params to a swagger request
func (o *GetGroupnetSubnetParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param Groupnet
	if err := r.SetPathParam("Groupnet", o.Groupnet); err != nil {
		return err
	}

	// path param GroupnetSubnetId
	if err := r.SetPathParam("GroupnetSubnetId", o.GroupnetSubnetID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
